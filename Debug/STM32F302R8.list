
STM32F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800906c  0800906c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b4  080094b4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080094b4  080094b4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094b4  080094b4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b4  080094b4  000194b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080094bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  2000005c  08009518  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08009518  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bbc  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a98  00000000  00000000  00032c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00035728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc4  00000000  00000000  00036798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d90a  00000000  00000000  0003745c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016975  00000000  00000000  00054d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000acf6d  00000000  00000000  0006b6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000492c  00000000  00000000  00118648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  0011cf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009054 	.word	0x08009054

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08009054 	.word	0x08009054

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 8000834:	b480      	push	{r7}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
 800083a:	ed87 0a03 	vstr	s0, [r7, #12]
 800083e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000842:	ed87 1a01 	vstr	s2, [r7, #4]
 8000846:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	ed93 7a00 	vldr	s14, [r3]
 800084e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000852:	edd7 7a01 	vldr	s15, [r7, #4]
 8000856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800085a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000864:	ed97 7a02 	vldr	s14, [r7, #8]
 8000868:	edd7 7a03 	vldr	s15, [r7, #12]
 800086c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	edd3 7a00 	vldr	s15, [r3]
 8000876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087a:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	ee07 3a90 	vmov	s15, r3
}
 8000884:	eeb0 0a67 	vmov.f32	s0, s15
 8000888:	371c      	adds	r7, #28
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlogalVariables.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 8000892:	b480      	push	{r7}
 8000894:	b087      	sub	sp, #28
 8000896:	af00      	add	r7, sp, #0
 8000898:	ed87 0a03 	vstr	s0, [r7, #12]
 800089c:	edc7 0a02 	vstr	s1, [r7, #8]
 80008a0:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 80008a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80008a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b0:	db0b      	blt.n	80008ca <gfDivideAvoidZero+0x38>
 80008b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80008b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80008ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c2:	d502      	bpl.n	80008ca <gfDivideAvoidZero+0x38>
		den = threshold;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	e017      	b.n	80008fa <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 80008ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80008ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d6:	d510      	bpl.n	80008fa <gfDivideAvoidZero+0x68>
 80008d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80008dc:	eef1 7a67 	vneg.f32	s15, s15
 80008e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80008e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ec:	dd05      	ble.n	80008fa <gfDivideAvoidZero+0x68>
		den = -threshold;
 80008ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80008f2:	eef1 7a67 	vneg.f32	s15, s15
 80008f6:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 80008fa:	edd7 6a03 	vldr	s13, [r7, #12]
 80008fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000906:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	ee07 3a90 	vmov	s15, r3
}
 8000910:	eeb0 0a67 	vmov.f32	s0, s15
 8000914:	371c      	adds	r7, #28
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 800092a:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000990 <gfWrapTheta+0x70>
 800092e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000932:	f007 fbd9 	bl	80080e8 <fmodf>
 8000936:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 800093a:	edd7 7a01 	vldr	s15, [r7, #4]
 800093e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000994 <gfWrapTheta+0x74>
 8000942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094a:	dd08      	ble.n	800095e <gfWrapTheta+0x3e>
		theta -= TWOPI;
 800094c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000950:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000990 <gfWrapTheta+0x70>
 8000954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000958:	edc7 7a01 	vstr	s15, [r7, #4]
 800095c:	e010      	b.n	8000980 <gfWrapTheta+0x60>
	else if( theta < -PI)
 800095e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000962:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000998 <gfWrapTheta+0x78>
 8000966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800096a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096e:	d507      	bpl.n	8000980 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000970:	edd7 7a01 	vldr	s15, [r7, #4]
 8000974:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000990 <gfWrapTheta+0x70>
 8000978:	ee77 7a87 	vadd.f32	s15, s15, s14
 800097c:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	ee07 3a90 	vmov	s15, r3
}
 8000986:	eeb0 0a67 	vmov.f32	s0, s15
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40c90fdb 	.word	0x40c90fdb
 8000994:	40490fdb 	.word	0x40490fdb
 8000998:	c0490fdb 	.word	0xc0490fdb

0800099c <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80009a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80009aa:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 80009ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80009b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80009b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009be:	dd01      	ble.n	80009c4 <gUpperLowerLimit+0x28>
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 80009c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80009c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80009cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d4:	d501      	bpl.n	80009da <gUpperLowerLimit+0x3e>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60fb      	str	r3, [r7, #12]
	return input;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	ee07 3a90 	vmov	s15, r3
}
 80009e0:	eeb0 0a67 	vmov.f32	s0, s15
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]
	outputMode[0] = OUTPUTMODE_OPEN;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_OPEN;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	3302      	adds	r3, #2
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
	Duty[0] = 0.0f;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
	Duty[1] = 0.0f;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	f04f 0200 	mov.w	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
	Duty[2] = 0.0f;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3308      	adds	r3, #8
 8000a24:	f04f 0200 	mov.w	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <gLPF>:

void gLPF(float r, float wc, float Ts, float *y){
 8000a36:	b480      	push	{r7}
 8000a38:	b087      	sub	sp, #28
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a40:	edc7 0a02 	vstr	s1, [r7, #8]
 8000a44:	ed87 1a01 	vstr	s2, [r7, #4]
 8000a48:	6038      	str	r0, [r7, #0]
	// Under approximation  1/wc >> Ts
	// time constant tau = 1/wc
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 8000a4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a56:	edc7 7a05 	vstr	s15, [r7, #20]
	yn_1 = *y;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	613b      	str	r3, [r7, #16]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a74:	edd7 6a05 	vldr	s13, [r7, #20]
 8000a78:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	edc3 7a00 	vstr	s15, [r3]
}
 8000a8a:	bf00      	nop
 8000a8c:	371c      	adds	r7, #28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <Sequence>:
static void slctPosMode(float electFreq, uint8_t* posMode);
static void slctDrvMode(float electFreq, uint8_t* drvMode);
static void slctElectAngleFromPosMode(uint8_t posMode, float *electAngle, float *electAngVelo);
static void slctCntlFromDrvMode(uint8_t drvMode, float* Duty, int8_t* outputMode);

void Sequence(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

	if(sInitCnt < 500){
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <Sequence+0x84>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000aa4:	d20c      	bcs.n	8000ac0 <Sequence+0x28>
		sInitCnt++;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <Sequence+0x84>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <Sequence+0x84>)
 8000ab0:	801a      	strh	r2, [r3, #0]
		sPosMode = POSMODE_HALL;
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <Sequence+0x88>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <Sequence+0x8c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	e00f      	b.n	8000ae0 <Sequence+0x48>
	}
	else{
	slctPosMode(gElectFreq, &sPosMode);
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <Sequence+0x90>)
 8000ac2:	edd3 7a00 	vldr	s15, [r3]
 8000ac6:	4816      	ldr	r0, [pc, #88]	; (8000b20 <Sequence+0x88>)
 8000ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8000acc:	f000 f83a 	bl	8000b44 <slctPosMode>
	slctDrvMode(gElectFreq, &sDrvMode);
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <Sequence+0x90>)
 8000ad2:	edd3 7a00 	vldr	s15, [r3]
 8000ad6:	4813      	ldr	r0, [pc, #76]	; (8000b24 <Sequence+0x8c>)
 8000ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8000adc:	f000 f867 	bl	8000bae <slctDrvMode>
	}

	slctElectAngleFromPosMode(sPosMode, &sElectAngle, &sElectAngVelo);
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <Sequence+0x88>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <Sequence+0x94>)
 8000ae6:	4912      	ldr	r1, [pc, #72]	; (8000b30 <Sequence+0x98>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 f895 	bl	8000c18 <slctElectAngleFromPosMode>
	gTheta = sElectAngle;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <Sequence+0x98>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <Sequence+0x9c>)
 8000af4:	6013      	str	r3, [r2, #0]
	gElectAngVelo = sElectAngVelo;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <Sequence+0x94>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <Sequence+0xa0>)
 8000afc:	6013      	str	r3, [r2, #0]
	slctCntlFromDrvMode(sDrvMode, sDuty, sOutputMode);
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <Sequence+0x8c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <Sequence+0xa4>)
 8000b04:	490e      	ldr	r1, [pc, #56]	; (8000b40 <Sequence+0xa8>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f8de 	bl	8000cc8 <slctCntlFromDrvMode>

	writeOutputMode(sOutputMode);
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <Sequence+0xa4>)
 8000b0e:	f000 fab7 	bl	8001080 <writeOutputMode>
	writeDuty(sDuty);
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <Sequence+0xa8>)
 8000b14:	f000 faf6 	bl	8001104 <writeDuty>

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000b4 	.word	0x200000b4
 8000b20:	200000b2 	.word	0x200000b2
 8000b24:	200000b3 	.word	0x200000b3
 8000b28:	20000088 	.word	0x20000088
 8000b2c:	200000bc 	.word	0x200000bc
 8000b30:	200000b8 	.word	0x200000b8
 8000b34:	2000008c 	.word	0x2000008c
 8000b38:	20000090 	.word	0x20000090
 8000b3c:	200000c0 	.word	0x200000c0
 8000b40:	200000c4 	.word	0x200000c4

08000b44 <slctPosMode>:

void slctPosMode(float electFreq, uint8_t* posMode){
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b4e:	6038      	str	r0, [r7, #0]

	if(*posMode != POSMODE_HALL_PLL){
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d010      	beq.n	8000b7a <slctPosMode+0x36>
		if (electFreq > ELECTFREQ_VALIDPLL)
 8000b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b5c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b68:	dd03      	ble.n	8000b72 <slctPosMode+0x2e>
			*posMode = POSMODE_HALL_PLL;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	701a      	strb	r2, [r3, #0]
		if (electFreq < ELECTFREQ_INVALIDPLL)
			*posMode = POSMODE_HALL;
		else
			*posMode = POSMODE_HALL_PLL;
	}
}
 8000b70:	e017      	b.n	8000ba2 <slctPosMode+0x5e>
			*posMode = POSMODE_HALL;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2202      	movs	r2, #2
 8000b76:	701a      	strb	r2, [r3, #0]
}
 8000b78:	e013      	b.n	8000ba2 <slctPosMode+0x5e>
	else if(*posMode == POSMODE_HALL_PLL){
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d10f      	bne.n	8000ba2 <slctPosMode+0x5e>
		if (electFreq < ELECTFREQ_INVALIDPLL)
 8000b82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b86:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b92:	d503      	bpl.n	8000b9c <slctPosMode+0x58>
			*posMode = POSMODE_HALL;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2202      	movs	r2, #2
 8000b98:	701a      	strb	r2, [r3, #0]
}
 8000b9a:	e002      	b.n	8000ba2 <slctPosMode+0x5e>
			*posMode = POSMODE_HALL_PLL;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	701a      	strb	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <slctDrvMode>:

void slctDrvMode(float electFreq, uint8_t* drvMode){
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb8:	6038      	str	r0, [r7, #0]

	if(*drvMode != DRVMODE_VECTORCONTROL){
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d010      	beq.n	8000be4 <slctDrvMode+0x36>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 8000bc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bc6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd2:	dd03      	ble.n	8000bdc <slctDrvMode+0x2e>
			*drvMode = DRVMODE_VECTORCONTROL;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	701a      	strb	r2, [r3, #0]
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
			*drvMode = DRVMODE_OPENLOOP;
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}
 8000bda:	e017      	b.n	8000c0c <slctDrvMode+0x5e>
			*drvMode = DRVMODE_OPENLOOP;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2202      	movs	r2, #2
 8000be0:	701a      	strb	r2, [r3, #0]
}
 8000be2:	e013      	b.n	8000c0c <slctDrvMode+0x5e>
	else if(*drvMode == DRVMODE_VECTORCONTROL){
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d10f      	bne.n	8000c0c <slctDrvMode+0x5e>
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 8000bec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bf0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfc:	d503      	bpl.n	8000c06 <slctDrvMode+0x58>
			*drvMode = DRVMODE_OPENLOOP;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	2202      	movs	r2, #2
 8000c02:	701a      	strb	r2, [r3, #0]
}
 8000c04:	e002      	b.n	8000c0c <slctDrvMode+0x5e>
			*drvMode = DRVMODE_VECTORCONTROL;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2203      	movs	r2, #3
 8000c0a:	701a      	strb	r2, [r3, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <slctElectAngleFromPosMode>:

void slctElectAngleFromPosMode(uint8_t posMode, float *electAngle, float *electAngVelo){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	73fb      	strb	r3, [r7, #15]
	uint8_t flgPLL;

	switch(posMode){
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d83c      	bhi.n	8000ca6 <slctElectAngleFromPosMode+0x8e>
 8000c2c:	a201      	add	r2, pc, #4	; (adr r2, 8000c34 <slctElectAngleFromPosMode+0x1c>)
 8000c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c32:	bf00      	nop
 8000c34:	08000c45 	.word	0x08000c45
 8000c38:	08000c55 	.word	0x08000c55
 8000c3c:	08000c83 	.word	0x08000c83
 8000c40:	08000c95 	.word	0x08000c95
	case POSMODE_STOP:
		*electAngle = 0;
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
		*electAngVelo = 0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]

	case POSMODE_FREERUN:
		sElectAngle = sElectAngle + 2000.0f * CARRIERCYCLE;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <slctElectAngleFromPosMode+0xa8>)
 8000c56:	edd3 7a00 	vldr	s15, [r3]
 8000c5a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000cc4 <slctElectAngleFromPosMode+0xac>
 8000c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <slctElectAngleFromPosMode+0xa8>)
 8000c64:	edc3 7a00 	vstr	s15, [r3]
		*electAngle = gfWrapTheta(sElectAngle);
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <slctElectAngleFromPosMode+0xa8>)
 8000c6a:	edd3 7a00 	vldr	s15, [r3]
 8000c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c72:	f7ff fe55 	bl	8000920 <gfWrapTheta>
 8000c76:	eef0 7a40 	vmov.f32	s15, s0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
		break;
 8000c80:	e01a      	b.n	8000cb8 <slctElectAngleFromPosMode+0xa0>
	case POSMODE_HALL:
		flgPLL = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	75fb      	strb	r3, [r7, #23]
		calcElectAngle(flgPLL, electAngle, electAngVelo);
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fa7b 	bl	8001188 <calcElectAngle>
		break;
 8000c92:	e011      	b.n	8000cb8 <slctElectAngleFromPosMode+0xa0>
	case POSMODE_HALL_PLL:
		flgPLL = 1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	75fb      	strb	r3, [r7, #23]
		calcElectAngle(flgPLL, electAngle, electAngVelo);
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fa72 	bl	8001188 <calcElectAngle>
		break;
 8000ca4:	e008      	b.n	8000cb8 <slctElectAngleFromPosMode+0xa0>
	default:
		*electAngle = 0;
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	f04f 0200 	mov.w	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
		*electAngVelo = 0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f04f 0200 	mov.w	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
		break;
 8000cb6:	bf00      	nop
	}
}
 8000cb8:	bf00      	nop
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000b8 	.word	0x200000b8
 8000cc4:	3e924925 	.word	0x3e924925

08000cc8 <slctCntlFromDrvMode>:

void slctCntlFromDrvMode(uint8_t drvMode, float* Duty, int8_t* outputMode){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	4603      	mov	r3, r0
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	73fb      	strb	r3, [r7, #15]
	uint8_t flgFB;
	// MotorDrive

	float Idq_ref[2];
	Idq_ref[0] = 0.0f;//gVolume * 2;//-0.0f;//gVolume;//0.05f;
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
	Idq_ref[1] = IQREFMAX * gVolume;
 8000cdc:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <slctCntlFromDrvMode+0xd8>)
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000da4 <slctCntlFromDrvMode+0xdc>
 8000ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cea:	edc7 7a06 	vstr	s15, [r7, #24]

	switch(drvMode){
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d02b      	beq.n	8000d4c <slctCntlFromDrvMode+0x84>
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	dc49      	bgt.n	8000d8c <slctCntlFromDrvMode+0xc4>
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d002      	beq.n	8000d02 <slctCntlFromDrvMode+0x3a>
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d005      	beq.n	8000d0c <slctCntlFromDrvMode+0x44>
 8000d00:	e044      	b.n	8000d8c <slctCntlFromDrvMode+0xc4>
		case DRVMODE_OFFDUTY:
			gOffDuty(Duty, outputMode);
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	68b8      	ldr	r0, [r7, #8]
 8000d06:	f7ff fe72 	bl	80009ee <gOffDuty>
			break;
 8000d0a:	e044      	b.n	8000d96 <slctCntlFromDrvMode+0xce>
		case DRVMODE_OPENLOOP:
			flgFB = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	77fb      	strb	r3, [r7, #31]
			VectorControlTasks(Idq_ref, gTheta, gElectAngVelo, gIuvw, gVdc, gTwoDivVdc, flgFB, Duty, outputMode);
 8000d10:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <slctCntlFromDrvMode+0xe0>)
 8000d12:	edd3 7a00 	vldr	s15, [r3]
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <slctCntlFromDrvMode+0xe4>)
 8000d18:	ed93 7a00 	vldr	s14, [r3]
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <slctCntlFromDrvMode+0xe8>)
 8000d1e:	edd3 6a00 	vldr	s13, [r3]
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <slctCntlFromDrvMode+0xec>)
 8000d24:	ed93 6a00 	vldr	s12, [r3]
 8000d28:	7ffa      	ldrb	r2, [r7, #31]
 8000d2a:	f107 0014 	add.w	r0, r7, #20
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	eef0 1a46 	vmov.f32	s3, s12
 8000d38:	eeb0 1a66 	vmov.f32	s2, s13
 8000d3c:	491e      	ldr	r1, [pc, #120]	; (8000db8 <slctCntlFromDrvMode+0xf0>)
 8000d3e:	eef0 0a47 	vmov.f32	s1, s14
 8000d42:	eeb0 0a67 	vmov.f32	s0, s15
 8000d46:	f000 fc4b 	bl	80015e0 <VectorControlTasks>
			break;
 8000d4a:	e024      	b.n	8000d96 <slctCntlFromDrvMode+0xce>
		case DRVMODE_VECTORCONTROL:
			flgFB = 1;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	77fb      	strb	r3, [r7, #31]
			VectorControlTasks(Idq_ref, gTheta, gElectAngVelo, gIuvw, gVdc, gTwoDivVdc, flgFB, Duty, outputMode);
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <slctCntlFromDrvMode+0xe0>)
 8000d52:	edd3 7a00 	vldr	s15, [r3]
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <slctCntlFromDrvMode+0xe4>)
 8000d58:	ed93 7a00 	vldr	s14, [r3]
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <slctCntlFromDrvMode+0xe8>)
 8000d5e:	edd3 6a00 	vldr	s13, [r3]
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <slctCntlFromDrvMode+0xec>)
 8000d64:	ed93 6a00 	vldr	s12, [r3]
 8000d68:	7ffa      	ldrb	r2, [r7, #31]
 8000d6a:	f107 0014 	add.w	r0, r7, #20
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	eef0 1a46 	vmov.f32	s3, s12
 8000d78:	eeb0 1a66 	vmov.f32	s2, s13
 8000d7c:	490e      	ldr	r1, [pc, #56]	; (8000db8 <slctCntlFromDrvMode+0xf0>)
 8000d7e:	eef0 0a47 	vmov.f32	s1, s14
 8000d82:	eeb0 0a67 	vmov.f32	s0, s15
 8000d86:	f000 fc2b 	bl	80015e0 <VectorControlTasks>
			break;
 8000d8a:	e004      	b.n	8000d96 <slctCntlFromDrvMode+0xce>
		default :
			gOffDuty(Duty, outputMode);
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	68b8      	ldr	r0, [r7, #8]
 8000d90:	f7ff fe2d 	bl	80009ee <gOffDuty>
	}
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000009c 	.word	0x2000009c
 8000da4:	430c0000 	.word	0x430c0000
 8000da8:	2000008c 	.word	0x2000008c
 8000dac:	20000090 	.word	0x20000090
 8000db0:	20000094 	.word	0x20000094
 8000db4:	20000098 	.word	0x20000098
 8000db8:	200000a0 	.word	0x200000a0

08000dbc <readButton1>:
#include "SignalReadWrite.h"


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	volatile uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <readButton1+0x20>)
 8000dc8:	f003 fec0 	bl	8004b4c <HAL_GPIO_ReadPin>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71fb      	strb	r3, [r7, #7]
	return B1;
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	b2db      	uxtb	r3, r3
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	48000800 	.word	0x48000800

08000de0 <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 8000de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dec:	607b      	str	r3, [r7, #4]

	return inputCaptureCnt;
 8000dee:	687b      	ldr	r3, [r7, #4]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8000e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0c:	613b      	str	r3, [r7, #16]
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	3301      	adds	r3, #1
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
 8000e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	ee07 3a90 	vmov	s15, r3
 8000e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e2e:	edc7 7a05 	vstr	s15, [r7, #20]

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e3c:	eef1 7a67 	vneg.f32	s15, s15
 8000e40:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4c:	d50a      	bpl.n	8000e64 <readTimeInterval+0x68>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	ee07 3a90 	vmov	s15, r3
 8000e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e58:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e60:	edc7 7a05 	vstr	s15, [r7, #20]

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;
 8000e64:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e68:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000e88 <readTimeInterval+0x8c>
 8000e6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e70:	edc7 7a02 	vstr	s15, [r7, #8]

	return timeInterval;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	ee07 3a90 	vmov	s15, r3
}
 8000e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7e:	371c      	adds	r7, #28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	4c895440 	.word	0x4c895440

08000e8c <readVolume>:

float readVolume(void){
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <readVolume+0x50>)
 8000e94:	885b      	ldrh	r3, [r3, #2]
 8000e96:	807b      	strh	r3, [r7, #2]

	//Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
	Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
 8000e98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e9c:	f2a3 33b6 	subw	r3, r3, #950	; 0x3b6
 8000ea0:	ee07 3a90 	vmov	s15, r3
 8000ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000ee0 <readVolume+0x54>
 8000eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eb0:	edc7 7a01 	vstr	s15, [r7, #4]
	if( Volume < 0) Volume = 0;
 8000eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec0:	d502      	bpl.n	8000ec8 <readVolume+0x3c>
 8000ec2:	f04f 0300 	mov.w	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
	return Volume;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	ee07 3a90 	vmov	s15, r3
}
 8000ece:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	20000078 	.word	0x20000078
 8000ee0:	3a164fd2 	.word	0x3a164fd2

08000ee4 <readVdc>:

float readVdc(void){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <readVdc+0x38>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	80fb      	strh	r3, [r7, #6]
	Vdc = Vdc_ad * AD2VOLTAGE;
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efa:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000f20 <readVdc+0x3c>
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f02:	edc7 7a00 	vstr	s15, [r7]
	return Vdc;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	ee07 3a90 	vmov	s15, r3
}
 8000f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000078 	.word	0x20000078
 8000f20:	3cce8561 	.word	0x3cce8561
 8000f24:	00000000 	.word	0x00000000

08000f28 <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000f32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000f40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f44:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	b292      	uxth	r2, r2
 8000f4e:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000f50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001028 <readCurrent+0x100>
 8000f70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f74:	ee17 0a90 	vmov	r0, s15
 8000f78:	f7ff fbb4 	bl	80006e4 <__aeabi_f2d>
 8000f7c:	a328      	add	r3, pc, #160	; (adr r3, 8001020 <readCurrent+0xf8>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff f921 	bl	80001c8 <__aeabi_dmul>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fc01 	bl	8000794 <__aeabi_d2f>
 8000f92:	4602      	mov	r2, r0
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	601a      	str	r2, [r3, #0]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800102c <readCurrent+0x104>
 8000faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fae:	ee17 0a90 	vmov	r0, s15
 8000fb2:	f7ff fb97 	bl	80006e4 <__aeabi_f2d>
 8000fb6:	a31a      	add	r3, pc, #104	; (adr r3, 8001020 <readCurrent+0xf8>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	f7ff f904 	bl	80001c8 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	1d1c      	adds	r4, r3, #4
 8000fcc:	f7ff fbe2 	bl	8000794 <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	6023      	str	r3, [r4, #0]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001030 <readCurrent+0x108>
 8000fe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fea:	ee17 0a90 	vmov	r0, s15
 8000fee:	f7ff fb79 	bl	80006e4 <__aeabi_f2d>
 8000ff2:	a30b      	add	r3, pc, #44	; (adr r3, 8001020 <readCurrent+0xf8>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff f8e6 	bl	80001c8 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f103 0408 	add.w	r4, r3, #8
 800100a:	f7ff fbc3 	bl	8000794 <__aeabi_d2f>
 800100e:	4603      	mov	r3, r0
 8001010:	6023      	str	r3, [r4, #0]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w
 8001020:	f83914d2 	.word	0xf83914d2
 8001024:	bfd6f74d 	.word	0xbfd6f74d
 8001028:	44f24000 	.word	0x44f24000
 800102c:	44f40000 	.word	0x44f40000
 8001030:	44f30000 	.word	0x44f30000

08001034 <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 800103c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001044:	f003 fd82 	bl	8004b4c <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	701a      	strb	r2, [r3, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	1c5c      	adds	r4, r3, #1
 8001054:	2108      	movs	r1, #8
 8001056:	4809      	ldr	r0, [pc, #36]	; (800107c <readHallSignal+0x48>)
 8001058:	f003 fd78 	bl	8004b4c <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	7023      	strb	r3, [r4, #0]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	1c9c      	adds	r4, r3, #2
 8001064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <readHallSignal+0x48>)
 800106a:	f003 fd6f 	bl	8004b4c <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	7023      	strb	r3, [r4, #0]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	bf00      	nop
 800107c:	48000400 	.word	0x48000400

08001080 <writeOutputMode>:

void writeOutputMode(int8_t* outputMode){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f993 3000 	ldrsb.w	r3, [r3]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d106      	bne.n	80010a0 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001098:	4819      	ldr	r0, [pc, #100]	; (8001100 <writeOutputMode+0x80>)
 800109a:	f003 fd6f 	bl	8004b7c <HAL_GPIO_WritePin>
 800109e:	e005      	b.n	80010ac <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a6:	4816      	ldr	r0, [pc, #88]	; (8001100 <writeOutputMode+0x80>)
 80010a8:	f003 fd68 	bl	8004b7c <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3301      	adds	r3, #1
 80010b0:	f993 3000 	ldrsb.w	r3, [r3]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d106      	bne.n	80010c6 <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010be:	4810      	ldr	r0, [pc, #64]	; (8001100 <writeOutputMode+0x80>)
 80010c0:	f003 fd5c 	bl	8004b7c <HAL_GPIO_WritePin>
 80010c4:	e005      	b.n	80010d2 <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <writeOutputMode+0x80>)
 80010ce:	f003 fd55 	bl	8004b7c <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3302      	adds	r3, #2
 80010d6:	f993 3000 	ldrsb.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d106      	bne.n	80010ec <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <writeOutputMode+0x80>)
 80010e6:	f003 fd49 	bl	8004b7c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 80010ea:	e005      	b.n	80010f8 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <writeOutputMode+0x80>)
 80010f4:	f003 fd42 	bl	8004b7c <HAL_GPIO_WritePin>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	48000800 	.word	0x48000800

08001104 <writeDuty>:

void writeDuty(float* Duty){
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <writeDuty+0x80>)
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <writeDuty+0x80>)
 8001124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001128:	ee17 2a90 	vmov	r2, s15
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3304      	adds	r3, #4
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <writeDuty+0x80>)
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <writeDuty+0x80>)
 8001148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114c:	ee17 2a90 	vmov	r2, s15
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3308      	adds	r3, #8
 8001156:	ed93 7a00 	vldr	s14, [r3]
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <writeDuty+0x80>)
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <writeDuty+0x80>)
 800116c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001170:	ee17 2a90 	vmov	r2, s15
 8001174:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40012c00 	.word	0x40012c00

08001188 <calcElectAngle>:
	outputMode[1] = sOutputMode[1];
	outputMode[2] = sOutputMode[2];

}

void calcElectAngle(uint8_t flgPLL, float* electAngle, float* electAngVelo){
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	73fb      	strb	r3, [r7, #15]
	float Ki_PLL;
	float Ts_PLL;
	float timeInterval;

	// Read Hall Signals
	readHallSignal(gHall);
 8001196:	4896      	ldr	r0, [pc, #600]	; (80013f0 <calcElectAngle+0x268>)
 8001198:	f7ff ff4c 	bl	8001034 <readHallSignal>

	// Hold & Read Input Capture Count
	gInputCaptureCnt_pre = gInputCaptureCnt;
 800119c:	4b95      	ldr	r3, [pc, #596]	; (80013f4 <calcElectAngle+0x26c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a95      	ldr	r2, [pc, #596]	; (80013f8 <calcElectAngle+0x270>)
 80011a2:	6013      	str	r3, [r2, #0]
	gInputCaptureCnt = readInputCaptureCnt();
 80011a4:	f7ff fe1c 	bl	8000de0 <readInputCaptureCnt>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a92      	ldr	r2, [pc, #584]	; (80013f4 <calcElectAngle+0x26c>)
 80011ac:	6013      	str	r3, [r2, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(gInputCaptureCnt != gInputCaptureCnt_pre){
 80011ae:	4b91      	ldr	r3, [pc, #580]	; (80013f4 <calcElectAngle+0x26c>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b91      	ldr	r3, [pc, #580]	; (80013f8 <calcElectAngle+0x270>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d023      	beq.n	8001202 <calcElectAngle+0x7a>
		timeInterval = readTimeInterval(gInputCaptureCnt, gInputCaptureCnt_pre);
 80011ba:	4b8e      	ldr	r3, [pc, #568]	; (80013f4 <calcElectAngle+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a8e      	ldr	r2, [pc, #568]	; (80013f8 <calcElectAngle+0x270>)
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fe19 	bl	8000dfc <readTimeInterval>
 80011ca:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		if( timeInterval > 0.0001f)
 80011ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011d2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80013fc <calcElectAngle+0x274>
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	dd0c      	ble.n	80011fa <calcElectAngle+0x72>
			gElectFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 80011e0:	ed9f 1a87 	vldr	s2, [pc, #540]	; 8001400 <calcElectAngle+0x278>
 80011e4:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80011e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80011ec:	f7ff fb51 	bl	8000892 <gfDivideAvoidZero>
 80011f0:	eef0 7a40 	vmov.f32	s15, s0
 80011f4:	4b83      	ldr	r3, [pc, #524]	; (8001404 <calcElectAngle+0x27c>)
 80011f6:	edc3 7a00 	vstr	s15, [r3]

		sNoInputCaptureCnt = 0;
 80011fa:	4b83      	ldr	r3, [pc, #524]	; (8001408 <calcElectAngle+0x280>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	801a      	strh	r2, [r3, #0]
 8001200:	e00f      	b.n	8001222 <calcElectAngle+0x9a>
	}
	else if(sNoInputCaptureCnt < 2000)
 8001202:	4b81      	ldr	r3, [pc, #516]	; (8001408 <calcElectAngle+0x280>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800120a:	d206      	bcs.n	800121a <calcElectAngle+0x92>
		sNoInputCaptureCnt ++;
 800120c:	4b7e      	ldr	r3, [pc, #504]	; (8001408 <calcElectAngle+0x280>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b7c      	ldr	r3, [pc, #496]	; (8001408 <calcElectAngle+0x280>)
 8001216:	801a      	strh	r2, [r3, #0]
 8001218:	e003      	b.n	8001222 <calcElectAngle+0x9a>
	else
		gElectFreq = 0;
 800121a:	4b7a      	ldr	r3, [pc, #488]	; (8001404 <calcElectAngle+0x27c>)
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	601a      	str	r2, [r3, #0]


	// Calculate PLL Gain based on Electrical Angle Velocity
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 8001222:	4b7a      	ldr	r3, [pc, #488]	; (800140c <calcElectAngle+0x284>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800122c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001230:	edc7 7a08 	vstr	s15, [r7, #32]
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 8001234:	4b75      	ldr	r3, [pc, #468]	; (800140c <calcElectAngle+0x284>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001410 <calcElectAngle+0x288>
 800123e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001242:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001246:	ee27 7a87 	vmul.f32	s14, s15, s14
 800124a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800124e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001252:	edc7 7a07 	vstr	s15, [r7, #28]
	Kp_PLL = wc_PLL;
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	61bb      	str	r3, [r7, #24]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 800125a:	edd7 7a08 	vldr	s15, [r7, #32]
 800125e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001414 <calcElectAngle+0x28c>
 8001262:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001266:	edd7 7a08 	vldr	s15, [r7, #32]
 800126a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	edc7 7a05 	vstr	s15, [r7, #20]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 800127a:	4b67      	ldr	r3, [pc, #412]	; (8001418 <calcElectAngle+0x290>)
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <calcElectAngle+0x294>)
 8001280:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(gHall);
 8001282:	485b      	ldr	r0, [pc, #364]	; (80013f0 <calcElectAngle+0x268>)
 8001284:	f000 f8e0 	bl	8001448 <calcVoltageMode>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b62      	ldr	r3, [pc, #392]	; (8001418 <calcElectAngle+0x290>)
 800128e:	701a      	strb	r2, [r3, #0]


	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 8001290:	4b63      	ldr	r3, [pc, #396]	; (8001420 <calcElectAngle+0x298>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a63      	ldr	r2, [pc, #396]	; (8001424 <calcElectAngle+0x29c>)
 8001296:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 8001298:	4b60      	ldr	r3, [pc, #384]	; (800141c <calcElectAngle+0x294>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4a5e      	ldr	r2, [pc, #376]	; (8001418 <calcElectAngle+0x290>)
 800129e:	7811      	ldrb	r1, [r2, #0]
 80012a0:	4a61      	ldr	r2, [pc, #388]	; (8001428 <calcElectAngle+0x2a0>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f916 	bl	80014d4 <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 80012a8:	4b5b      	ldr	r3, [pc, #364]	; (8001418 <calcElectAngle+0x290>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4a5e      	ldr	r2, [pc, #376]	; (8001428 <calcElectAngle+0x2a0>)
 80012ae:	f992 2000 	ldrsb.w	r2, [r2]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f939 	bl	800152c <calcElectAngleFromVoltageMode>
 80012ba:	eef0 7a40 	vmov.f32	s15, s0
 80012be:	4b58      	ldr	r3, [pc, #352]	; (8001420 <calcElectAngle+0x298>)
 80012c0:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 80012c4:	4b56      	ldr	r3, [pc, #344]	; (8001420 <calcElectAngle+0x298>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	eeb0 0a67 	vmov.f32	s0, s15
 80012ce:	f7ff fb27 	bl	8000920 <gfWrapTheta>
 80012d2:	eef0 7a40 	vmov.f32	s15, s0
 80012d6:	4b52      	ldr	r3, [pc, #328]	; (8001420 <calcElectAngle+0x298>)
 80012d8:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sFlgPLL_pre = sFlgPLL;
 80012dc:	4b53      	ldr	r3, [pc, #332]	; (800142c <calcElectAngle+0x2a4>)
 80012de:	781a      	ldrb	r2, [r3, #0]
 80012e0:	4b53      	ldr	r3, [pc, #332]	; (8001430 <calcElectAngle+0x2a8>)
 80012e2:	701a      	strb	r2, [r3, #0]
	sFlgPLL = flgPLL;
 80012e4:	4a51      	ldr	r2, [pc, #324]	; (800142c <calcElectAngle+0x2a4>)
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	7013      	strb	r3, [r2, #0]

	if(flgPLL == 1){
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d164      	bne.n	80013ba <calcElectAngle+0x232>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sFlgPLL_pre == 0 ){
 80012f0:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <calcElectAngle+0x2a8>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d111      	bne.n	800131c <calcElectAngle+0x194>
			sElectAngVeloEstimate = gElectFreq * TWOPI;
 80012f8:	4b42      	ldr	r3, [pc, #264]	; (8001404 <calcElectAngle+0x27c>)
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001434 <calcElectAngle+0x2ac>
 8001302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001306:	4b41      	ldr	r3, [pc, #260]	; (800140c <calcElectAngle+0x284>)
 8001308:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 800130c:	4b3f      	ldr	r3, [pc, #252]	; (800140c <calcElectAngle+0x284>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a49      	ldr	r2, [pc, #292]	; (8001438 <calcElectAngle+0x2b0>)
 8001312:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 8001314:	4b42      	ldr	r3, [pc, #264]	; (8001420 <calcElectAngle+0x298>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a48      	ldr	r2, [pc, #288]	; (800143c <calcElectAngle+0x2b4>)
 800131a:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 800131c:	4b3b      	ldr	r3, [pc, #236]	; (800140c <calcElectAngle+0x284>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001440 <calcElectAngle+0x2b8>
 8001326:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800132a:	4b44      	ldr	r3, [pc, #272]	; (800143c <calcElectAngle+0x2b4>)
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001334:	4b41      	ldr	r3, [pc, #260]	; (800143c <calcElectAngle+0x2b4>)
 8001336:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 800133a:	4b40      	ldr	r3, [pc, #256]	; (800143c <calcElectAngle+0x2b4>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	eeb0 0a67 	vmov.f32	s0, s15
 8001344:	f7ff faec 	bl	8000920 <gfWrapTheta>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <calcElectAngle+0x2b4>)
 800134e:	edc3 7a00 	vstr	s15, [r3]

		if( sElectAngleActual != sElectAngleActual_pre){
 8001352:	4b33      	ldr	r3, [pc, #204]	; (8001420 <calcElectAngle+0x298>)
 8001354:	ed93 7a00 	vldr	s14, [r3]
 8001358:	4b32      	ldr	r3, [pc, #200]	; (8001424 <calcElectAngle+0x29c>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	d036      	beq.n	80013d6 <calcElectAngle+0x24e>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <calcElectAngle+0x298>)
 800136a:	ed93 7a00 	vldr	s14, [r3]
 800136e:	4b33      	ldr	r3, [pc, #204]	; (800143c <calcElectAngle+0x2b4>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <calcElectAngle+0x2bc>)
 800137a:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <calcElectAngle+0x2bc>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	f7ff faca 	bl	8000920 <gfWrapTheta>
 800138c:	eef0 7a40 	vmov.f32	s15, s0
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <calcElectAngle+0x2bc>)
 8001392:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001396:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <calcElectAngle+0x2bc>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	4826      	ldr	r0, [pc, #152]	; (8001438 <calcElectAngle+0x2b0>)
 800139e:	ed97 1a05 	vldr	s2, [r7, #20]
 80013a2:	edd7 0a06 	vldr	s1, [r7, #24]
 80013a6:	eeb0 0a67 	vmov.f32	s0, s15
 80013aa:	f7ff fa43 	bl	8000834 <cfPhaseLockedLoop>
 80013ae:	eef0 7a40 	vmov.f32	s15, s0
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <calcElectAngle+0x284>)
 80013b4:	edc3 7a00 	vstr	s15, [r3]
 80013b8:	e00d      	b.n	80013d6 <calcElectAngle+0x24e>
		}
	}
	else{
		sElectAngleEstimate = sElectAngleActual;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <calcElectAngle+0x298>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1f      	ldr	r2, [pc, #124]	; (800143c <calcElectAngle+0x2b4>)
 80013c0:	6013      	str	r3, [r2, #0]
		sElectAngVeloEstimate = gElectFreq * TWOPI;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <calcElectAngle+0x27c>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001434 <calcElectAngle+0x2ac>
 80013cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <calcElectAngle+0x284>)
 80013d2:	edc3 7a00 	vstr	s15, [r3]
	}

	*electAngle = sElectAngleEstimate;
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <calcElectAngle+0x2b4>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	601a      	str	r2, [r3, #0]
	*electAngVelo = sElectAngVeloEstimate;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <calcElectAngle+0x284>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	601a      	str	r2, [r3, #0]


}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000007c 	.word	0x2000007c
 80013f4:	20000080 	.word	0x20000080
 80013f8:	20000084 	.word	0x20000084
 80013fc:	38d1b717 	.word	0x38d1b717
 8001400:	326e9bfb 	.word	0x326e9bfb
 8001404:	20000088 	.word	0x20000088
 8001408:	200000d2 	.word	0x200000d2
 800140c:	200000e8 	.word	0x200000e8
 8001410:	3e22f983 	.word	0x3e22f983
 8001414:	3e4ccccd 	.word	0x3e4ccccd
 8001418:	200000d0 	.word	0x200000d0
 800141c:	200000d1 	.word	0x200000d1
 8001420:	200000d8 	.word	0x200000d8
 8001424:	200000dc 	.word	0x200000dc
 8001428:	200000d4 	.word	0x200000d4
 800142c:	200000d5 	.word	0x200000d5
 8001430:	200000d6 	.word	0x200000d6
 8001434:	40c90fdb 	.word	0x40c90fdb
 8001438:	200000e4 	.word	0x200000e4
 800143c:	200000e0 	.word	0x200000e0
 8001440:	45dac000 	.word	0x45dac000
 8001444:	200000ec 	.word	0x200000ec

08001448 <calcVoltageMode>:
else
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

static uint8_t calcVoltageMode(uint8_t* Hall){
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	uint8_t hallInput;
	uint8_t voltageMode = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3302      	adds	r3, #2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	b2da      	uxtb	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3301      	adds	r3, #1
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b2da      	uxtb	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4413      	add	r3, r2
 8001472:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	3b01      	subs	r3, #1
 8001478:	2b05      	cmp	r3, #5
 800147a:	d821      	bhi.n	80014c0 <calcVoltageMode+0x78>
 800147c:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <calcVoltageMode+0x3c>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	080014bb 	.word	0x080014bb
 8001488:	080014a3 	.word	0x080014a3
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014af 	.word	0x080014af
 8001494:	080014b5 	.word	0x080014b5
 8001498:	080014a9 	.word	0x080014a9
	  case 3:
		voltageMode = 3;
 800149c:	2303      	movs	r3, #3
 800149e:	73fb      	strb	r3, [r7, #15]
		break;
 80014a0:	e011      	b.n	80014c6 <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 80014a2:	2304      	movs	r3, #4
 80014a4:	73fb      	strb	r3, [r7, #15]
		break;
 80014a6:	e00e      	b.n	80014c6 <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 80014a8:	2305      	movs	r3, #5
 80014aa:	73fb      	strb	r3, [r7, #15]
		break;
 80014ac:	e00b      	b.n	80014c6 <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 80014ae:	2306      	movs	r3, #6
 80014b0:	73fb      	strb	r3, [r7, #15]
		break;
 80014b2:	e008      	b.n	80014c6 <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
		break;
 80014b8:	e005      	b.n	80014c6 <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	73fb      	strb	r3, [r7, #15]
		break;
 80014be:	e002      	b.n	80014c6 <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
	  break;
 80014c4:	bf00      	nop
	}
	return voltageMode;
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <calcRotDirFromVoltageMode>:
static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	603a      	str	r2, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	460b      	mov	r3, r1
 80014e2:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 80014e4:	79ba      	ldrb	r2, [r7, #6]
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	dd04      	ble.n	8001500 <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	3b06      	subs	r3, #6
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e008      	b.n	8001512 <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 8001500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	da03      	bge.n	8001512 <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	3306      	adds	r3, #6
 800150e:	b2db      	uxtb	r3, r3
 8001510:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	701a      	strb	r2, [r3, #0]

}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	460a      	mov	r2, r1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	4613      	mov	r3, r2
 800153a:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	3b01      	subs	r3, #1
 8001540:	2b05      	cmp	r3, #5
 8001542:	d822      	bhi.n	800158a <calcElectAngleFromVoltageMode+0x5e>
 8001544:	a201      	add	r2, pc, #4	; (adr r2, 800154c <calcElectAngleFromVoltageMode+0x20>)
 8001546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154a:	bf00      	nop
 800154c:	0800157f 	.word	0x0800157f
 8001550:	08001585 	.word	0x08001585
 8001554:	08001565 	.word	0x08001565
 8001558:	0800156d 	.word	0x0800156d
 800155c:	08001573 	.word	0x08001573
 8001560:	08001579 	.word	0x08001579
		  case 3:
			  electAngle_Center = 0.0f;
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
			break;
 800156a:	e012      	b.n	8001592 <calcElectAngleFromVoltageMode+0x66>
		  case 4:
			  electAngle_Center = PIDIV3;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <calcElectAngleFromVoltageMode+0x9c>)
 800156e:	60fb      	str	r3, [r7, #12]
			break;
 8001570:	e00f      	b.n	8001592 <calcElectAngleFromVoltageMode+0x66>
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <calcElectAngleFromVoltageMode+0xa0>)
 8001574:	60fb      	str	r3, [r7, #12]
			break;
 8001576:	e00c      	b.n	8001592 <calcElectAngleFromVoltageMode+0x66>
		  case 6:
			  electAngle_Center = PI;
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <calcElectAngleFromVoltageMode+0xa4>)
 800157a:	60fb      	str	r3, [r7, #12]
			break;
 800157c:	e009      	b.n	8001592 <calcElectAngleFromVoltageMode+0x66>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <calcElectAngleFromVoltageMode+0xa8>)
 8001580:	60fb      	str	r3, [r7, #12]
			break;
 8001582:	e006      	b.n	8001592 <calcElectAngleFromVoltageMode+0x66>
		  case 2:
			  electAngle_Center = -PIDIV3;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <calcElectAngleFromVoltageMode+0xac>)
 8001586:	60fb      	str	r3, [r7, #12]
			break;
 8001588:	e003      	b.n	8001592 <calcElectAngleFromVoltageMode+0x66>
		  default :
			  electAngle_Center = 0.0f;
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
		  break;
 8001590:	bf00      	nop
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8001592:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015dc <calcElectAngleFromVoltageMode+0xb0>
 80015a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80015aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ae:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	ee07 3a90 	vmov	s15, r3
}
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	3f860a92 	.word	0x3f860a92
 80015cc:	40060a92 	.word	0x40060a92
 80015d0:	40490fdb 	.word	0x40490fdb
 80015d4:	c0060a92 	.word	0xc0060a92
 80015d8:	bf860a92 	.word	0xbf860a92
 80015dc:	3f060a92 	.word	0x3f060a92

080015e0 <VectorControlTasks>:
static inline float calcAmpFromVect(float* Vect);
static inline float calcModFromVamp(float Vamp, float twoDivVdc);
static inline void Vuvw2Duty(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(float *Igd_ref, float *Igd, float electAngVelo, float Vdc, float *Vgd, float* Vamp);

void VectorControlTasks(float *Idq_ref, float theta, float electAngVelo, float *Iuvw, float Vdc, float twoDivVdc, uint8_t flgFB, float* Duty, int8_t* outputMode){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	61f8      	str	r0, [r7, #28]
 80015e8:	ed87 0a06 	vstr	s0, [r7, #24]
 80015ec:	edc7 0a05 	vstr	s1, [r7, #20]
 80015f0:	6139      	str	r1, [r7, #16]
 80015f2:	ed87 1a03 	vstr	s2, [r7, #12]
 80015f6:	edc7 1a02 	vstr	s3, [r7, #8]
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	4613      	mov	r3, r2
 80015fe:	71fb      	strb	r3, [r7, #7]
	float Vq_ref_open;
	if ( flgFB == 0 ){
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d13a      	bne.n	800167c <VectorControlTasks+0x9c>
		Vq_ref_open = Idq_ref[1] * 3.0 * Ra;//Vdc * SQRT3DIV2_DIV2 * gVolume;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f869 	bl	80006e4 <__aeabi_f2d>
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b86      	ldr	r3, [pc, #536]	; (8001830 <VectorControlTasks+0x250>)
 8001618:	f7fe fdd6 	bl	80001c8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	a380      	add	r3, pc, #512	; (adr r3, 8001828 <VectorControlTasks+0x248>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7fe fdcd 	bl	80001c8 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff f8ad 	bl	8000794 <__aeabi_d2f>
 800163a:	4603      	mov	r3, r0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
			OpenLoopTasks(Vq_ref_open, theta, Iuvw, twoDivVdc, Duty, outputMode);
 800163e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	ed97 1a02 	vldr	s2, [r7, #8]
 8001646:	6938      	ldr	r0, [r7, #16]
 8001648:	edd7 0a06 	vldr	s1, [r7, #24]
 800164c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001650:	f000 f91c 	bl	800188c <OpenLoopTasks>
			sVdq[0] = 0.0f;
 8001654:	4b77      	ldr	r3, [pc, #476]	; (8001834 <VectorControlTasks+0x254>)
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
			sVdq[1] = Vq_ref_open;
 800165c:	4a75      	ldr	r2, [pc, #468]	; (8001834 <VectorControlTasks+0x254>)
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	6053      	str	r3, [r2, #4]
			sVdq_i[0] = 0.0f;
 8001662:	4b75      	ldr	r3, [pc, #468]	; (8001838 <VectorControlTasks+0x258>)
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
			sVdq_i[1] = 0.0f;
 800166a:	4b73      	ldr	r3, [pc, #460]	; (8001838 <VectorControlTasks+0x258>)
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
			sIq_ref_LPF = sIq_LPF;
 8001672:	4b72      	ldr	r3, [pc, #456]	; (800183c <VectorControlTasks+0x25c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a72      	ldr	r2, [pc, #456]	; (8001840 <VectorControlTasks+0x260>)
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e0c5      	b.n	8001808 <VectorControlTasks+0x228>
		}
	else{

		outputMode[0] = OUTPUTMODE_POSITIVE;
 800167c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
		outputMode[1] = OUTPUTMODE_POSITIVE;
 8001682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001684:	3301      	adds	r3, #1
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
		outputMode[2] = OUTPUTMODE_POSITIVE;
 800168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168c:	3302      	adds	r3, #2
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]


		uvw2ab(gIuvw, sIab);
 8001692:	496c      	ldr	r1, [pc, #432]	; (8001844 <VectorControlTasks+0x264>)
 8001694:	486c      	ldr	r0, [pc, #432]	; (8001848 <VectorControlTasks+0x268>)
 8001696:	f000 f959 	bl	800194c <uvw2ab>
		ab2dq(theta, sIab, sIdq);
 800169a:	496c      	ldr	r1, [pc, #432]	; (800184c <VectorControlTasks+0x26c>)
 800169c:	4869      	ldr	r0, [pc, #420]	; (8001844 <VectorControlTasks+0x264>)
 800169e:	ed97 0a06 	vldr	s0, [r7, #24]
 80016a2:	f000 f9dd 	bl	8001a60 <ab2dq>

		gLPF(Idq_ref[1], 62.8f, CARRIERCYCLE, &sIq_ref_LPF);
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	4864      	ldr	r0, [pc, #400]	; (8001840 <VectorControlTasks+0x260>)
 80016b0:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8001850 <VectorControlTasks+0x270>
 80016b4:	eddf 0a67 	vldr	s1, [pc, #412]	; 8001854 <VectorControlTasks+0x274>
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	f7ff f9bb 	bl	8000a36 <gLPF>
		Idq_ref[1] = sIq_ref_LPF; // zanteisyori
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	3304      	adds	r3, #4
 80016c4:	4a5e      	ldr	r2, [pc, #376]	; (8001840 <VectorControlTasks+0x260>)
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	601a      	str	r2, [r3, #0]
		CurrentFbControl(Idq_ref, sIdq, electAngVelo, Vdc, sVdq, &sVamp);
 80016ca:	4b63      	ldr	r3, [pc, #396]	; (8001858 <VectorControlTasks+0x278>)
 80016cc:	4a59      	ldr	r2, [pc, #356]	; (8001834 <VectorControlTasks+0x254>)
 80016ce:	edd7 0a03 	vldr	s1, [r7, #12]
 80016d2:	ed97 0a05 	vldr	s0, [r7, #20]
 80016d6:	495d      	ldr	r1, [pc, #372]	; (800184c <VectorControlTasks+0x26c>)
 80016d8:	69f8      	ldr	r0, [r7, #28]
 80016da:	f000 fb1f 	bl	8001d1c <CurrentFbControl>
		sMod = calcModFromVamp(sVamp, gTwoDivVdc);
 80016de:	4b5e      	ldr	r3, [pc, #376]	; (8001858 <VectorControlTasks+0x278>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <VectorControlTasks+0x27c>)
 80016e6:	ed93 7a00 	vldr	s14, [r3]
 80016ea:	eef0 0a47 	vmov.f32	s1, s14
 80016ee:	eeb0 0a67 	vmov.f32	s0, s15
 80016f2:	f000 fa1f 	bl	8001b34 <calcModFromVamp>
 80016f6:	eef0 7a40 	vmov.f32	s15, s0
 80016fa:	4b59      	ldr	r3, [pc, #356]	; (8001860 <VectorControlTasks+0x280>)
 80016fc:	edc3 7a00 	vstr	s15, [r3]

		sEdq[0] = sVdq[0] - Ra * sIdq[0] + La * electAngVelo * sIdq[1];
 8001700:	4b4c      	ldr	r3, [pc, #304]	; (8001834 <VectorControlTasks+0x254>)
 8001702:	ed93 7a00 	vldr	s14, [r3]
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <VectorControlTasks+0x26c>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001864 <VectorControlTasks+0x284>
 8001710:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001714:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001718:	edd7 7a05 	vldr	s15, [r7, #20]
 800171c:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001868 <VectorControlTasks+0x288>
 8001720:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001724:	4b49      	ldr	r3, [pc, #292]	; (800184c <VectorControlTasks+0x26c>)
 8001726:	edd3 7a01 	vldr	s15, [r3, #4]
 800172a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001732:	4b4e      	ldr	r3, [pc, #312]	; (800186c <VectorControlTasks+0x28c>)
 8001734:	edc3 7a00 	vstr	s15, [r3]
		sEdq[1] = sVdq[1] - Ra * sIdq[1] - La * electAngVelo * sIdq[0];
 8001738:	4b3e      	ldr	r3, [pc, #248]	; (8001834 <VectorControlTasks+0x254>)
 800173a:	ed93 7a01 	vldr	s14, [r3, #4]
 800173e:	4b43      	ldr	r3, [pc, #268]	; (800184c <VectorControlTasks+0x26c>)
 8001740:	edd3 7a01 	vldr	s15, [r3, #4]
 8001744:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001864 <VectorControlTasks+0x284>
 8001748:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800174c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001750:	edd7 7a05 	vldr	s15, [r7, #20]
 8001754:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001868 <VectorControlTasks+0x288>
 8001758:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800175c:	4b3b      	ldr	r3, [pc, #236]	; (800184c <VectorControlTasks+0x26c>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176a:	4b40      	ldr	r3, [pc, #256]	; (800186c <VectorControlTasks+0x28c>)
 800176c:	edc3 7a01 	vstr	s15, [r3, #4]
		sAngleErr = atan2f(-1.0f * sEdq[0], sEdq[1]);
 8001770:	4b3e      	ldr	r3, [pc, #248]	; (800186c <VectorControlTasks+0x28c>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eef1 7a67 	vneg.f32	s15, s15
 800177a:	4b3c      	ldr	r3, [pc, #240]	; (800186c <VectorControlTasks+0x28c>)
 800177c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001780:	eef0 0a47 	vmov.f32	s1, s14
 8001784:	eeb0 0a67 	vmov.f32	s0, s15
 8001788:	f006 fcac 	bl	80080e4 <atan2f>
 800178c:	eef0 7a40 	vmov.f32	s15, s0
 8001790:	4b37      	ldr	r3, [pc, #220]	; (8001870 <VectorControlTasks+0x290>)
 8001792:	edc3 7a00 	vstr	s15, [r3]

		dq2ab(theta, sVdq, sVab);
 8001796:	4937      	ldr	r1, [pc, #220]	; (8001874 <VectorControlTasks+0x294>)
 8001798:	4826      	ldr	r0, [pc, #152]	; (8001834 <VectorControlTasks+0x254>)
 800179a:	ed97 0a06 	vldr	s0, [r7, #24]
 800179e:	f000 f9e9 	bl	8001b74 <dq2ab>
		ab2uvw(sVab, sVuvw);
 80017a2:	4935      	ldr	r1, [pc, #212]	; (8001878 <VectorControlTasks+0x298>)
 80017a4:	4833      	ldr	r0, [pc, #204]	; (8001874 <VectorControlTasks+0x294>)
 80017a6:	f000 f919 	bl	80019dc <ab2uvw>
		Vuvw2Duty(twoDivVdc, sVuvw, Duty);
 80017aa:	6839      	ldr	r1, [r7, #0]
 80017ac:	4832      	ldr	r0, [pc, #200]	; (8001878 <VectorControlTasks+0x298>)
 80017ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80017b2:	f000 fa1f 	bl	8001bf4 <Vuvw2Duty>

		sIdq_ref_1000[0] = Idq_ref[0] * 1000.0f;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800187c <VectorControlTasks+0x29c>
 80017c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c4:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <VectorControlTasks+0x2a0>)
 80017c6:	edc3 7a00 	vstr	s15, [r3]
		sIdq_ref_1000[1] = Idq_ref[1] * 1000.0f;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800187c <VectorControlTasks+0x29c>
 80017d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017da:	4b29      	ldr	r3, [pc, #164]	; (8001880 <VectorControlTasks+0x2a0>)
 80017dc:	edc3 7a01 	vstr	s15, [r3, #4]
		sIdq_1000[0] = sIdq[0] * 1000.0f;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <VectorControlTasks+0x26c>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800187c <VectorControlTasks+0x29c>
 80017ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <VectorControlTasks+0x2a4>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]
		sIdq_1000[1] = sIdq[1] * 1000.0f;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <VectorControlTasks+0x26c>)
 80017f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80017fa:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800187c <VectorControlTasks+0x29c>
 80017fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <VectorControlTasks+0x2a4>)
 8001804:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	gLPF(sIdq[1], 125.6f, CARRIERCYCLE, &sIq_LPF);
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <VectorControlTasks+0x26c>)
 800180a:	edd3 7a01 	vldr	s15, [r3, #4]
 800180e:	480b      	ldr	r0, [pc, #44]	; (800183c <VectorControlTasks+0x25c>)
 8001810:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8001850 <VectorControlTasks+0x270>
 8001814:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001888 <VectorControlTasks+0x2a8>
 8001818:	eeb0 0a67 	vmov.f32	s0, s15
 800181c:	f7ff f90b 	bl	8000a36 <gLPF>

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	60000000 	.word	0x60000000
 800182c:	3f9ba5e3 	.word	0x3f9ba5e3
 8001830:	40080000 	.word	0x40080000
 8001834:	20000118 	.word	0x20000118
 8001838:	20000120 	.word	0x20000120
 800183c:	20000100 	.word	0x20000100
 8001840:	20000104 	.word	0x20000104
 8001844:	200000f0 	.word	0x200000f0
 8001848:	200000a0 	.word	0x200000a0
 800184c:	200000f8 	.word	0x200000f8
 8001850:	3915cbec 	.word	0x3915cbec
 8001854:	427b3333 	.word	0x427b3333
 8001858:	2000013c 	.word	0x2000013c
 800185c:	20000098 	.word	0x20000098
 8001860:	20000140 	.word	0x20000140
 8001864:	3cdd2f1b 	.word	0x3cdd2f1b
 8001868:	3812ccf7 	.word	0x3812ccf7
 800186c:	20000144 	.word	0x20000144
 8001870:	2000014c 	.word	0x2000014c
 8001874:	20000128 	.word	0x20000128
 8001878:	20000130 	.word	0x20000130
 800187c:	447a0000 	.word	0x447a0000
 8001880:	20000108 	.word	0x20000108
 8001884:	20000110 	.word	0x20000110
 8001888:	42fb3333 	.word	0x42fb3333

0800188c <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, float theta, float *Iuvw, float twoDivVdc, float* Duty, int8_t* outputMode){
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	ed87 0a05 	vstr	s0, [r7, #20]
 8001896:	edc7 0a04 	vstr	s1, [r7, #16]
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	ed87 1a02 	vstr	s2, [r7, #8]
 80018a0:	6079      	str	r1, [r7, #4]
 80018a2:	603a      	str	r2, [r7, #0]
	outputMode[0] = OUTPUTMODE_POSITIVE;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	3302      	adds	r3, #2
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]

	uvw2ab(gIuvw, sIab);
 80018ba:	491c      	ldr	r1, [pc, #112]	; (800192c <OpenLoopTasks+0xa0>)
 80018bc:	481c      	ldr	r0, [pc, #112]	; (8001930 <OpenLoopTasks+0xa4>)
 80018be:	f000 f845 	bl	800194c <uvw2ab>
	ab2dq(theta, sIab, sIdq);
 80018c2:	491c      	ldr	r1, [pc, #112]	; (8001934 <OpenLoopTasks+0xa8>)
 80018c4:	4819      	ldr	r0, [pc, #100]	; (800192c <OpenLoopTasks+0xa0>)
 80018c6:	ed97 0a04 	vldr	s0, [r7, #16]
 80018ca:	f000 f8c9 	bl	8001a60 <ab2dq>
	sVdq[0] = 0.0f;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <OpenLoopTasks+0xac>)
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
	sVdq[1] = VamRef;
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <OpenLoopTasks+0xac>)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	6053      	str	r3, [r2, #4]
	dq2ab(theta, sVdq, sVab);
 80018dc:	4917      	ldr	r1, [pc, #92]	; (800193c <OpenLoopTasks+0xb0>)
 80018de:	4816      	ldr	r0, [pc, #88]	; (8001938 <OpenLoopTasks+0xac>)
 80018e0:	ed97 0a04 	vldr	s0, [r7, #16]
 80018e4:	f000 f946 	bl	8001b74 <dq2ab>
	ab2uvw(sVab, sVuvw);
 80018e8:	4915      	ldr	r1, [pc, #84]	; (8001940 <OpenLoopTasks+0xb4>)
 80018ea:	4814      	ldr	r0, [pc, #80]	; (800193c <OpenLoopTasks+0xb0>)
 80018ec:	f000 f876 	bl	80019dc <ab2uvw>
	Vuvw2Duty(twoDivVdc, sVuvw, Duty);
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4813      	ldr	r0, [pc, #76]	; (8001940 <OpenLoopTasks+0xb4>)
 80018f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80018f8:	f000 f97c 	bl	8001bf4 <Vuvw2Duty>

	sIdq_1000[0] = sIdq[0] * 1000.0f;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <OpenLoopTasks+0xa8>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001944 <OpenLoopTasks+0xb8>
 8001906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <OpenLoopTasks+0xbc>)
 800190c:	edc3 7a00 	vstr	s15, [r3]
	sIdq_1000[1] = sIdq[1] * 1000.0f;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <OpenLoopTasks+0xa8>)
 8001912:	edd3 7a01 	vldr	s15, [r3, #4]
 8001916:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001944 <OpenLoopTasks+0xb8>
 800191a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <OpenLoopTasks+0xbc>)
 8001920:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200000f0 	.word	0x200000f0
 8001930:	200000a0 	.word	0x200000a0
 8001934:	200000f8 	.word	0x200000f8
 8001938:	20000118 	.word	0x20000118
 800193c:	20000128 	.word	0x20000128
 8001940:	20000130 	.word	0x20000130
 8001944:	447a0000 	.word	0x447a0000
 8001948:	20000110 	.word	0x20000110

0800194c <uvw2ab>:

static void uvw2ab(float* uvw, float* ab){
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	ed93 7a00 	vldr	s14, [r3]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3304      	adds	r3, #4
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001968:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800196c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3308      	adds	r3, #8
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800197c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001984:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80019d4 <uvw2ab+0x88>
 8001988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3304      	adds	r3, #4
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80019d8 <uvw2ab+0x8c>
 800199e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3308      	adds	r3, #8
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80019d8 <uvw2ab+0x8c>
 80019ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3304      	adds	r3, #4
 80019ba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80019d4 <uvw2ab+0x88>
 80019be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c2:	edc3 7a00 	vstr	s15, [r3]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	3f5105ec 	.word	0x3f5105ec
 80019d8:	3f5db3d7 	.word	0x3f5db3d7

080019dc <ab2uvw>:

static void ab2uvw(float* ab, float* uvw){
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001a58 <ab2uvw+0x7c>
 80019f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001a04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001a5c <ab2uvw+0x80>
 8001a14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001a58 <ab2uvw+0x7c>
 8001a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a28:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	eeb1 7a67 	vneg.f32	s14, s15
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	3308      	adds	r3, #8
 8001a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a46:	edc3 7a00 	vstr	s15, [r3]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	3f5105ec 	.word	0x3f5105ec
 8001a5c:	3f5db3d7 	.word	0x3f5db3d7

08001a60 <ab2dq>:

static void ab2dq(float theta, float* ab, float* dq){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a6a:	60b8      	str	r0, [r7, #8]
 8001a6c:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001a6e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a72:	f006 fbbb 	bl	80081ec <sinf>
 8001a76:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001a7a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a7e:	f006 fb71 	bl	8008164 <cosf>
 8001a82:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	ed93 7a00 	vldr	s14, [r3]
 8001a8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3304      	adds	r3, #4
 8001a98:	edd3 6a00 	vldr	s13, [r3]
 8001a9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	eeb1 7a67 	vneg.f32	s14, s15
 8001ab8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	edd3 6a00 	vldr	s13, [r3]
 8001ac8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad8:	edc3 7a00 	vstr	s15, [r3]
}
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <calcAmpFromVect>:

static float calcAmpFromVect(float* Vect){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	float amp;
	float amp2;

	amp2 = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	ed93 7a00 	vldr	s14, [r3]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3304      	adds	r3, #4
 8001b00:	edd3 6a00 	vldr	s13, [r3]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3304      	adds	r3, #4
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b14:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(amp2);
 8001b18:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b1c:	f006 fb04 	bl	8008128 <sqrtf>
 8001b20:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	ee07 3a90 	vmov	s15, r3
}
 8001b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <calcModFromVamp>:

static float calcModFromVamp(float Vamp, float twoDivVdc){
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b3e:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001b42:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b46:	edd7 7a00 	vldr	s15, [r7]
 8001b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001b70 <calcModFromVamp+0x3c>
 8001b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b56:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	ee07 3a90 	vmov	s15, r3
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	3f5105ec 	.word	0x3f5105ec

08001b74 <dq2ab>:

static void dq2ab(float theta, float* dq, float* ab){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b7e:	60b8      	str	r0, [r7, #8]
 8001b80:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001b82:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b86:	f006 fb31 	bl	80081ec <sinf>
 8001b8a:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001b8e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b92:	f006 fae7 	bl	8008164 <cosf>
 8001b96:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	ed93 7a00 	vldr	s14, [r3]
 8001ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	3304      	adds	r3, #4
 8001bac:	edd3 6a00 	vldr	s13, [r3]
 8001bb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	ed93 7a00 	vldr	s14, [r3]
 8001bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	edd3 6a00 	vldr	s13, [r3]
 8001bd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3304      	adds	r3, #4
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	edc3 7a00 	vstr	s15, [r3]
}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <Vuvw2Duty>:

static void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	ed87 0a03 	vstr	s0, [r7, #12]
 8001bfe:	60b8      	str	r0, [r7, #8]
 8001c00:	6079      	str	r1, [r7, #4]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	ed93 7a00 	vldr	s14, [r3]
 8001c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2a:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = -Duty[0] - Duty[1];
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	eeb1 7a67 	vneg.f32	s14, s15
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3308      	adds	r3, #8
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c56:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5e:	f7fe fe9d 	bl	800099c <gUpperLowerLimit>
 8001c62:	eef0 7a40 	vmov.f32	s15, s0
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	1d1c      	adds	r4, r3, #4
 8001c78:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c7c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c80:	eeb0 0a67 	vmov.f32	s0, s15
 8001c84:	f7fe fe8a 	bl	800099c <gUpperLowerLimit>
 8001c88:	eef0 7a40 	vmov.f32	s15, s0
 8001c8c:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3308      	adds	r3, #8
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f103 0408 	add.w	r4, r3, #8
 8001c9e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001ca2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8001caa:	f7fe fe77 	bl	800099c <gUpperLowerLimit>
 8001cae:	eef0 7a40 	vmov.f32	s15, s0
 8001cb2:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cee:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3308      	adds	r3, #8
 8001d06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d0e:	edc3 7a00 	vstr	s15, [r3]

}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
	...

08001d1c <CurrentFbControl>:



static void CurrentFbControl(float* Igd_ref, float* Igd, float electAngVelo, float Vdc, float* Vgd, float* Vamp){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	; 0x38
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6178      	str	r0, [r7, #20]
 8001d24:	6139      	str	r1, [r7, #16]
 8001d26:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
	float Kid;
	float VampLimit;
	float Vphase;
	float wc;

	wc = 10.0f * TWOPI;
 8001d32:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <CurrentFbControl+0x1ac>)
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34

	Kp = La * wc;
 8001d36:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d3a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001ecc <CurrentFbControl+0x1b0>
 8001d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d42:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	Kig = Ra * wc * CARRIERCYCLE;
 8001d46:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d4a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001ed0 <CurrentFbControl+0x1b4>
 8001d4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d52:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001ed4 <CurrentFbControl+0x1b8>
 8001d56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	Kid = Kig;
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28

	Ierr[0] = Igd_ref[0] - Igd[0];
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	ed93 7a00 	vldr	s14, [r3]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d72:	edc7 7a06 	vstr	s15, [r7, #24]
	Ierr[1] = Igd_ref[1] - Igd[1];
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	ed93 7a00 	vldr	s14, [r3]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	3304      	adds	r3, #4
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8a:	edc7 7a07 	vstr	s15, [r7, #28]

	sVdq_i[0] += Kig * Ierr[0];
 8001d8e:	4b52      	ldr	r3, [pc, #328]	; (8001ed8 <CurrentFbControl+0x1bc>)
 8001d90:	ed93 7a00 	vldr	s14, [r3]
 8001d94:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d98:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da4:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <CurrentFbControl+0x1bc>)
 8001da6:	edc3 7a00 	vstr	s15, [r3]
	sVdq_i[1] += Kid * Ierr[1];
 8001daa:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <CurrentFbControl+0x1bc>)
 8001dac:	ed93 7a01 	vldr	s14, [r3, #4]
 8001db0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001db4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc0:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <CurrentFbControl+0x1bc>)
 8001dc2:	edc3 7a01 	vstr	s15, [r3, #4]

	Vgd[0] = Kp * Ierr[0] + sVdq_i[0];
 8001dc6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001dca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd2:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <CurrentFbControl+0x1bc>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	edc3 7a00 	vstr	s15, [r3]
	Vgd[1] = Ke * electAngVelo + Kp * Ierr[1] + sVdq_i[1];// + Vgd[1] + Kid * Ierr[1] + ;
 8001de2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001de6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001edc <CurrentFbControl+0x1c0>
 8001dea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8001df2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfe:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <CurrentFbControl+0x1bc>)
 8001e00:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0c:	edc3 7a00 	vstr	s15, [r3]

	Vphase = atan2f(Vgd[1], Vgd[0]);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3304      	adds	r3, #4
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	eef0 0a47 	vmov.f32	s1, s14
 8001e22:	eeb0 0a67 	vmov.f32	s0, s15
 8001e26:	f006 f95d 	bl	80080e4 <atan2f>
 8001e2a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	*Vamp = calcAmpFromVect(Vgd);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fe58 	bl	8001ae4 <calcAmpFromVect>
 8001e34:	eef0 7a40 	vmov.f32	s15, s0
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	edc3 7a00 	vstr	s15, [r3]

	VampLimit = Vdc * SQRT3DIV2_DIV2;
 8001e3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e42:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001ee0 <CurrentFbControl+0x1c4>
 8001e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4a:	edc7 7a08 	vstr	s15, [r7, #32]
	if( *Vamp > VampLimit ){
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	d400      	bmi.n	8001e64 <CurrentFbControl+0x148>
		sVdq_i[0] = Vgd[0];
		Vgd[1] = VampLimit * sinf(Vphase);
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;

	}
}
 8001e62:	e02d      	b.n	8001ec0 <CurrentFbControl+0x1a4>
		Vgd[0] = VampLimit * cosf(Vphase);
 8001e64:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001e68:	f006 f97c 	bl	8008164 <cosf>
 8001e6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e70:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
		sVdq_i[0] = Vgd[0];
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <CurrentFbControl+0x1bc>)
 8001e84:	6013      	str	r3, [r2, #0]
		Vgd[1] = VampLimit * sinf(Vphase);
 8001e86:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001e8a:	f006 f9af 	bl	80081ec <sinf>
 8001e8e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3304      	adds	r3, #4
 8001e96:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	edc3 7a00 	vstr	s15, [r3]
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	ed93 7a00 	vldr	s14, [r3]
 8001eaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eae:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001edc <CurrentFbControl+0x1c0>
 8001eb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <CurrentFbControl+0x1bc>)
 8001ebc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001ec0:	bf00      	nop
 8001ec2:	3738      	adds	r7, #56	; 0x38
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	427b53d2 	.word	0x427b53d2
 8001ecc:	3812ccf7 	.word	0x3812ccf7
 8001ed0:	3cdd2f1b 	.word	0x3cdd2f1b
 8001ed4:	45dac000 	.word	0x45dac000
 8001ed8:	20000120 	.word	0x20000120
 8001edc:	3c195aaf 	.word	0x3c195aaf
 8001ee0:	3f1cc471 	.word	0x3f1cc471

08001ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee8:	f000 fe22 	bl	8002b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eec:	f000 f862 	bl	8001fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef0:	f000 fada 	bl	80024a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ef4:	f000 faba 	bl	800246c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ef8:	f000 fa88 	bl	800240c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001efc:	f000 f8b4 	bl	8002068 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001f00:	f000 f964 	bl	80021cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f04:	f000 fa18 	bl	8002338 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001f08:	4824      	ldr	r0, [pc, #144]	; (8001f9c <main+0xb8>)
 8001f0a:	f004 fa6f 	bl	80063ec <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001f0e:	4824      	ldr	r0, [pc, #144]	; (8001fa0 <main+0xbc>)
 8001f10:	f001 fa60 	bl	80033d4 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1a:	4822      	ldr	r0, [pc, #136]	; (8001fa4 <main+0xc0>)
 8001f1c:	f002 fe2e 	bl	8004b7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001f20:	2201      	movs	r2, #1
 8001f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f26:	481f      	ldr	r0, [pc, #124]	; (8001fa4 <main+0xc0>)
 8001f28:	f002 fe28 	bl	8004b7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f32:	481c      	ldr	r0, [pc, #112]	; (8001fa4 <main+0xc0>)
 8001f34:	f002 fe22 	bl	8004b7c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4818      	ldr	r0, [pc, #96]	; (8001f9c <main+0xb8>)
 8001f3c:	f004 fb02 	bl	8006544 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001f40:	2100      	movs	r1, #0
 8001f42:	4816      	ldr	r0, [pc, #88]	; (8001f9c <main+0xb8>)
 8001f44:	f005 fb60 	bl	8007608 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001f48:	2104      	movs	r1, #4
 8001f4a:	4814      	ldr	r0, [pc, #80]	; (8001f9c <main+0xb8>)
 8001f4c:	f004 fafa 	bl	8006544 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001f50:	2104      	movs	r1, #4
 8001f52:	4812      	ldr	r0, [pc, #72]	; (8001f9c <main+0xb8>)
 8001f54:	f005 fb58 	bl	8007608 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001f58:	2108      	movs	r1, #8
 8001f5a:	4810      	ldr	r0, [pc, #64]	; (8001f9c <main+0xb8>)
 8001f5c:	f004 faf2 	bl	8006544 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001f60:	2108      	movs	r1, #8
 8001f62:	480e      	ldr	r0, [pc, #56]	; (8001f9c <main+0xb8>)
 8001f64:	f005 fb50 	bl	8007608 <HAL_TIMEx_PWMN_Start>

  TIM1 -> CCR4 = (TIM1 -> ARR) - 10;//for Carrier Top Interrupt
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <main+0xc4>)
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <main+0xc4>)
 8001f6e:	3b0a      	subs	r3, #10
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40

  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 8001f72:	480e      	ldr	r0, [pc, #56]	; (8001fac <main+0xc8>)
 8001f74:	f004 fa3a 	bl	80063ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001f78:	2100      	movs	r1, #0
 8001f7a:	480c      	ldr	r0, [pc, #48]	; (8001fac <main+0xc8>)
 8001f7c:	f004 fc20 	bl	80067c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001f80:	2104      	movs	r1, #4
 8001f82:	480a      	ldr	r0, [pc, #40]	; (8001fac <main+0xc8>)
 8001f84:	f004 fc1c 	bl	80067c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001f88:	2108      	movs	r1, #8
 8001f8a:	4808      	ldr	r0, [pc, #32]	; (8001fac <main+0xc8>)
 8001f8c:	f004 fc18 	bl	80067c0 <HAL_TIM_IC_Start_IT>

  // Start DMA (This function needs to be called after Starting TIM1 & TIM2)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8001f90:	2202      	movs	r2, #2
 8001f92:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <main+0xcc>)
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <main+0xbc>)
 8001f96:	f000 ffdf 	bl	8002f58 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <main+0xb6>
 8001f9c:	200001e4 	.word	0x200001e4
 8001fa0:	20000150 	.word	0x20000150
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	20000230 	.word	0x20000230
 8001fb0:	20000078 	.word	0x20000078

08001fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b09c      	sub	sp, #112	; 0x70
 8001fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fbe:	2228      	movs	r2, #40	; 0x28
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f006 f85b 	bl	800807e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd8:	463b      	mov	r3, r7
 8001fda:	2234      	movs	r2, #52	; 0x34
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f006 f84d 	bl	800807e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fec:	2310      	movs	r3, #16
 8001fee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001ff8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ffe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002002:	4618      	mov	r0, r3
 8002004:	f002 fdec 	bl	8004be0 <HAL_RCC_OscConfig>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800200e:	f000 fac9 	bl	80025a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002012:	230f      	movs	r3, #15
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002016:	2302      	movs	r3, #2
 8002018:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201a:	2300      	movs	r3, #0
 800201c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800201e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002024:	2300      	movs	r3, #0
 8002026:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002028:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800202c:	2102      	movs	r1, #2
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fe14 	bl	8005c5c <HAL_RCC_ClockConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800203a:	f000 fab3 	bl	80025a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
 800203e:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8002042:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8002048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204e:	463b      	mov	r3, r7
 8002050:	4618      	mov	r0, r3
 8002052:	f004 f839 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800205c:	f000 faa2 	bl	80025a4 <Error_Handler>
  }
}
 8002060:	bf00      	nop
 8002062:	3770      	adds	r7, #112	; 0x70
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b090      	sub	sp, #64	; 0x40
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800206e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002080:	463b      	mov	r3, r7
 8002082:	2228      	movs	r2, #40	; 0x28
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f005 fff9 	bl	800807e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800208c:	4b4e      	ldr	r3, [pc, #312]	; (80021c8 <MX_ADC1_Init+0x160>)
 800208e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002092:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002094:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <MX_ADC1_Init+0x160>)
 8002096:	2200      	movs	r2, #0
 8002098:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800209a:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <MX_ADC1_Init+0x160>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020a0:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020a6:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020ac:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020b4:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020ba:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020bc:	2201      	movs	r2, #1
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020c0:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80020c6:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020c8:	2202      	movs	r2, #2
 80020ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80020cc:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020d4:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020d6:	2204      	movs	r2, #4
 80020d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020dc:	2200      	movs	r2, #0
 80020de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80020e0:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020e6:	4838      	ldr	r0, [pc, #224]	; (80021c8 <MX_ADC1_Init+0x160>)
 80020e8:	f000 fdb0 	bl	8002c4c <HAL_ADC_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80020f2:	f000 fa57 	bl	80025a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80020f6:	2302      	movs	r3, #2
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020fe:	2300      	movs	r3, #0
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002102:	2300      	movs	r3, #0
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002106:	2300      	movs	r3, #0
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.Offset = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800210e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002112:	4619      	mov	r1, r3
 8002114:	482c      	ldr	r0, [pc, #176]	; (80021c8 <MX_ADC1_Init+0x160>)
 8002116:	f001 fa0f 	bl	8003538 <HAL_ADC_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8002120:	f000 fa40 	bl	80025a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002124:	2308      	movs	r3, #8
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002128:	2302      	movs	r3, #2
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800212c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002130:	4619      	mov	r1, r3
 8002132:	4825      	ldr	r0, [pc, #148]	; (80021c8 <MX_ADC1_Init+0x160>)
 8002134:	f001 fa00 	bl	8003538 <HAL_ADC_ConfigChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800213e:	f000 fa31 	bl	80025a4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8002142:	2301      	movs	r3, #1
 8002144:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002146:	2301      	movs	r3, #1
 8002148:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800214e:	2303      	movs	r3, #3
 8002150:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002156:	2340      	movs	r3, #64	; 0x40
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002172:	463b      	mov	r3, r7
 8002174:	4619      	mov	r1, r3
 8002176:	4814      	ldr	r0, [pc, #80]	; (80021c8 <MX_ADC1_Init+0x160>)
 8002178:	f001 fc90 	bl	8003a9c <HAL_ADCEx_InjectedConfigChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8002182:	f000 fa0f 	bl	80025a4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8002186:	2307      	movs	r3, #7
 8002188:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800218a:	2302      	movs	r3, #2
 800218c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800218e:	463b      	mov	r3, r7
 8002190:	4619      	mov	r1, r3
 8002192:	480d      	ldr	r0, [pc, #52]	; (80021c8 <MX_ADC1_Init+0x160>)
 8002194:	f001 fc82 	bl	8003a9c <HAL_ADCEx_InjectedConfigChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 800219e:	f000 fa01 	bl	80025a4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80021a2:	2306      	movs	r3, #6
 80021a4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80021a6:	2303      	movs	r3, #3
 80021a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80021aa:	463b      	mov	r3, r7
 80021ac:	4619      	mov	r1, r3
 80021ae:	4806      	ldr	r0, [pc, #24]	; (80021c8 <MX_ADC1_Init+0x160>)
 80021b0:	f001 fc74 	bl	8003a9c <HAL_ADCEx_InjectedConfigChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 80021ba:	f000 f9f3 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	3740      	adds	r7, #64	; 0x40
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000150 	.word	0x20000150

080021cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b096      	sub	sp, #88	; 0x58
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	611a      	str	r2, [r3, #16]
 80021ee:	615a      	str	r2, [r3, #20]
 80021f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	222c      	movs	r2, #44	; 0x2c
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f005 ff40 	bl	800807e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021fe:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <MX_TIM1_Init+0x164>)
 8002200:	4a4c      	ldr	r2, [pc, #304]	; (8002334 <MX_TIM1_Init+0x168>)
 8002202:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002204:	4b4a      	ldr	r3, [pc, #296]	; (8002330 <MX_TIM1_Init+0x164>)
 8002206:	2200      	movs	r2, #0
 8002208:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800220a:	4b49      	ldr	r3, [pc, #292]	; (8002330 <MX_TIM1_Init+0x164>)
 800220c:	2220      	movs	r2, #32
 800220e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000 - 1;
 8002210:	4b47      	ldr	r3, [pc, #284]	; (8002330 <MX_TIM1_Init+0x164>)
 8002212:	f241 3287 	movw	r2, #4999	; 0x1387
 8002216:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002218:	4b45      	ldr	r3, [pc, #276]	; (8002330 <MX_TIM1_Init+0x164>)
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800221e:	4b44      	ldr	r3, [pc, #272]	; (8002330 <MX_TIM1_Init+0x164>)
 8002220:	2200      	movs	r2, #0
 8002222:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002224:	4b42      	ldr	r3, [pc, #264]	; (8002330 <MX_TIM1_Init+0x164>)
 8002226:	2200      	movs	r2, #0
 8002228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800222a:	4841      	ldr	r0, [pc, #260]	; (8002330 <MX_TIM1_Init+0x164>)
 800222c:	f004 f932 	bl	8006494 <HAL_TIM_PWM_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002236:	f000 f9b5 	bl	80025a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800223a:	2370      	movs	r3, #112	; 0x70
 800223c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002246:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800224a:	4619      	mov	r1, r3
 800224c:	4838      	ldr	r0, [pc, #224]	; (8002330 <MX_TIM1_Init+0x164>)
 800224e:	f005 fa79 	bl	8007744 <HAL_TIMEx_MasterConfigSynchronization>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002258:	f000 f9a4 	bl	80025a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225c:	2360      	movs	r3, #96	; 0x60
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002264:	2300      	movs	r3, #0
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002268:	2308      	movs	r3, #8
 800226a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002270:	2300      	movs	r3, #0
 8002272:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002278:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800227c:	2200      	movs	r2, #0
 800227e:	4619      	mov	r1, r3
 8002280:	482b      	ldr	r0, [pc, #172]	; (8002330 <MX_TIM1_Init+0x164>)
 8002282:	f004 fc67 	bl	8006b54 <HAL_TIM_PWM_ConfigChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800228c:	f000 f98a 	bl	80025a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002294:	2204      	movs	r2, #4
 8002296:	4619      	mov	r1, r3
 8002298:	4825      	ldr	r0, [pc, #148]	; (8002330 <MX_TIM1_Init+0x164>)
 800229a:	f004 fc5b 	bl	8006b54 <HAL_TIM_PWM_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80022a4:	f000 f97e 	bl	80025a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ac:	2208      	movs	r2, #8
 80022ae:	4619      	mov	r1, r3
 80022b0:	481f      	ldr	r0, [pc, #124]	; (8002330 <MX_TIM1_Init+0x164>)
 80022b2:	f004 fc4f 	bl	8006b54 <HAL_TIM_PWM_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80022bc:	f000 f972 	bl	80025a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80022c0:	2370      	movs	r3, #112	; 0x70
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022c8:	220c      	movs	r2, #12
 80022ca:	4619      	mov	r1, r3
 80022cc:	4818      	ldr	r0, [pc, #96]	; (8002330 <MX_TIM1_Init+0x164>)
 80022ce:	f004 fc41 	bl	8006b54 <HAL_TIM_PWM_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80022d8:	f000 f964 	bl	80025a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <MX_TIM1_Init+0x164>)
 8002312:	f005 fa7d 	bl	8007810 <HAL_TIMEx_ConfigBreakDeadTime>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 800231c:	f000 f942 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <MX_TIM1_Init+0x164>)
 8002322:	f000 fa8f 	bl	8002844 <HAL_TIM_MspPostInit>

}
 8002326:	bf00      	nop
 8002328:	3758      	adds	r7, #88	; 0x58
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200001e4 	.word	0x200001e4
 8002334:	40012c00 	.word	0x40012c00

08002338 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002356:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <MX_TIM2_Init+0xd0>)
 8002358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800235c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800235e:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <MX_TIM2_Init+0xd0>)
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <MX_TIM2_Init+0xd0>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800236a:	4b27      	ldr	r3, [pc, #156]	; (8002408 <MX_TIM2_Init+0xd0>)
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <MX_TIM2_Init+0xd0>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002378:	4b23      	ldr	r3, [pc, #140]	; (8002408 <MX_TIM2_Init+0xd0>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800237e:	4822      	ldr	r0, [pc, #136]	; (8002408 <MX_TIM2_Init+0xd0>)
 8002380:	f004 f9c6 	bl	8006710 <HAL_TIM_IC_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800238a:	f000 f90b 	bl	80025a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	481a      	ldr	r0, [pc, #104]	; (8002408 <MX_TIM2_Init+0xd0>)
 800239e:	f005 f9d1 	bl	8007744 <HAL_TIMEx_MasterConfigSynchronization>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80023a8:	f000 f8fc 	bl	80025a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023ac:	2300      	movs	r3, #0
 80023ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023b0:	2301      	movs	r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	4619      	mov	r1, r3
 80023c2:	4811      	ldr	r0, [pc, #68]	; (8002408 <MX_TIM2_Init+0xd0>)
 80023c4:	f004 fb2a 	bl	8006a1c <HAL_TIM_IC_ConfigChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80023ce:	f000 f8e9 	bl	80025a4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	2204      	movs	r2, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	480b      	ldr	r0, [pc, #44]	; (8002408 <MX_TIM2_Init+0xd0>)
 80023da:	f004 fb1f 	bl	8006a1c <HAL_TIM_IC_ConfigChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80023e4:	f000 f8de 	bl	80025a4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2208      	movs	r2, #8
 80023ec:	4619      	mov	r1, r3
 80023ee:	4806      	ldr	r0, [pc, #24]	; (8002408 <MX_TIM2_Init+0xd0>)
 80023f0:	f004 fb14 	bl	8006a1c <HAL_TIM_IC_ConfigChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80023fa:	f000 f8d3 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000230 	.word	0x20000230

0800240c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <MX_USART2_UART_Init+0x58>)
 8002412:	4a15      	ldr	r2, [pc, #84]	; (8002468 <MX_USART2_UART_Init+0x5c>)
 8002414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <MX_USART2_UART_Init+0x58>)
 8002418:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800241c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <MX_USART2_UART_Init+0x58>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <MX_USART2_UART_Init+0x58>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <MX_USART2_UART_Init+0x58>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <MX_USART2_UART_Init+0x58>)
 8002432:	220c      	movs	r2, #12
 8002434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <MX_USART2_UART_Init+0x58>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <MX_USART2_UART_Init+0x58>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <MX_USART2_UART_Init+0x58>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <MX_USART2_UART_Init+0x58>)
 800244a:	2200      	movs	r2, #0
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800244e:	4805      	ldr	r0, [pc, #20]	; (8002464 <MX_USART2_UART_Init+0x58>)
 8002450:	f005 fa7b 	bl	800794a <HAL_UART_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800245a:	f000 f8a3 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000027c 	.word	0x2000027c
 8002468:	40004400 	.word	0x40004400

0800246c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_DMA_Init+0x38>)
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <MX_DMA_Init+0x38>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6153      	str	r3, [r2, #20]
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_DMA_Init+0x38>)
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2100      	movs	r1, #0
 800248e:	200b      	movs	r0, #11
 8002490:	f002 f81d 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002494:	200b      	movs	r0, #11
 8002496:	f002 f836 	bl	8004506 <HAL_NVIC_EnableIRQ>

}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000

080024a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <MX_GPIO_Init+0xf0>)
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	4a35      	ldr	r2, [pc, #212]	; (8002598 <MX_GPIO_Init+0xf0>)
 80024c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024c8:	6153      	str	r3, [r2, #20]
 80024ca:	4b33      	ldr	r3, [pc, #204]	; (8002598 <MX_GPIO_Init+0xf0>)
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <MX_GPIO_Init+0xf0>)
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	4a2f      	ldr	r2, [pc, #188]	; (8002598 <MX_GPIO_Init+0xf0>)
 80024dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024e0:	6153      	str	r3, [r2, #20]
 80024e2:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <MX_GPIO_Init+0xf0>)
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <MX_GPIO_Init+0xf0>)
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	4a29      	ldr	r2, [pc, #164]	; (8002598 <MX_GPIO_Init+0xf0>)
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	6153      	str	r3, [r2, #20]
 80024fa:	4b27      	ldr	r3, [pc, #156]	; (8002598 <MX_GPIO_Init+0xf0>)
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <MX_GPIO_Init+0xf0>)
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	4a23      	ldr	r2, [pc, #140]	; (8002598 <MX_GPIO_Init+0xf0>)
 800250c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002510:	6153      	str	r3, [r2, #20]
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <MX_GPIO_Init+0xf0>)
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002524:	481d      	ldr	r0, [pc, #116]	; (800259c <MX_GPIO_Init+0xf4>)
 8002526:	f002 fb29 	bl	8004b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002530:	481b      	ldr	r0, [pc, #108]	; (80025a0 <MX_GPIO_Init+0xf8>)
 8002532:	f002 fb23 	bl	8004b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800253c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4814      	ldr	r0, [pc, #80]	; (80025a0 <MX_GPIO_Init+0xf8>)
 800254e:	f002 f98b 	bl	8004868 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002558:	2301      	movs	r3, #1
 800255a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	4619      	mov	r1, r3
 800256a:	480c      	ldr	r0, [pc, #48]	; (800259c <MX_GPIO_Init+0xf4>)
 800256c:	f002 f97c 	bl	8004868 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8002570:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002576:	2301      	movs	r3, #1
 8002578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_GPIO_Init+0xf8>)
 800258a:	f002 f96d 	bl	8004868 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	48000400 	.word	0x48000400
 80025a0:	48000800 	.word	0x48000800

080025a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a8:	b672      	cpsid	i
}
 80025aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025ac:	e7fe      	b.n	80025ac <Error_Handler+0x8>
	...

080025b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_MspInit+0x44>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <HAL_MspInit+0x44>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6193      	str	r3, [r2, #24]
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_MspInit+0x44>)
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_MspInit+0x44>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <HAL_MspInit+0x44>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	61d3      	str	r3, [r2, #28]
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_MspInit+0x44>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025e6:	2007      	movs	r0, #7
 80025e8:	f001 ff66 	bl	80044b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002618:	f040 8085 	bne.w	8002726 <HAL_ADC_MspInit+0x12e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800261c:	4b44      	ldr	r3, [pc, #272]	; (8002730 <HAL_ADC_MspInit+0x138>)
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	4a43      	ldr	r2, [pc, #268]	; (8002730 <HAL_ADC_MspInit+0x138>)
 8002622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002626:	6153      	str	r3, [r2, #20]
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_ADC_MspInit+0x138>)
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002634:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_ADC_MspInit+0x138>)
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	4a3d      	ldr	r2, [pc, #244]	; (8002730 <HAL_ADC_MspInit+0x138>)
 800263a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800263e:	6153      	str	r3, [r2, #20]
 8002640:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_ADC_MspInit+0x138>)
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264c:	4b38      	ldr	r3, [pc, #224]	; (8002730 <HAL_ADC_MspInit+0x138>)
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	4a37      	ldr	r2, [pc, #220]	; (8002730 <HAL_ADC_MspInit+0x138>)
 8002652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002656:	6153      	str	r3, [r2, #20]
 8002658:	4b35      	ldr	r3, [pc, #212]	; (8002730 <HAL_ADC_MspInit+0x138>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002664:	4b32      	ldr	r3, [pc, #200]	; (8002730 <HAL_ADC_MspInit+0x138>)
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	4a31      	ldr	r2, [pc, #196]	; (8002730 <HAL_ADC_MspInit+0x138>)
 800266a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266e:	6153      	str	r3, [r2, #20]
 8002670:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <HAL_ADC_MspInit+0x138>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800267c:	230f      	movs	r3, #15
 800267e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002680:	2303      	movs	r3, #3
 8002682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	4619      	mov	r1, r3
 800268e:	4829      	ldr	r0, [pc, #164]	; (8002734 <HAL_ADC_MspInit+0x13c>)
 8002690:	f002 f8ea 	bl	8004868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002694:	2303      	movs	r3, #3
 8002696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002698:	2303      	movs	r3, #3
 800269a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	4619      	mov	r1, r3
 80026a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026aa:	f002 f8dd 	bl	8004868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026b2:	2303      	movs	r3, #3
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ba:	f107 031c 	add.w	r3, r7, #28
 80026be:	4619      	mov	r1, r3
 80026c0:	481d      	ldr	r0, [pc, #116]	; (8002738 <HAL_ADC_MspInit+0x140>)
 80026c2:	f002 f8d1 	bl	8004868 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_ADC_MspInit+0x144>)
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_ADC_MspInit+0x148>)
 80026ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_ADC_MspInit+0x144>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <HAL_ADC_MspInit+0x144>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_ADC_MspInit+0x144>)
 80026da:	2280      	movs	r2, #128	; 0x80
 80026dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_ADC_MspInit+0x144>)
 80026e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_ADC_MspInit+0x144>)
 80026e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_ADC_MspInit+0x144>)
 80026f0:	2220      	movs	r2, #32
 80026f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_ADC_MspInit+0x144>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026fa:	4810      	ldr	r0, [pc, #64]	; (800273c <HAL_ADC_MspInit+0x144>)
 80026fc:	f001 ff1d 	bl	800453a <HAL_DMA_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 8002706:	f7ff ff4d 	bl	80025a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_ADC_MspInit+0x144>)
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_ADC_MspInit+0x144>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	2012      	movs	r0, #18
 800271c:	f001 fed7 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002720:	2012      	movs	r0, #18
 8002722:	f001 fef0 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	3730      	adds	r7, #48	; 0x30
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	48000800 	.word	0x48000800
 8002738:	48000400 	.word	0x48000400
 800273c:	200001a0 	.word	0x200001a0
 8002740:	40020008 	.word	0x40020008

08002744 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0a      	ldr	r2, [pc, #40]	; (800277c <HAL_TIM_PWM_MspInit+0x38>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10b      	bne.n	800276e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_TIM_PWM_MspInit+0x3c>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_TIM_PWM_MspInit+0x3c>)
 800275c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002760:	6193      	str	r3, [r2, #24]
 8002762:	4b07      	ldr	r3, [pc, #28]	; (8002780 <HAL_TIM_PWM_MspInit+0x3c>)
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40012c00 	.word	0x40012c00
 8002780:	40021000 	.word	0x40021000

08002784 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a4:	d146      	bne.n	8002834 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a6:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_TIM_IC_MspInit+0xb8>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4a24      	ldr	r2, [pc, #144]	; (800283c <HAL_TIM_IC_MspInit+0xb8>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	61d3      	str	r3, [r2, #28]
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_TIM_IC_MspInit+0xb8>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	4b1f      	ldr	r3, [pc, #124]	; (800283c <HAL_TIM_IC_MspInit+0xb8>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_TIM_IC_MspInit+0xb8>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c8:	6153      	str	r3, [r2, #20]
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <HAL_TIM_IC_MspInit+0xb8>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_TIM_IC_MspInit+0xb8>)
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	4a18      	ldr	r2, [pc, #96]	; (800283c <HAL_TIM_IC_MspInit+0xb8>)
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e0:	6153      	str	r3, [r2, #20]
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <HAL_TIM_IC_MspInit+0xb8>)
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 80027ee:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80027f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002800:	2301      	movs	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4619      	mov	r1, r3
 800280a:	480d      	ldr	r0, [pc, #52]	; (8002840 <HAL_TIM_IC_MspInit+0xbc>)
 800280c:	f002 f82c 	bl	8004868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 8002810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002822:	2301      	movs	r3, #1
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4619      	mov	r1, r3
 800282c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002830:	f002 f81a 	bl	8004868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002834:	bf00      	nop
 8002836:	3728      	adds	r7, #40	; 0x28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	48000400 	.word	0x48000400

08002844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a31      	ldr	r2, [pc, #196]	; (8002928 <HAL_TIM_MspPostInit+0xe4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d15c      	bne.n	8002920 <HAL_TIM_MspPostInit+0xdc>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <HAL_TIM_MspPostInit+0xe8>)
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	4a30      	ldr	r2, [pc, #192]	; (800292c <HAL_TIM_MspPostInit+0xe8>)
 800286c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002870:	6153      	str	r3, [r2, #20]
 8002872:	4b2e      	ldr	r3, [pc, #184]	; (800292c <HAL_TIM_MspPostInit+0xe8>)
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b2b      	ldr	r3, [pc, #172]	; (800292c <HAL_TIM_MspPostInit+0xe8>)
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	4a2a      	ldr	r2, [pc, #168]	; (800292c <HAL_TIM_MspPostInit+0xe8>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002888:	6153      	str	r3, [r2, #20]
 800288a:	4b28      	ldr	r3, [pc, #160]	; (800292c <HAL_TIM_MspPostInit+0xe8>)
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002896:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800289a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2300      	movs	r3, #0
 80028a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028a8:	2306      	movs	r3, #6
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4619      	mov	r1, r3
 80028b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b6:	f001 ffd7 	bl	8004868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028ba:	2301      	movs	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028ca:	2306      	movs	r3, #6
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	4816      	ldr	r0, [pc, #88]	; (8002930 <HAL_TIM_MspPostInit+0xec>)
 80028d6:	f001 ffc7 	bl	8004868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80028ec:	2304      	movs	r3, #4
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	4619      	mov	r1, r3
 80028f6:	480e      	ldr	r0, [pc, #56]	; (8002930 <HAL_TIM_MspPostInit+0xec>)
 80028f8:	f001 ffb6 	bl	8004868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 800290e:	230b      	movs	r3, #11
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4619      	mov	r1, r3
 8002918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800291c:	f001 ffa4 	bl	8004868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002920:	bf00      	nop
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40021000 	.word	0x40021000
 8002930:	48000400 	.word	0x48000400

08002934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <HAL_UART_MspInit+0x7c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d128      	bne.n	80029a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002956:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <HAL_UART_MspInit+0x80>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4a16      	ldr	r2, [pc, #88]	; (80029b4 <HAL_UART_MspInit+0x80>)
 800295c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002960:	61d3      	str	r3, [r2, #28]
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_UART_MspInit+0x80>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_UART_MspInit+0x80>)
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_UART_MspInit+0x80>)
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	6153      	str	r3, [r2, #20]
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_UART_MspInit+0x80>)
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002986:	230c      	movs	r3, #12
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002996:	2307      	movs	r3, #7
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a4:	f001 ff60 	bl	8004868 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029a8:	bf00      	nop
 80029aa:	3728      	adds	r7, #40	; 0x28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40004400 	.word	0x40004400
 80029b4:	40021000 	.word	0x40021000

080029b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <NMI_Handler+0x4>

080029be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c2:	e7fe      	b.n	80029c2 <HardFault_Handler+0x4>

080029c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <MemManage_Handler+0x4>

080029ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <BusFault_Handler+0x4>

080029d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <UsageFault_Handler+0x4>

080029d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a04:	f000 f8da 	bl	8002bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <DMA1_Channel1_IRQHandler+0x10>)
 8002a12:	f001 fe38 	bl	8004686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200001a0 	.word	0x200001a0

08002a20 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_IRQn 0 */

	/* USER CODE END ADC1_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 8002a24:	481c      	ldr	r0, [pc, #112]	; (8002a98 <ADC1_IRQHandler+0x78>)
 8002a26:	f000 fb33 	bl	8003090 <HAL_ADC_IRQHandler>

	/* USER CODE BEGIN ADC1_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a2e:	481b      	ldr	r0, [pc, #108]	; (8002a9c <ADC1_IRQHandler+0x7c>)
 8002a30:	f002 f8bc 	bl	8004bac <HAL_GPIO_TogglePin>

	//read IO signals
	gButton1 = readButton1();
 8002a34:	f7fe f9c2 	bl	8000dbc <readButton1>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <ADC1_IRQHandler+0x80>)
 8002a3e:	701a      	strb	r2, [r3, #0]
	gVolume = readVolume();
 8002a40:	f7fe fa24 	bl	8000e8c <readVolume>
 8002a44:	eef0 7a40 	vmov.f32	s15, s0
 8002a48:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <ADC1_IRQHandler+0x84>)
 8002a4a:	edc3 7a00 	vstr	s15, [r3]
	readCurrent(gIuvw_AD, gIuvw);
 8002a4e:	4916      	ldr	r1, [pc, #88]	; (8002aa8 <ADC1_IRQHandler+0x88>)
 8002a50:	4816      	ldr	r0, [pc, #88]	; (8002aac <ADC1_IRQHandler+0x8c>)
 8002a52:	f7fe fa69 	bl	8000f28 <readCurrent>
	gVdc = readVdc();
 8002a56:	f7fe fa45 	bl	8000ee4 <readVdc>
 8002a5a:	eef0 7a40 	vmov.f32	s15, s0
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <ADC1_IRQHandler+0x90>)
 8002a60:	edc3 7a00 	vstr	s15, [r3]
	gTwoDivVdc = gfDivideAvoidZero(2.0f, gVdc, 1.0f);
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <ADC1_IRQHandler+0x90>)
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002a6e:	eef0 0a67 	vmov.f32	s1, s15
 8002a72:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002a76:	f7fd ff0c 	bl	8000892 <gfDivideAvoidZero>
 8002a7a:	eef0 7a40 	vmov.f32	s15, s0
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <ADC1_IRQHandler+0x94>)
 8002a80:	edc3 7a00 	vstr	s15, [r3]

	// Sequence Control
	Sequence();
 8002a84:	f7fe f808 	bl	8000a98 <Sequence>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a8c:	4803      	ldr	r0, [pc, #12]	; (8002a9c <ADC1_IRQHandler+0x7c>)
 8002a8e:	f002 f88d 	bl	8004bac <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000150 	.word	0x20000150
 8002a9c:	48000400 	.word	0x48000400
 8002aa0:	2000007f 	.word	0x2000007f
 8002aa4:	2000009c 	.word	0x2000009c
 8002aa8:	200000a0 	.word	0x200000a0
 8002aac:	200000ac 	.word	0x200000ac
 8002ab0:	20000094 	.word	0x20000094
 8002ab4:	20000098 	.word	0x20000098

08002ab8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <SystemInit+0x20>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <SystemInit+0x20>)
 8002ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b14 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ae0:	f7ff ffea 	bl	8002ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ae4:	480c      	ldr	r0, [pc, #48]	; (8002b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ae6:	490d      	ldr	r1, [pc, #52]	; (8002b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	; (8002b20 <LoopForever+0xe>)
  movs r3, #0
 8002aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aec:	e002      	b.n	8002af4 <LoopCopyDataInit>

08002aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af2:	3304      	adds	r3, #4

08002af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af8:	d3f9      	bcc.n	8002aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002afc:	4c0a      	ldr	r4, [pc, #40]	; (8002b28 <LoopForever+0x16>)
  movs r3, #0
 8002afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b00:	e001      	b.n	8002b06 <LoopFillZerobss>

08002b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b04:	3204      	adds	r2, #4

08002b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b08:	d3fb      	bcc.n	8002b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b0a:	f005 fac7 	bl	800809c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b0e:	f7ff f9e9 	bl	8001ee4 <main>

08002b12 <LoopForever>:

LoopForever:
    b LoopForever
 8002b12:	e7fe      	b.n	8002b12 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b14:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002b20:	080094bc 	.word	0x080094bc
  ldr r2, =_sbss
 8002b24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002b28:	20000440 	.word	0x20000440

08002b2c <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b2c:	e7fe      	b.n	8002b2c <CAN_RX1_IRQHandler>
	...

08002b30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_Init+0x28>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <HAL_Init+0x28>)
 8002b3a:	f043 0310 	orr.w	r3, r3, #16
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b40:	2003      	movs	r0, #3
 8002b42:	f001 fcb9 	bl	80044b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f000 f808 	bl	8002b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4c:	f7ff fd30 	bl	80025b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40022000 	.word	0x40022000

08002b5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_InitTick+0x54>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_InitTick+0x58>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 fcd1 	bl	8004522 <HAL_SYSTICK_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00e      	b.n	8002ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d80a      	bhi.n	8002ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b90:	2200      	movs	r2, #0
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f001 fc99 	bl	80044ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b9c:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <HAL_InitTick+0x5c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000008 	.word	0x20000008
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_IncTick+0x20>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_IncTick+0x24>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_IncTick+0x24>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000008 	.word	0x20000008
 8002be0:	20000304 	.word	0x20000304

08002be4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_GetTick+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000304 	.word	0x20000304

08002bfc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b09a      	sub	sp, #104	; 0x68
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e169      	b.n	8002f40 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d176      	bne.n	8002d6c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d152      	bne.n	8002d2c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fca9 	bl	80025f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d13b      	bne.n	8002d2c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f001 fac9 	bl	800424c <ADC_Disable>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d12f      	bne.n	8002d2c <HAL_ADC_Init+0xe0>
 8002ccc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d12b      	bne.n	8002d2c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cdc:	f023 0302 	bic.w	r3, r3, #2
 8002ce0:	f043 0202 	orr.w	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d06:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d08:	4b8f      	ldr	r3, [pc, #572]	; (8002f48 <HAL_ADC_Init+0x2fc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a8f      	ldr	r2, [pc, #572]	; (8002f4c <HAL_ADC_Init+0x300>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	0c9a      	lsrs	r2, r3, #18
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d1e:	e002      	b.n	8002d26 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f9      	bne.n	8002d20 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d48:	d110      	bne.n	8002d6c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f023 0312 	bic.w	r3, r3, #18
 8002d52:	f043 0210 	orr.w	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 80d6 	bne.w	8002f26 <HAL_ADC_Init+0x2da>
 8002d7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 80d1 	bne.w	8002f26 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 80c9 	bne.w	8002f26 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d9c:	f043 0202 	orr.w	r2, r3, #2
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_ADC_Init+0x304>)
 8002da6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d108      	bne.n	8002dcc <HAL_ADC_Init+0x180>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_Init+0x180>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_ADC_Init+0x182>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11c      	bne.n	8002e0c <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002dd2:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_ADC_Init+0x1a8>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_Init+0x1a8>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_ADC_Init+0x1aa>
 8002df4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d108      	bne.n	8002e0c <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7e5b      	ldrb	r3, [r3, #25]
 8002e10:	035b      	lsls	r3, r3, #13
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e16:	2a01      	cmp	r2, #1
 8002e18:	d002      	beq.n	8002e20 <HAL_ADC_Init+0x1d4>
 8002e1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e1e:	e000      	b.n	8002e22 <HAL_ADC_Init+0x1d6>
 8002e20:	2200      	movs	r2, #0
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e32:	4313      	orrs	r3, r2
 8002e34:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d11b      	bne.n	8002e78 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7e5b      	ldrb	r3, [r3, #25]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	045a      	lsls	r2, r3, #17
 8002e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	663b      	str	r3, [r7, #96]	; 0x60
 8002e5a:	e00d      	b.n	8002e78 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d007      	beq.n	8002e90 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d114      	bne.n	8002ec8 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eac:	f023 0302 	bic.w	r3, r3, #2
 8002eb0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7e1b      	ldrb	r3, [r3, #24]
 8002eb6:	039a      	lsls	r2, r3, #14
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <HAL_ADC_Init+0x308>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10c      	bne.n	8002efe <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f023 010f 	bic.w	r1, r3, #15
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	1e5a      	subs	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
 8002efc:	e007      	b.n	8002f0e <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 020f 	bic.w	r2, r2, #15
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f023 0303 	bic.w	r3, r3, #3
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40
 8002f24:	e00a      	b.n	8002f3c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f023 0312 	bic.w	r3, r3, #18
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002f36:	2301      	movs	r3, #1
 8002f38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002f3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3768      	adds	r7, #104	; 0x68
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	431bde83 	.word	0x431bde83
 8002f50:	50000300 	.word	0x50000300
 8002f54:	fff0c007 	.word	0xfff0c007

08002f58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d17e      	bne.n	8003074 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_Start_DMA+0x2c>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e07a      	b.n	800307a <HAL_ADC_Start_DMA+0x122>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f001 f8f9 	bl	8004184 <ADC_Enable>
 8002f92:	4603      	mov	r3, r0
 8002f94:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d166      	bne.n	800306a <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe6:	d106      	bne.n	8002ff6 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	f023 0206 	bic.w	r2, r3, #6
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44
 8002ff4:	e002      	b.n	8002ffc <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_ADC_Start_DMA+0x12c>)
 800300a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <HAL_ADC_Start_DMA+0x130>)
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	4a1c      	ldr	r2, [pc, #112]	; (800308c <HAL_ADC_Start_DMA+0x134>)
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	221c      	movs	r2, #28
 8003022:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0210 	orr.w	r2, r2, #16
 8003032:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3340      	adds	r3, #64	; 0x40
 800304e:	4619      	mov	r1, r3
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f001 fab8 	bl	80045c8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0204 	orr.w	r2, r2, #4
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	e006      	b.n	8003078 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003072:	e001      	b.n	8003078 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003074:	2302      	movs	r3, #2
 8003076:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003078:	7dfb      	ldrb	r3, [r7, #23]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	080040b9 	.word	0x080040b9
 8003088:	08004133 	.word	0x08004133
 800308c:	0800414f 	.word	0x0800414f

08003090 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <HAL_ADC_IRQHandler+0x38>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d05a      	beq.n	8003188 <HAL_ADC_IRQHandler+0xf8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d055      	beq.n	8003188 <HAL_ADC_IRQHandler+0xf8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003106:	2b00      	cmp	r3, #0
 8003108:	d137      	bne.n	800317a <HAL_ADC_IRQHandler+0xea>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003110:	2b00      	cmp	r3, #0
 8003112:	d132      	bne.n	800317a <HAL_ADC_IRQHandler+0xea>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d02d      	beq.n	800317a <HAL_ADC_IRQHandler+0xea>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11a      	bne.n	8003162 <HAL_ADC_IRQHandler+0xd2>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 020c 	bic.w	r2, r2, #12
 800313a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d112      	bne.n	800317a <HAL_ADC_IRQHandler+0xea>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
 8003160:	e00b      	b.n	800317a <HAL_ADC_IRQHandler+0xea>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0210 	orr.w	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fd3e 	bl	8002bfc <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	220c      	movs	r2, #12
 8003186:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <HAL_ADC_IRQHandler+0x10c>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_ADC_IRQHandler+0x120>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d069      	beq.n	800327a <HAL_ADC_IRQHandler+0x1ea>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d064      	beq.n	800327a <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d14c      	bne.n	800326c <HAL_ADC_IRQHandler+0x1dc>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00b      	beq.n	80031f4 <HAL_ADC_IRQHandler+0x164>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d140      	bne.n	800326c <HAL_ADC_IRQHandler+0x1dc>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d13b      	bne.n	800326c <HAL_ADC_IRQHandler+0x1dc>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d036      	beq.n	800326c <HAL_ADC_IRQHandler+0x1dc>
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d12d      	bne.n	800326c <HAL_ADC_IRQHandler+0x1dc>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d11a      	bne.n	8003254 <HAL_ADC_IRQHandler+0x1c4>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800322c:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d112      	bne.n	800326c <HAL_ADC_IRQHandler+0x1dc>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
 8003252:	e00b      	b.n	800326c <HAL_ADC_IRQHandler+0x1dc>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f043 0210 	orr.w	r2, r3, #16
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f93b 	bl	80034e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2260      	movs	r2, #96	; 0x60
 8003278:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b00      	cmp	r3, #0
 8003282:	d011      	beq.n	80032a8 <HAL_ADC_IRQHandler+0x218>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00c      	beq.n	80032a8 <HAL_ADC_IRQHandler+0x218>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fcc2 	bl	8002c24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <HAL_ADC_IRQHandler+0x248>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <HAL_ADC_IRQHandler+0x248>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f921 	bl	8003510 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032d6:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d012      	beq.n	8003308 <HAL_ADC_IRQHandler+0x278>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <HAL_ADC_IRQHandler+0x278>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f913 	bl	8003524 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003306:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	d03b      	beq.n	800338a <HAL_ADC_IRQHandler+0x2fa>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d036      	beq.n	800338a <HAL_ADC_IRQHandler+0x2fa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	2b01      	cmp	r3, #1
 8003322:	d102      	bne.n	800332a <HAL_ADC_IRQHandler+0x29a>
    {
      overrun_error = 1U;
 8003324:	2301      	movs	r3, #1
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	e019      	b.n	800335e <HAL_ADC_IRQHandler+0x2ce>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800332a:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_ADC_IRQHandler+0x340>)
 800332c:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_ADC_IRQHandler+0x2be>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10a      	bne.n	800335e <HAL_ADC_IRQHandler+0x2ce>
        {
          overrun_error = 1U;  
 8003348:	2301      	movs	r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	e007      	b.n	800335e <HAL_ADC_IRQHandler+0x2ce>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_ADC_IRQHandler+0x2ce>
        {
          overrun_error = 1U;  
 800335a:	2301      	movs	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d10e      	bne.n	8003382 <HAL_ADC_IRQHandler+0x2f2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	f043 0202 	orr.w	r2, r3, #2
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fc5b 	bl	8002c38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2210      	movs	r2, #16
 8003388:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d018      	beq.n	80033c6 <HAL_ADC_IRQHandler+0x336>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339a:	2b00      	cmp	r3, #0
 800339c:	d013      	beq.n	80033c6 <HAL_ADC_IRQHandler+0x336>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f043 0208 	orr.w	r2, r3, #8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033be:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f89b 	bl	80034fc <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80033c6:	bf00      	nop
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	50000300 	.word	0x50000300

080033d4 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d175      	bne.n	80034da <HAL_ADCEx_InjectedStart_IT+0x106>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_ADCEx_InjectedStart_IT+0x28>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e071      	b.n	80034e0 <HAL_ADCEx_InjectedStart_IT+0x10c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 febd 	bl	8004184 <ADC_Enable>
 800340a:	4603      	mov	r3, r0
 800340c:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
      /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d15d      	bne.n	80034d0 <HAL_ADCEx_InjectedStart_IT+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Case of independent mode or multimode(for devices with several ADCs):*/
      /* Set multimode state.                                                 */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Check if a regular conversion is ongoing */
      /* Note: On this device, there is no ADC error code fields related to   */
      /*       conversions on group injected only. In case of conversion on   */
      /*       going on group regular, no error code is reset.                */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <HAL_ADCEx_InjectedStart_IT+0x72>
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2260      	movs	r2, #96	; 0x60
 8003454:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC Injected context queue overflow interrupt if this feature */
      /* is enabled.                                                          */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_ADCEx_InjectedStart_IT+0xa0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003472:	605a      	str	r2, [r3, #4]
      }
      
      /* Enable ADC end of conversion interrupt */
      switch(hadc->Init.EOCSelection)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d110      	bne.n	800349e <HAL_ADCEx_InjectedStart_IT+0xca>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0220 	bic.w	r2, r2, #32
 800348a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349a:	605a      	str	r2, [r3, #4]
          break;
 800349c:	e008      	b.n	80034b0 <HAL_ADCEx_InjectedStart_IT+0xdc>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80034ac:	605a      	str	r2, [r3, #4]
          break;
 80034ae:	bf00      	nop
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <HAL_ADCEx_InjectedStart_IT+0x10a>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0208 	orr.w	r2, r2, #8
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	e006      	b.n	80034de <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034d8:	e001      	b.n	80034de <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034da:	2302      	movs	r3, #2
 80034dc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003538:	b480      	push	{r7}
 800353a:	b09b      	sub	sp, #108	; 0x6c
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_ADC_ConfigChannel+0x22>
 8003556:	2302      	movs	r3, #2
 8003558:	e295      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x54e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f040 8279 	bne.w	8003a64 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b04      	cmp	r3, #4
 8003578:	d81c      	bhi.n	80035b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	461a      	mov	r2, r3
 800358e:	231f      	movs	r3, #31
 8003590:	4093      	lsls	r3, r2
 8003592:	43db      	mvns	r3, r3
 8003594:	4019      	ands	r1, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	fa00 f203 	lsl.w	r2, r0, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
 80035b2:	e063      	b.n	800367c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b09      	cmp	r3, #9
 80035ba:	d81e      	bhi.n	80035fa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	3b1e      	subs	r3, #30
 80035d0:	221f      	movs	r2, #31
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	4019      	ands	r1, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	3b1e      	subs	r3, #30
 80035ec:	fa00 f203 	lsl.w	r2, r0, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	635a      	str	r2, [r3, #52]	; 0x34
 80035f8:	e040      	b.n	800367c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b0e      	cmp	r3, #14
 8003600:	d81e      	bhi.n	8003640 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	3b3c      	subs	r3, #60	; 0x3c
 8003616:	221f      	movs	r2, #31
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	4019      	ands	r1, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	3b3c      	subs	r3, #60	; 0x3c
 8003632:	fa00 f203 	lsl.w	r2, r0, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	639a      	str	r2, [r3, #56]	; 0x38
 800363e:	e01d      	b.n	800367c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	3b5a      	subs	r3, #90	; 0x5a
 8003654:	221f      	movs	r2, #31
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	4019      	ands	r1, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	3b5a      	subs	r3, #90	; 0x5a
 8003670:	fa00 f203 	lsl.w	r2, r0, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 80e5 	bne.w	8003856 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b09      	cmp	r3, #9
 8003692:	d91c      	bls.n	80036ce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6999      	ldr	r1, [r3, #24]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	3b1e      	subs	r3, #30
 80036a6:	2207      	movs	r2, #7
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	4019      	ands	r1, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6898      	ldr	r0, [r3, #8]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	3b1e      	subs	r3, #30
 80036c0:	fa00 f203 	lsl.w	r2, r0, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	619a      	str	r2, [r3, #24]
 80036cc:	e019      	b.n	8003702 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6959      	ldr	r1, [r3, #20]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	2207      	movs	r2, #7
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	4019      	ands	r1, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6898      	ldr	r0, [r3, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	fa00 f203 	lsl.w	r2, r0, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	3b01      	subs	r3, #1
 8003720:	2b03      	cmp	r3, #3
 8003722:	d84f      	bhi.n	80037c4 <HAL_ADC_ConfigChannel+0x28c>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <HAL_ADC_ConfigChannel+0x1f4>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	0800373d 	.word	0x0800373d
 8003730:	0800375f 	.word	0x0800375f
 8003734:	08003781 	.word	0x08003781
 8003738:	080037a3 	.word	0x080037a3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003742:	4b97      	ldr	r3, [pc, #604]	; (80039a0 <HAL_ADC_ConfigChannel+0x468>)
 8003744:	4013      	ands	r3, r2
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	0691      	lsls	r1, r2, #26
 800374c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800374e:	430a      	orrs	r2, r1
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800375a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800375c:	e07b      	b.n	8003856 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003764:	4b8e      	ldr	r3, [pc, #568]	; (80039a0 <HAL_ADC_ConfigChannel+0x468>)
 8003766:	4013      	ands	r3, r2
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	0691      	lsls	r1, r2, #26
 800376e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003770:	430a      	orrs	r2, r1
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800377c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800377e:	e06a      	b.n	8003856 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003786:	4b86      	ldr	r3, [pc, #536]	; (80039a0 <HAL_ADC_ConfigChannel+0x468>)
 8003788:	4013      	ands	r3, r2
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	0691      	lsls	r1, r2, #26
 8003790:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003792:	430a      	orrs	r2, r1
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800379e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037a0:	e059      	b.n	8003856 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037a8:	4b7d      	ldr	r3, [pc, #500]	; (80039a0 <HAL_ADC_ConfigChannel+0x468>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	0691      	lsls	r1, r2, #26
 80037b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037b4:	430a      	orrs	r2, r1
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037c0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037c2:	e048      	b.n	8003856 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	069b      	lsls	r3, r3, #26
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d107      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037e6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	069b      	lsls	r3, r3, #26
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d107      	bne.n	800380c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800380a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003812:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	069b      	lsls	r3, r3, #26
 800381c:	429a      	cmp	r2, r3
 800381e:	d107      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800382e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003836:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	069b      	lsls	r3, r3, #26
 8003840:	429a      	cmp	r2, r3
 8003842:	d107      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003852:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003854:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d108      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x33e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x33e>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_ADC_ConfigChannel+0x340>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	f040 80fe 	bne.w	8003a7a <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d00f      	beq.n	80038a6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2201      	movs	r2, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43da      	mvns	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	400a      	ands	r2, r1
 80038a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80038a4:	e049      	b.n	800393a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2201      	movs	r2, #1
 80038b4:	409a      	lsls	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b09      	cmp	r3, #9
 80038c6:	d91c      	bls.n	8003902 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6999      	ldr	r1, [r3, #24]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4613      	mov	r3, r2
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	4413      	add	r3, r2
 80038d8:	3b1b      	subs	r3, #27
 80038da:	2207      	movs	r2, #7
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	4019      	ands	r1, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6898      	ldr	r0, [r3, #8]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	3b1b      	subs	r3, #27
 80038f4:	fa00 f203 	lsl.w	r2, r0, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	619a      	str	r2, [r3, #24]
 8003900:	e01b      	b.n	800393a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6959      	ldr	r1, [r3, #20]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	2207      	movs	r2, #7
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	4019      	ands	r1, r3
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6898      	ldr	r0, [r3, #8]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	fa00 f203 	lsl.w	r2, r0, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800393a:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <HAL_ADC_ConfigChannel+0x46c>)
 800393c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b10      	cmp	r3, #16
 8003944:	d105      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800394e:	2b00      	cmp	r3, #0
 8003950:	d014      	beq.n	800397c <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003956:	2b11      	cmp	r3, #17
 8003958:	d105      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800395a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800396a:	2b12      	cmp	r3, #18
 800396c:	f040 8085 	bne.w	8003a7a <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003978:	2b00      	cmp	r3, #0
 800397a:	d17e      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d10c      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x470>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d105      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x470>
 800399c:	2301      	movs	r3, #1
 800399e:	e004      	b.n	80039aa <HAL_ADC_ConfigChannel+0x472>
 80039a0:	83fff000 	.word	0x83fff000
 80039a4:	50000300 	.word	0x50000300
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d150      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d010      	beq.n	80039d6 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d107      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x498>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x498>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x49a>
 80039d0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d13c      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d11d      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x4e2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e6:	d118      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80039e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039f4:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <HAL_ADC_ConfigChannel+0x55c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_ADC_ConfigChannel+0x560>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0c9a      	lsrs	r2, r3, #18
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a0a:	e002      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f9      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a18:	e02e      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b11      	cmp	r3, #17
 8003a20:	d10b      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x502>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a2a:	d106      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a36:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a38:	e01e      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b12      	cmp	r3, #18
 8003a40:	d11a      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a4c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a4e:	e013      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003a62:	e00a      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	f043 0220 	orr.w	r2, r3, #32
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003a76:	e000      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a78:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	376c      	adds	r7, #108	; 0x6c
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000000 	.word	0x20000000
 8003a98:	431bde83 	.word	0x431bde83

08003a9c <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b09d      	sub	sp, #116	; 0x74
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADCEx_InjectedConfigChannel+0x26>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e2ef      	b.n	80040a2 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d132      	bne.n	8003b40 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d124      	bne.n	8003b2c <HAL_ADCEx_InjectedConfigChannel+0x90>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d00c      	beq.n	8003b04 <HAL_ADCEx_InjectedConfigChannel+0x68>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	021a      	lsls	r2, r3, #8
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	4313      	orrs	r3, r2
 8003afc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003afe:	4313      	orrs	r3, r2
 8003b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b02:	e005      	b.n	8003b10 <HAL_ADCEx_InjectedConfigChannel+0x74>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b16:	4b9c      	ldr	r3, [pc, #624]	; (8003d88 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b20:	430b      	orrs	r3, r1
 8003b22:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b28:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003b2a:	e060      	b.n	8003bee <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003b3e:	e056      	b.n	8003bee <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d121      	bne.n	8003b8c <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d00e      	beq.n	8003b7c <HAL_ADCEx_InjectedConfigChannel+0xe0>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	1e59      	subs	r1, r3, #1
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	4319      	orrs	r1, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	430b      	orrs	r3, r1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	649a      	str	r2, [r3, #72]	; 0x48
 8003b7a:	e007      	b.n	8003b8c <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	4413      	add	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	221f      	movs	r2, #31
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	4019      	ands	r1, r3
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	3302      	adds	r3, #2
 8003bba:	fa00 f303 	lsl.w	r3, r0, r3
 8003bbe:	ea41 0203 	orr.w	r2, r1, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	1e5a      	subs	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <HAL_ADCEx_InjectedConfigChannel+0x152>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bde:	4b6a      	ldr	r3, [pc, #424]	; (8003d88 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	430b      	orrs	r3, r1
 8003bec:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d12d      	bne.n	8003c58 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	7f5b      	ldrb	r3, [r3, #29]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d110      	bne.n	8003c26 <HAL_ADCEx_InjectedConfigChannel+0x18a>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	7f9b      	ldrb	r3, [r3, #30]
 8003c12:	055a      	lsls	r2, r3, #21
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	7f1b      	ldrb	r3, [r3, #28]
 8003c18:	051b      	lsls	r3, r3, #20
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	60da      	str	r2, [r3, #12]
 8003c24:	e018      	b.n	8003c58 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	7f9b      	ldrb	r3, [r3, #30]
 8003c34:	055a      	lsls	r2, r3, #21
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	7f1b      	ldrb	r3, [r3, #28]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d108      	bne.n	8003c58 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 8110 	bne.w	8003e88 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d10c      	bne.n	8003c8a <HAL_ADCEx_InjectedConfigChannel+0x1ee>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	7f5b      	ldrb	r3, [r3, #29]
 8003c7e:	065a      	lsls	r2, r3, #25
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	60da      	str	r2, [r3, #12]
 8003c88:	e014      	b.n	8003cb4 <HAL_ADCEx_InjectedConfigChannel+0x218>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003c98:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	7f5b      	ldrb	r3, [r3, #29]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d108      	bne.n	8003cb4 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f043 0220 	orr.w	r2, r3, #32
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b09      	cmp	r3, #9
 8003cba:	d91c      	bls.n	8003cf6 <HAL_ADCEx_InjectedConfigChannel+0x25a>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6999      	ldr	r1, [r3, #24]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	3b1e      	subs	r3, #30
 8003cce:	2207      	movs	r2, #7
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	4019      	ands	r1, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6898      	ldr	r0, [r3, #8]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3b1e      	subs	r3, #30
 8003ce8:	fa00 f203 	lsl.w	r2, r0, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	619a      	str	r2, [r3, #24]
 8003cf4:	e019      	b.n	8003d2a <HAL_ADCEx_InjectedConfigChannel+0x28e>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6959      	ldr	r1, [r3, #20]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	2207      	movs	r2, #7
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	4019      	ands	r1, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6898      	ldr	r0, [r3, #8]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4413      	add	r3, r2
 8003d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	08db      	lsrs	r3, r3, #3
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d854      	bhi.n	8003df6 <HAL_ADCEx_InjectedConfigChannel+0x35a>
 8003d4c:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <HAL_ADCEx_InjectedConfigChannel+0x2b8>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003d65 	.word	0x08003d65
 8003d58:	08003d91 	.word	0x08003d91
 8003d5c:	08003db3 	.word	0x08003db3
 8003d60:	08003dd5 	.word	0x08003dd5
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	0691      	lsls	r1, r2, #26
 8003d74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d76:	430a      	orrs	r2, r1
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d82:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003d84:	e080      	b.n	8003e88 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
 8003d86:	bf00      	nop
 8003d88:	82082000 	.word	0x82082000
 8003d8c:	83fff000 	.word	0x83fff000
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d96:	4b98      	ldr	r3, [pc, #608]	; (8003ff8 <HAL_ADCEx_InjectedConfigChannel+0x55c>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	0691      	lsls	r1, r2, #26
 8003da0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003da2:	430a      	orrs	r2, r1
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003dae:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003db0:	e06a      	b.n	8003e88 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003db8:	4b8f      	ldr	r3, [pc, #572]	; (8003ff8 <HAL_ADCEx_InjectedConfigChannel+0x55c>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	0691      	lsls	r1, r2, #26
 8003dc2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003dd0:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003dd2:	e059      	b.n	8003e88 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003dda:	4b87      	ldr	r3, [pc, #540]	; (8003ff8 <HAL_ADCEx_InjectedConfigChannel+0x55c>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	0691      	lsls	r1, r2, #26
 8003de4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003de6:	430a      	orrs	r2, r1
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003df2:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003df4:	e048      	b.n	8003e88 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	069b      	lsls	r3, r3, #26
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d107      	bne.n	8003e1a <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e18:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	069b      	lsls	r3, r3, #26
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d107      	bne.n	8003e3e <HAL_ADCEx_InjectedConfigChannel+0x3a2>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e3c:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	069b      	lsls	r3, r3, #26
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d107      	bne.n	8003e62 <HAL_ADCEx_InjectedConfigChannel+0x3c6>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e60:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	069b      	lsls	r3, r3, #26
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d107      	bne.n	8003e86 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e84:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003e86:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d108      	bne.n	8003ea8 <HAL_ADCEx_InjectedConfigChannel+0x40c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADCEx_InjectedConfigChannel+0x40c>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <HAL_ADCEx_InjectedConfigChannel+0x40e>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f040 80f3 	bne.w	8004096 <HAL_ADCEx_InjectedConfigChannel+0x5fa>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d00f      	beq.n	8003ed8 <HAL_ADCEx_InjectedConfigChannel+0x43c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003ed6:	e049      	b.n	8003f6c <HAL_ADCEx_InjectedConfigChannel+0x4d0>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b09      	cmp	r3, #9
 8003ef8:	d91c      	bls.n	8003f34 <HAL_ADCEx_InjectedConfigChannel+0x498>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6999      	ldr	r1, [r3, #24]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4413      	add	r3, r2
 8003f0a:	3b1b      	subs	r3, #27
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	4019      	ands	r1, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6898      	ldr	r0, [r3, #8]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	4413      	add	r3, r2
 8003f24:	3b1b      	subs	r3, #27
 8003f26:	fa00 f203 	lsl.w	r2, r0, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	619a      	str	r2, [r3, #24]
 8003f32:	e01b      	b.n	8003f6c <HAL_ADCEx_InjectedConfigChannel+0x4d0>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6959      	ldr	r1, [r3, #20]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	4613      	mov	r3, r2
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4413      	add	r3, r2
 8003f46:	2207      	movs	r2, #7
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	4019      	ands	r1, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6898      	ldr	r0, [r3, #8]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	fa00 f203 	lsl.w	r2, r0, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f6c:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <HAL_ADCEx_InjectedConfigChannel+0x560>)
 8003f6e:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d105      	bne.n	8003f84 <HAL_ADCEx_InjectedConfigChannel+0x4e8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d013      	beq.n	8003fac <HAL_ADCEx_InjectedConfigChannel+0x510>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003f88:	2b11      	cmp	r3, #17
 8003f8a:	d105      	bne.n	8003f98 <HAL_ADCEx_InjectedConfigChannel+0x4fc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <HAL_ADCEx_InjectedConfigChannel+0x510>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003f9c:	2b12      	cmp	r3, #18
 8003f9e:	d17a      	bne.n	8004096 <HAL_ADCEx_InjectedConfigChannel+0x5fa>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d174      	bne.n	8004096 <HAL_ADCEx_InjectedConfigChannel+0x5fa>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d108      	bne.n	8003fd0 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <HAL_ADCEx_InjectedConfigChannel+0x536>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d154      	bne.n	8004080 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003fd6:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d014      	beq.n	8004006 <HAL_ADCEx_InjectedConfigChannel+0x56a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d10b      	bne.n	8004000 <HAL_ADCEx_InjectedConfigChannel+0x564>
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <HAL_ADCEx_InjectedConfigChannel+0x564>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e004      	b.n	8004002 <HAL_ADCEx_InjectedConfigChannel+0x566>
 8003ff8:	83fff000 	.word	0x83fff000
 8003ffc:	50000300 	.word	0x50000300
 8004000:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004002:	2b00      	cmp	r3, #0
 8004004:	d13c      	bne.n	8004080 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b10      	cmp	r3, #16
 800400c:	d11d      	bne.n	800404a <HAL_ADCEx_InjectedConfigChannel+0x5ae>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004016:	d118      	bne.n	800404a <HAL_ADCEx_InjectedConfigChannel+0x5ae>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004022:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <HAL_ADCEx_InjectedConfigChannel+0x614>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a22      	ldr	r2, [pc, #136]	; (80040b4 <HAL_ADCEx_InjectedConfigChannel+0x618>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0c9a      	lsrs	r2, r3, #18
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800403a:	e002      	b.n	8004042 <HAL_ADCEx_InjectedConfigChannel+0x5a6>
          {
            wait_loop_index--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3b01      	subs	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f9      	bne.n	800403c <HAL_ADCEx_InjectedConfigChannel+0x5a0>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004048:	e024      	b.n	8004094 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b11      	cmp	r3, #17
 8004050:	d10b      	bne.n	800406a <HAL_ADCEx_InjectedConfigChannel+0x5ce>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800405a:	d106      	bne.n	800406a <HAL_ADCEx_InjectedConfigChannel+0x5ce>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800405c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004066:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004068:	e014      	b.n	8004094 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b12      	cmp	r3, #18
 8004070:	d110      	bne.n	8004094 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800407a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800407c:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800407e:	e009      	b.n	8004094 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004092:	e000      	b.n	8004096 <HAL_ADCEx_InjectedConfigChannel+0x5fa>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004094:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800409e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3774      	adds	r7, #116	; 0x74
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000000 	.word	0x20000000
 80040b4:	431bde83 	.word	0x431bde83

080040b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d126      	bne.n	8004120 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d115      	bne.n	8004118 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d111      	bne.n	8004118 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f7fe fd6f 	bl	8002bfc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800411e:	e004      	b.n	800412a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
}
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f7fe fd65 	bl	8002c10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	f043 0204 	orr.w	r2, r3, #4
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7fe fd5f 	bl	8002c38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d108      	bne.n	80041b0 <ADC_Enable+0x2c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <ADC_Enable+0x2c>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <ADC_Enable+0x2e>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d143      	bne.n	800423e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4b22      	ldr	r3, [pc, #136]	; (8004248 <ADC_Enable+0xc4>)
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00d      	beq.n	80041e0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	f043 0210 	orr.w	r2, r3, #16
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d4:	f043 0201 	orr.w	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e02f      	b.n	8004240 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80041f0:	f7fe fcf8 	bl	8002be4 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80041f6:	e01b      	b.n	8004230 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041f8:	f7fe fcf4 	bl	8002be4 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d914      	bls.n	8004230 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d00d      	beq.n	8004230 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f043 0210 	orr.w	r2, r3, #16
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e007      	b.n	8004240 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d1dc      	bne.n	80041f8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	8000003f 	.word	0x8000003f

0800424c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d108      	bne.n	8004278 <ADC_Disable+0x2c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <ADC_Disable+0x2c>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <ADC_Disable+0x2e>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d047      	beq.n	800430e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 030d 	and.w	r3, r3, #13
 8004288:	2b01      	cmp	r3, #1
 800428a:	d10f      	bne.n	80042ac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0202 	orr.w	r2, r2, #2
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2203      	movs	r2, #3
 80042a2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80042a4:	f7fe fc9e 	bl	8002be4 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80042aa:	e029      	b.n	8004300 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	f043 0210 	orr.w	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e023      	b.n	8004310 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042c8:	f7fe fc8c 	bl	8002be4 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d914      	bls.n	8004300 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d10d      	bne.n	8004300 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f043 0210 	orr.w	r2, r3, #16
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	f043 0201 	orr.w	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e007      	b.n	8004310 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b01      	cmp	r3, #1
 800430c:	d0dc      	beq.n	80042c8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <__NVIC_SetPriorityGrouping+0x44>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004334:	4013      	ands	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800434a:	4a04      	ldr	r2, [pc, #16]	; (800435c <__NVIC_SetPriorityGrouping+0x44>)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	60d3      	str	r3, [r2, #12]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004364:	4b04      	ldr	r3, [pc, #16]	; (8004378 <__NVIC_GetPriorityGrouping+0x18>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	0a1b      	lsrs	r3, r3, #8
 800436a:	f003 0307 	and.w	r3, r3, #7
}
 800436e:	4618      	mov	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	2b00      	cmp	r3, #0
 800438c:	db0b      	blt.n	80043a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	f003 021f 	and.w	r2, r3, #31
 8004394:	4907      	ldr	r1, [pc, #28]	; (80043b4 <__NVIC_EnableIRQ+0x38>)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2001      	movs	r0, #1
 800439e:	fa00 f202 	lsl.w	r2, r0, r2
 80043a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	e000e100 	.word	0xe000e100

080043b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	db0a      	blt.n	80043e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	490c      	ldr	r1, [pc, #48]	; (8004404 <__NVIC_SetPriority+0x4c>)
 80043d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	440b      	add	r3, r1
 80043dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e0:	e00a      	b.n	80043f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	4908      	ldr	r1, [pc, #32]	; (8004408 <__NVIC_SetPriority+0x50>)
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	3b04      	subs	r3, #4
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	440b      	add	r3, r1
 80043f6:	761a      	strb	r2, [r3, #24]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	e000e100 	.word	0xe000e100
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800440c:	b480      	push	{r7}
 800440e:	b089      	sub	sp, #36	; 0x24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f1c3 0307 	rsb	r3, r3, #7
 8004426:	2b04      	cmp	r3, #4
 8004428:	bf28      	it	cs
 800442a:	2304      	movcs	r3, #4
 800442c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	3304      	adds	r3, #4
 8004432:	2b06      	cmp	r3, #6
 8004434:	d902      	bls.n	800443c <NVIC_EncodePriority+0x30>
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3b03      	subs	r3, #3
 800443a:	e000      	b.n	800443e <NVIC_EncodePriority+0x32>
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004440:	f04f 32ff 	mov.w	r2, #4294967295
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43da      	mvns	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	401a      	ands	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004454:	f04f 31ff 	mov.w	r1, #4294967295
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	43d9      	mvns	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004464:	4313      	orrs	r3, r2
         );
}
 8004466:	4618      	mov	r0, r3
 8004468:	3724      	adds	r7, #36	; 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3b01      	subs	r3, #1
 8004480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004484:	d301      	bcc.n	800448a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004486:	2301      	movs	r3, #1
 8004488:	e00f      	b.n	80044aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800448a:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <SysTick_Config+0x40>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004492:	210f      	movs	r1, #15
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	f7ff ff8e 	bl	80043b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <SysTick_Config+0x40>)
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044a2:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <SysTick_Config+0x40>)
 80044a4:	2207      	movs	r2, #7
 80044a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	e000e010 	.word	0xe000e010

080044b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff ff29 	bl	8004318 <__NVIC_SetPriorityGrouping>
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b086      	sub	sp, #24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	4603      	mov	r3, r0
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044e0:	f7ff ff3e 	bl	8004360 <__NVIC_GetPriorityGrouping>
 80044e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	6978      	ldr	r0, [r7, #20]
 80044ec:	f7ff ff8e 	bl	800440c <NVIC_EncodePriority>
 80044f0:	4602      	mov	r2, r0
 80044f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ff5d 	bl	80043b8 <__NVIC_SetPriority>
}
 80044fe:	bf00      	nop
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	4603      	mov	r3, r0
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ff31 	bl	800437c <__NVIC_EnableIRQ>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ffa2 	bl	8004474 <SysTick_Config>
 8004530:	4603      	mov	r3, r0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e037      	b.n	80045c0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004566:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800456a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f940 	bl	8004828 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}  
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_DMA_Start_IT+0x20>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e04a      	b.n	800467e <HAL_DMA_Start_IT+0xb6>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d13a      	bne.n	8004670 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f8d4 	bl	80047cc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 020e 	orr.w	r2, r2, #14
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e00f      	b.n	800465e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 020a 	orr.w	r2, r2, #10
 800464c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0204 	bic.w	r2, r2, #4
 800465c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e005      	b.n	800467c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004678:	2302      	movs	r3, #2
 800467a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800467c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	2204      	movs	r2, #4
 80046a4:	409a      	lsls	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d024      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x72>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01f      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d107      	bne.n	80046d6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0204 	bic.w	r2, r2, #4
 80046d4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	2104      	movs	r1, #4
 80046e0:	fa01 f202 	lsl.w	r2, r1, r2
 80046e4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d06a      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80046f6:	e065      	b.n	80047c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	2202      	movs	r2, #2
 80046fe:	409a      	lsls	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d02c      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdc>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d027      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 020a 	bic.w	r2, r2, #10
 800472e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	2102      	movs	r1, #2
 8004742:	fa01 f202 	lsl.w	r2, r1, r2
 8004746:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d035      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004760:	e030      	b.n	80047c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	2208      	movs	r2, #8
 8004768:	409a      	lsls	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d028      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x13e>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d023      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 020e 	bic.w	r2, r2, #14
 800478a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004794:	2101      	movs	r1, #1
 8004796:	fa01 f202 	lsl.w	r2, r1, r2
 800479a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
    }
  }
}  
 80047c2:	e7ff      	b.n	80047c4 <HAL_DMA_IRQHandler+0x13e>
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e2:	2101      	movs	r1, #1
 80047e4:	fa01 f202 	lsl.w	r2, r1, r2
 80047e8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d108      	bne.n	800480c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800480a:	e007      	b.n	800481c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	4b09      	ldr	r3, [pc, #36]	; (800485c <DMA_CalcBaseAndBitshift+0x34>)
 8004838:	4413      	add	r3, r2
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <DMA_CalcBaseAndBitshift+0x38>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	009a      	lsls	r2, r3, #2
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a06      	ldr	r2, [pc, #24]	; (8004864 <DMA_CalcBaseAndBitshift+0x3c>)
 800484c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	bffdfff8 	.word	0xbffdfff8
 8004860:	cccccccd 	.word	0xcccccccd
 8004864:	40020000 	.word	0x40020000

08004868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004876:	e14e      	b.n	8004b16 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	2101      	movs	r1, #1
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	4013      	ands	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 8140 	beq.w	8004b10 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b01      	cmp	r3, #1
 800489a:	d005      	beq.n	80048a8 <HAL_GPIO_Init+0x40>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d130      	bne.n	800490a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	2203      	movs	r2, #3
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4013      	ands	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048de:	2201      	movs	r2, #1
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f003 0201 	and.w	r2, r3, #1
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b03      	cmp	r3, #3
 8004914:	d017      	beq.n	8004946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	2203      	movs	r2, #3
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43db      	mvns	r3, r3
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4013      	ands	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d123      	bne.n	800499a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	08da      	lsrs	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3208      	adds	r2, #8
 800495a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	220f      	movs	r2, #15
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	08da      	lsrs	r2, r3, #3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3208      	adds	r2, #8
 8004994:	6939      	ldr	r1, [r7, #16]
 8004996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	2203      	movs	r2, #3
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4013      	ands	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 0203 	and.w	r2, r3, #3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 809a 	beq.w	8004b10 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049dc:	4b55      	ldr	r3, [pc, #340]	; (8004b34 <HAL_GPIO_Init+0x2cc>)
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	4a54      	ldr	r2, [pc, #336]	; (8004b34 <HAL_GPIO_Init+0x2cc>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6193      	str	r3, [r2, #24]
 80049e8:	4b52      	ldr	r3, [pc, #328]	; (8004b34 <HAL_GPIO_Init+0x2cc>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049f4:	4a50      	ldr	r2, [pc, #320]	; (8004b38 <HAL_GPIO_Init+0x2d0>)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	3302      	adds	r3, #2
 80049fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	220f      	movs	r2, #15
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a1e:	d013      	beq.n	8004a48 <HAL_GPIO_Init+0x1e0>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a46      	ldr	r2, [pc, #280]	; (8004b3c <HAL_GPIO_Init+0x2d4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00d      	beq.n	8004a44 <HAL_GPIO_Init+0x1dc>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a45      	ldr	r2, [pc, #276]	; (8004b40 <HAL_GPIO_Init+0x2d8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d007      	beq.n	8004a40 <HAL_GPIO_Init+0x1d8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a44      	ldr	r2, [pc, #272]	; (8004b44 <HAL_GPIO_Init+0x2dc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d101      	bne.n	8004a3c <HAL_GPIO_Init+0x1d4>
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <HAL_GPIO_Init+0x1e2>
 8004a3c:	2305      	movs	r3, #5
 8004a3e:	e004      	b.n	8004a4a <HAL_GPIO_Init+0x1e2>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e002      	b.n	8004a4a <HAL_GPIO_Init+0x1e2>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_GPIO_Init+0x1e2>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	f002 0203 	and.w	r2, r2, #3
 8004a50:	0092      	lsls	r2, r2, #2
 8004a52:	4093      	lsls	r3, r2
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a5a:	4937      	ldr	r1, [pc, #220]	; (8004b38 <HAL_GPIO_Init+0x2d0>)
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	3302      	adds	r3, #2
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a68:	4b37      	ldr	r3, [pc, #220]	; (8004b48 <HAL_GPIO_Init+0x2e0>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4013      	ands	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a8c:	4a2e      	ldr	r2, [pc, #184]	; (8004b48 <HAL_GPIO_Init+0x2e0>)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a92:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <HAL_GPIO_Init+0x2e0>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ab6:	4a24      	ldr	r2, [pc, #144]	; (8004b48 <HAL_GPIO_Init+0x2e0>)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004abc:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <HAL_GPIO_Init+0x2e0>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ae0:	4a19      	ldr	r2, [pc, #100]	; (8004b48 <HAL_GPIO_Init+0x2e0>)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ae6:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <HAL_GPIO_Init+0x2e0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4013      	ands	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004b0a:	4a0f      	ldr	r2, [pc, #60]	; (8004b48 <HAL_GPIO_Init+0x2e0>)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3301      	adds	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f47f aea9 	bne.w	8004878 <HAL_GPIO_Init+0x10>
  }
}
 8004b26:	bf00      	nop
 8004b28:	bf00      	nop
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	40021000 	.word	0x40021000
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	48000400 	.word	0x48000400
 8004b40:	48000800 	.word	0x48000800
 8004b44:	48000c00 	.word	0x48000c00
 8004b48:	40010400 	.word	0x40010400

08004b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	887b      	ldrh	r3, [r7, #2]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
 8004b68:	e001      	b.n	8004b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b8c:	787b      	ldrb	r3, [r7, #1]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b92:	887a      	ldrh	r2, [r7, #2]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b98:	e002      	b.n	8004ba0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b9a:	887a      	ldrh	r2, [r7, #2]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bbe:	887a      	ldrh	r2, [r7, #2]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	041a      	lsls	r2, r3, #16
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	43d9      	mvns	r1, r3
 8004bca:	887b      	ldrh	r3, [r7, #2]
 8004bcc:	400b      	ands	r3, r1
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	619a      	str	r2, [r3, #24]
}
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bf0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d102      	bne.n	8004c06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f001 b823 	b.w	8005c4c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 817d 	beq.w	8004f16 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c1c:	4bbc      	ldr	r3, [pc, #752]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d00c      	beq.n	8004c42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c28:	4bb9      	ldr	r3, [pc, #740]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d15c      	bne.n	8004cee <HAL_RCC_OscConfig+0x10e>
 8004c34:	4bb6      	ldr	r3, [pc, #728]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c40:	d155      	bne.n	8004cee <HAL_RCC_OscConfig+0x10e>
 8004c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004c4e:	fa93 f3a3 	rbit	r3, r3
 8004c52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5a:	fab3 f383 	clz	r3, r3
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d102      	bne.n	8004c74 <HAL_RCC_OscConfig+0x94>
 8004c6e:	4ba8      	ldr	r3, [pc, #672]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	e015      	b.n	8004ca0 <HAL_RCC_OscConfig+0xc0>
 8004c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004c90:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004c94:	fa93 f3a3 	rbit	r3, r3
 8004c98:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004c9c:	4b9c      	ldr	r3, [pc, #624]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ca4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004ca8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004cac:	fa92 f2a2 	rbit	r2, r2
 8004cb0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004cb4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004cb8:	fab2 f282 	clz	r2, r2
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	f042 0220 	orr.w	r2, r2, #32
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	f002 021f 	and.w	r2, r2, #31
 8004cc8:	2101      	movs	r1, #1
 8004cca:	fa01 f202 	lsl.w	r2, r1, r2
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 811f 	beq.w	8004f14 <HAL_RCC_OscConfig+0x334>
 8004cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f040 8116 	bne.w	8004f14 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	f000 bfaf 	b.w	8005c4c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x12e>
 8004d00:	4b83      	ldr	r3, [pc, #524]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a82      	ldr	r2, [pc, #520]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e036      	b.n	8004d7c <HAL_RCC_OscConfig+0x19c>
 8004d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCC_OscConfig+0x158>
 8004d1e:	4b7c      	ldr	r3, [pc, #496]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7b      	ldr	r2, [pc, #492]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b79      	ldr	r3, [pc, #484]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a78      	ldr	r2, [pc, #480]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e021      	b.n	8004d7c <HAL_RCC_OscConfig+0x19c>
 8004d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d48:	d10c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x184>
 8004d4a:	4b71      	ldr	r3, [pc, #452]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a70      	ldr	r2, [pc, #448]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	4b6e      	ldr	r3, [pc, #440]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a6d      	ldr	r2, [pc, #436]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	e00b      	b.n	8004d7c <HAL_RCC_OscConfig+0x19c>
 8004d64:	4b6a      	ldr	r3, [pc, #424]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a69      	ldr	r2, [pc, #420]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	4b67      	ldr	r3, [pc, #412]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a66      	ldr	r2, [pc, #408]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d7a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d7c:	4b64      	ldr	r3, [pc, #400]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	f023 020f 	bic.w	r2, r3, #15
 8004d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	495f      	ldr	r1, [pc, #380]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d059      	beq.n	8004e5a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da6:	f7fd ff1d 	bl	8002be4 <HAL_GetTick>
 8004daa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004db0:	f7fd ff18 	bl	8002be4 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b64      	cmp	r3, #100	; 0x64
 8004dbe:	d902      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	f000 bf43 	b.w	8005c4c <HAL_RCC_OscConfig+0x106c>
 8004dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004dd2:	fa93 f3a3 	rbit	r3, r3
 8004dd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004dda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dde:	fab3 f383 	clz	r3, r3
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d102      	bne.n	8004df8 <HAL_RCC_OscConfig+0x218>
 8004df2:	4b47      	ldr	r3, [pc, #284]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	e015      	b.n	8004e24 <HAL_RCC_OscConfig+0x244>
 8004df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dfc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e00:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004e04:	fa93 f3a3 	rbit	r3, r3
 8004e08:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e10:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004e14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004e18:	fa93 f3a3 	rbit	r3, r3
 8004e1c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004e20:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e28:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004e2c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004e30:	fa92 f2a2 	rbit	r2, r2
 8004e34:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004e38:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004e3c:	fab2 f282 	clz	r2, r2
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	f042 0220 	orr.w	r2, r2, #32
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	f002 021f 	and.w	r2, r2, #31
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0ab      	beq.n	8004db0 <HAL_RCC_OscConfig+0x1d0>
 8004e58:	e05d      	b.n	8004f16 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5a:	f7fd fec3 	bl	8002be4 <HAL_GetTick>
 8004e5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e62:	e00a      	b.n	8004e7a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e64:	f7fd febe 	bl	8002be4 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b64      	cmp	r3, #100	; 0x64
 8004e72:	d902      	bls.n	8004e7a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	f000 bee9 	b.w	8005c4c <HAL_RCC_OscConfig+0x106c>
 8004e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e7e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e82:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004e86:	fa93 f3a3 	rbit	r3, r3
 8004e8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004e8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d102      	bne.n	8004eac <HAL_RCC_OscConfig+0x2cc>
 8004ea6:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	e015      	b.n	8004ed8 <HAL_RCC_OscConfig+0x2f8>
 8004eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eb0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ec4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004ec8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004ecc:	fa93 f3a3 	rbit	r3, r3
 8004ed0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <HAL_RCC_OscConfig+0x330>)
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004edc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004ee0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004ee4:	fa92 f2a2 	rbit	r2, r2
 8004ee8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004eec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004ef0:	fab2 f282 	clz	r2, r2
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	f042 0220 	orr.w	r2, r2, #32
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	f002 021f 	and.w	r2, r2, #31
 8004f00:	2101      	movs	r1, #1
 8004f02:	fa01 f202 	lsl.w	r2, r1, r2
 8004f06:	4013      	ands	r3, r2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1ab      	bne.n	8004e64 <HAL_RCC_OscConfig+0x284>
 8004f0c:	e003      	b.n	8004f16 <HAL_RCC_OscConfig+0x336>
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 817d 	beq.w	8005226 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f2c:	4ba6      	ldr	r3, [pc, #664]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00b      	beq.n	8004f50 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f38:	4ba3      	ldr	r3, [pc, #652]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 030c 	and.w	r3, r3, #12
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d172      	bne.n	800502a <HAL_RCC_OscConfig+0x44a>
 8004f44:	4ba0      	ldr	r3, [pc, #640]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d16c      	bne.n	800502a <HAL_RCC_OscConfig+0x44a>
 8004f50:	2302      	movs	r3, #2
 8004f52:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004f5a:	fa93 f3a3 	rbit	r3, r3
 8004f5e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004f62:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f66:	fab3 f383 	clz	r3, r3
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d102      	bne.n	8004f80 <HAL_RCC_OscConfig+0x3a0>
 8004f7a:	4b93      	ldr	r3, [pc, #588]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	e013      	b.n	8004fa8 <HAL_RCC_OscConfig+0x3c8>
 8004f80:	2302      	movs	r3, #2
 8004f82:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f86:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004f8a:	fa93 f3a3 	rbit	r3, r3
 8004f8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004f92:	2302      	movs	r3, #2
 8004f94:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004f98:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004f9c:	fa93 f3a3 	rbit	r3, r3
 8004fa0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004fa4:	4b88      	ldr	r3, [pc, #544]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004fae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004fb2:	fa92 f2a2 	rbit	r2, r2
 8004fb6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004fba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004fbe:	fab2 f282 	clz	r2, r2
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	f042 0220 	orr.w	r2, r2, #32
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	f002 021f 	and.w	r2, r2, #31
 8004fce:	2101      	movs	r1, #1
 8004fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x410>
 8004fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d002      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f000 be2e 	b.w	8005c4c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff0:	4b75      	ldr	r3, [pc, #468]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	21f8      	movs	r1, #248	; 0xf8
 8005006:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800500e:	fa91 f1a1 	rbit	r1, r1
 8005012:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005016:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800501a:	fab1 f181 	clz	r1, r1
 800501e:	b2c9      	uxtb	r1, r1
 8005020:	408b      	lsls	r3, r1
 8005022:	4969      	ldr	r1, [pc, #420]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 8005024:	4313      	orrs	r3, r2
 8005026:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005028:	e0fd      	b.n	8005226 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800502a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 8088 	beq.w	800514c <HAL_RCC_OscConfig+0x56c>
 800503c:	2301      	movs	r3, #1
 800503e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005046:	fa93 f3a3 	rbit	r3, r3
 800504a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800504e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005052:	fab3 f383 	clz	r3, r3
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800505c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	461a      	mov	r2, r3
 8005064:	2301      	movs	r3, #1
 8005066:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fd fdbc 	bl	8002be4 <HAL_GetTick>
 800506c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005070:	e00a      	b.n	8005088 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005072:	f7fd fdb7 	bl	8002be4 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d902      	bls.n	8005088 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	f000 bde2 	b.w	8005c4c <HAL_RCC_OscConfig+0x106c>
 8005088:	2302      	movs	r3, #2
 800508a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005092:	fa93 f3a3 	rbit	r3, r3
 8005096:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800509a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509e:	fab3 f383 	clz	r3, r3
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d102      	bne.n	80050b8 <HAL_RCC_OscConfig+0x4d8>
 80050b2:	4b45      	ldr	r3, [pc, #276]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	e013      	b.n	80050e0 <HAL_RCC_OscConfig+0x500>
 80050b8:	2302      	movs	r3, #2
 80050ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80050c2:	fa93 f3a3 	rbit	r3, r3
 80050c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80050ca:	2302      	movs	r3, #2
 80050cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80050d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80050d4:	fa93 f3a3 	rbit	r3, r3
 80050d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80050dc:	4b3a      	ldr	r3, [pc, #232]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	2202      	movs	r2, #2
 80050e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80050e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80050ea:	fa92 f2a2 	rbit	r2, r2
 80050ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80050f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80050f6:	fab2 f282 	clz	r2, r2
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	f042 0220 	orr.w	r2, r2, #32
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	f002 021f 	and.w	r2, r2, #31
 8005106:	2101      	movs	r1, #1
 8005108:	fa01 f202 	lsl.w	r2, r1, r2
 800510c:	4013      	ands	r3, r2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0af      	beq.n	8005072 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005112:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800511a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	21f8      	movs	r1, #248	; 0xf8
 8005128:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005130:	fa91 f1a1 	rbit	r1, r1
 8005134:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005138:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800513c:	fab1 f181 	clz	r1, r1
 8005140:	b2c9      	uxtb	r1, r1
 8005142:	408b      	lsls	r3, r1
 8005144:	4920      	ldr	r1, [pc, #128]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 8005146:	4313      	orrs	r3, r2
 8005148:	600b      	str	r3, [r1, #0]
 800514a:	e06c      	b.n	8005226 <HAL_RCC_OscConfig+0x646>
 800514c:	2301      	movs	r3, #1
 800514e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005156:	fa93 f3a3 	rbit	r3, r3
 800515a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800515e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005162:	fab3 f383 	clz	r3, r3
 8005166:	b2db      	uxtb	r3, r3
 8005168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800516c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	461a      	mov	r2, r3
 8005174:	2300      	movs	r3, #0
 8005176:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005178:	f7fd fd34 	bl	8002be4 <HAL_GetTick>
 800517c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005180:	e00a      	b.n	8005198 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005182:	f7fd fd2f 	bl	8002be4 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d902      	bls.n	8005198 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	f000 bd5a 	b.w	8005c4c <HAL_RCC_OscConfig+0x106c>
 8005198:	2302      	movs	r3, #2
 800519a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80051a2:	fa93 f3a3 	rbit	r3, r3
 80051a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80051aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ae:	fab3 f383 	clz	r3, r3
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d104      	bne.n	80051cc <HAL_RCC_OscConfig+0x5ec>
 80051c2:	4b01      	ldr	r3, [pc, #4]	; (80051c8 <HAL_RCC_OscConfig+0x5e8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	e015      	b.n	80051f4 <HAL_RCC_OscConfig+0x614>
 80051c8:	40021000 	.word	0x40021000
 80051cc:	2302      	movs	r3, #2
 80051ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051d6:	fa93 f3a3 	rbit	r3, r3
 80051da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051de:	2302      	movs	r3, #2
 80051e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80051e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051e8:	fa93 f3a3 	rbit	r3, r3
 80051ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80051f0:	4bc8      	ldr	r3, [pc, #800]	; (8005514 <HAL_RCC_OscConfig+0x934>)
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2202      	movs	r2, #2
 80051f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80051fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80051fe:	fa92 f2a2 	rbit	r2, r2
 8005202:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005206:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800520a:	fab2 f282 	clz	r2, r2
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	f042 0220 	orr.w	r2, r2, #32
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	f002 021f 	and.w	r2, r2, #31
 800521a:	2101      	movs	r1, #1
 800521c:	fa01 f202 	lsl.w	r2, r1, r2
 8005220:	4013      	ands	r3, r2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1ad      	bne.n	8005182 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800522a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 8110 	beq.w	800545c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800523c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d079      	beq.n	8005340 <HAL_RCC_OscConfig+0x760>
 800524c:	2301      	movs	r3, #1
 800524e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005252:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005256:	fa93 f3a3 	rbit	r3, r3
 800525a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800525e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005262:	fab3 f383 	clz	r3, r3
 8005266:	b2db      	uxtb	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	4bab      	ldr	r3, [pc, #684]	; (8005518 <HAL_RCC_OscConfig+0x938>)
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	461a      	mov	r2, r3
 8005272:	2301      	movs	r3, #1
 8005274:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005276:	f7fd fcb5 	bl	8002be4 <HAL_GetTick>
 800527a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800527e:	e00a      	b.n	8005296 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005280:	f7fd fcb0 	bl	8002be4 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d902      	bls.n	8005296 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	f000 bcdb 	b.w	8005c4c <HAL_RCC_OscConfig+0x106c>
 8005296:	2302      	movs	r3, #2
 8005298:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052a0:	fa93 f3a3 	rbit	r3, r3
 80052a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80052b0:	2202      	movs	r2, #2
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	fa93 f2a3 	rbit	r2, r3
 80052c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d4:	2202      	movs	r2, #2
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	fa93 f2a3 	rbit	r2, r3
 80052e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f0:	4b88      	ldr	r3, [pc, #544]	; (8005514 <HAL_RCC_OscConfig+0x934>)
 80052f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052fc:	2102      	movs	r1, #2
 80052fe:	6019      	str	r1, [r3, #0]
 8005300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005304:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	fa93 f1a3 	rbit	r1, r3
 800530e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005312:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005316:	6019      	str	r1, [r3, #0]
  return result;
 8005318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	fab3 f383 	clz	r3, r3
 8005326:	b2db      	uxtb	r3, r3
 8005328:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2101      	movs	r1, #1
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0a0      	beq.n	8005280 <HAL_RCC_OscConfig+0x6a0>
 800533e:	e08d      	b.n	800545c <HAL_RCC_OscConfig+0x87c>
 8005340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005344:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005348:	2201      	movs	r2, #1
 800534a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005350:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	fa93 f2a3 	rbit	r2, r3
 800535a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005362:	601a      	str	r2, [r3, #0]
  return result;
 8005364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005368:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800536c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800536e:	fab3 f383 	clz	r3, r3
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	4b68      	ldr	r3, [pc, #416]	; (8005518 <HAL_RCC_OscConfig+0x938>)
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	461a      	mov	r2, r3
 800537e:	2300      	movs	r3, #0
 8005380:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005382:	f7fd fc2f 	bl	8002be4 <HAL_GetTick>
 8005386:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800538a:	e00a      	b.n	80053a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800538c:	f7fd fc2a 	bl	8002be4 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d902      	bls.n	80053a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	f000 bc55 	b.w	8005c4c <HAL_RCC_OscConfig+0x106c>
 80053a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80053aa:	2202      	movs	r2, #2
 80053ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	fa93 f2a3 	rbit	r2, r3
 80053bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053ce:	2202      	movs	r2, #2
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	fa93 f2a3 	rbit	r2, r3
 80053e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f2:	2202      	movs	r2, #2
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	fa93 f2a3 	rbit	r2, r3
 8005404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005408:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800540c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800540e:	4b41      	ldr	r3, [pc, #260]	; (8005514 <HAL_RCC_OscConfig+0x934>)
 8005410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005416:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800541a:	2102      	movs	r1, #2
 800541c:	6019      	str	r1, [r3, #0]
 800541e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005422:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	fa93 f1a3 	rbit	r1, r3
 800542c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005430:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005434:	6019      	str	r1, [r3, #0]
  return result;
 8005436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800543a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	fab3 f383 	clz	r3, r3
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	2101      	movs	r1, #1
 8005452:	fa01 f303 	lsl.w	r3, r1, r3
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d197      	bne.n	800538c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800545c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005460:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 81a1 	beq.w	80057b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005472:	2300      	movs	r3, #0
 8005474:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005478:	4b26      	ldr	r3, [pc, #152]	; (8005514 <HAL_RCC_OscConfig+0x934>)
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d116      	bne.n	80054b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005484:	4b23      	ldr	r3, [pc, #140]	; (8005514 <HAL_RCC_OscConfig+0x934>)
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <HAL_RCC_OscConfig+0x934>)
 800548a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548e:	61d3      	str	r3, [r2, #28]
 8005490:	4b20      	ldr	r3, [pc, #128]	; (8005514 <HAL_RCC_OscConfig+0x934>)
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800549c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80054aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b2:	4b1a      	ldr	r3, [pc, #104]	; (800551c <HAL_RCC_OscConfig+0x93c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11a      	bne.n	80054f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054be:	4b17      	ldr	r3, [pc, #92]	; (800551c <HAL_RCC_OscConfig+0x93c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a16      	ldr	r2, [pc, #88]	; (800551c <HAL_RCC_OscConfig+0x93c>)
 80054c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ca:	f7fd fb8b 	bl	8002be4 <HAL_GetTick>
 80054ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d2:	e009      	b.n	80054e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d4:	f7fd fb86 	bl	8002be4 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b64      	cmp	r3, #100	; 0x64
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e3b1      	b.n	8005c4c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e8:	4b0c      	ldr	r3, [pc, #48]	; (800551c <HAL_RCC_OscConfig+0x93c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ef      	beq.n	80054d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d10d      	bne.n	8005520 <HAL_RCC_OscConfig+0x940>
 8005504:	4b03      	ldr	r3, [pc, #12]	; (8005514 <HAL_RCC_OscConfig+0x934>)
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	4a02      	ldr	r2, [pc, #8]	; (8005514 <HAL_RCC_OscConfig+0x934>)
 800550a:	f043 0301 	orr.w	r3, r3, #1
 800550e:	6213      	str	r3, [r2, #32]
 8005510:	e03c      	b.n	800558c <HAL_RCC_OscConfig+0x9ac>
 8005512:	bf00      	nop
 8005514:	40021000 	.word	0x40021000
 8005518:	10908120 	.word	0x10908120
 800551c:	40007000 	.word	0x40007000
 8005520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005524:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10c      	bne.n	800554a <HAL_RCC_OscConfig+0x96a>
 8005530:	4bc1      	ldr	r3, [pc, #772]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	4ac0      	ldr	r2, [pc, #768]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	6213      	str	r3, [r2, #32]
 800553c:	4bbe      	ldr	r3, [pc, #760]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	4abd      	ldr	r2, [pc, #756]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 8005542:	f023 0304 	bic.w	r3, r3, #4
 8005546:	6213      	str	r3, [r2, #32]
 8005548:	e020      	b.n	800558c <HAL_RCC_OscConfig+0x9ac>
 800554a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b05      	cmp	r3, #5
 8005558:	d10c      	bne.n	8005574 <HAL_RCC_OscConfig+0x994>
 800555a:	4bb7      	ldr	r3, [pc, #732]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	4ab6      	ldr	r2, [pc, #728]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 8005560:	f043 0304 	orr.w	r3, r3, #4
 8005564:	6213      	str	r3, [r2, #32]
 8005566:	4bb4      	ldr	r3, [pc, #720]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	4ab3      	ldr	r2, [pc, #716]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 800556c:	f043 0301 	orr.w	r3, r3, #1
 8005570:	6213      	str	r3, [r2, #32]
 8005572:	e00b      	b.n	800558c <HAL_RCC_OscConfig+0x9ac>
 8005574:	4bb0      	ldr	r3, [pc, #704]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	4aaf      	ldr	r2, [pc, #700]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	6213      	str	r3, [r2, #32]
 8005580:	4bad      	ldr	r3, [pc, #692]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	4aac      	ldr	r2, [pc, #688]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 8005586:	f023 0304 	bic.w	r3, r3, #4
 800558a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800558c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8081 	beq.w	80056a0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800559e:	f7fd fb21 	bl	8002be4 <HAL_GetTick>
 80055a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a6:	e00b      	b.n	80055c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a8:	f7fd fb1c 	bl	8002be4 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e345      	b.n	8005c4c <HAL_RCC_OscConfig+0x106c>
 80055c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80055c8:	2202      	movs	r2, #2
 80055ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	fa93 f2a3 	rbit	r2, r3
 80055da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80055ec:	2202      	movs	r2, #2
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	fa93 f2a3 	rbit	r2, r3
 80055fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005602:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005606:	601a      	str	r2, [r3, #0]
  return result;
 8005608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800560c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005610:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005612:	fab3 f383 	clz	r3, r3
 8005616:	b2db      	uxtb	r3, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f043 0302 	orr.w	r3, r3, #2
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d102      	bne.n	800562c <HAL_RCC_OscConfig+0xa4c>
 8005626:	4b84      	ldr	r3, [pc, #528]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	e013      	b.n	8005654 <HAL_RCC_OscConfig+0xa74>
 800562c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005630:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005634:	2202      	movs	r2, #2
 8005636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	fa93 f2a3 	rbit	r2, r3
 8005646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800564a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	4b79      	ldr	r3, [pc, #484]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005658:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800565c:	2102      	movs	r1, #2
 800565e:	6011      	str	r1, [r2, #0]
 8005660:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005664:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	fa92 f1a2 	rbit	r1, r2
 800566e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005672:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005676:	6011      	str	r1, [r2, #0]
  return result;
 8005678:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800567c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	fab2 f282 	clz	r2, r2
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	f002 021f 	and.w	r2, r2, #31
 8005692:	2101      	movs	r1, #1
 8005694:	fa01 f202 	lsl.w	r2, r1, r2
 8005698:	4013      	ands	r3, r2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d084      	beq.n	80055a8 <HAL_RCC_OscConfig+0x9c8>
 800569e:	e07f      	b.n	80057a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a0:	f7fd faa0 	bl	8002be4 <HAL_GetTick>
 80056a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a8:	e00b      	b.n	80056c2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fd fa9b 	bl	8002be4 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e2c4      	b.n	8005c4c <HAL_RCC_OscConfig+0x106c>
 80056c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80056ca:	2202      	movs	r2, #2
 80056cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	fa93 f2a3 	rbit	r2, r3
 80056dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80056ee:	2202      	movs	r2, #2
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	fa93 f2a3 	rbit	r2, r3
 8005700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005704:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005708:	601a      	str	r2, [r3, #0]
  return result;
 800570a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800570e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005712:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005714:	fab3 f383 	clz	r3, r3
 8005718:	b2db      	uxtb	r3, r3
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f043 0302 	orr.w	r3, r3, #2
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d102      	bne.n	800572e <HAL_RCC_OscConfig+0xb4e>
 8005728:	4b43      	ldr	r3, [pc, #268]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	e013      	b.n	8005756 <HAL_RCC_OscConfig+0xb76>
 800572e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005732:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005736:	2202      	movs	r2, #2
 8005738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	fa93 f2a3 	rbit	r2, r3
 8005748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	4b39      	ldr	r3, [pc, #228]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800575a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800575e:	2102      	movs	r1, #2
 8005760:	6011      	str	r1, [r2, #0]
 8005762:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005766:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	fa92 f1a2 	rbit	r1, r2
 8005770:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005774:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005778:	6011      	str	r1, [r2, #0]
  return result;
 800577a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800577e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	fab2 f282 	clz	r2, r2
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	f002 021f 	and.w	r2, r2, #31
 8005794:	2101      	movs	r1, #1
 8005796:	fa01 f202 	lsl.w	r2, r1, r2
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d184      	bne.n	80056aa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d105      	bne.n	80057b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a8:	4b23      	ldr	r3, [pc, #140]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	4a22      	ldr	r2, [pc, #136]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 80057ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8242 	beq.w	8005c4a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057c6:	4b1c      	ldr	r3, [pc, #112]	; (8005838 <HAL_RCC_OscConfig+0xc58>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	f000 8213 	beq.w	8005bfa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	f040 8162 	bne.w	8005aaa <HAL_RCC_OscConfig+0xeca>
 80057e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80057ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	fa93 f2a3 	rbit	r2, r3
 8005802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005806:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800580a:	601a      	str	r2, [r3, #0]
  return result;
 800580c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005810:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005814:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005816:	fab3 f383 	clz	r3, r3
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005820:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	461a      	mov	r2, r3
 8005828:	2300      	movs	r3, #0
 800582a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582c:	f7fd f9da 	bl	8002be4 <HAL_GetTick>
 8005830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005834:	e00c      	b.n	8005850 <HAL_RCC_OscConfig+0xc70>
 8005836:	bf00      	nop
 8005838:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583c:	f7fd f9d2 	bl	8002be4 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e1fd      	b.n	8005c4c <HAL_RCC_OscConfig+0x106c>
 8005850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005854:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800585c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005862:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	fa93 f2a3 	rbit	r2, r3
 800586c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005870:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005874:	601a      	str	r2, [r3, #0]
  return result;
 8005876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800587e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005880:	fab3 f383 	clz	r3, r3
 8005884:	b2db      	uxtb	r3, r3
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	b2db      	uxtb	r3, r3
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	d102      	bne.n	800589a <HAL_RCC_OscConfig+0xcba>
 8005894:	4bb0      	ldr	r3, [pc, #704]	; (8005b58 <HAL_RCC_OscConfig+0xf78>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	e027      	b.n	80058ea <HAL_RCC_OscConfig+0xd0a>
 800589a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800589e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80058a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	fa93 f2a3 	rbit	r2, r3
 80058b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80058c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	fa93 f2a3 	rbit	r2, r3
 80058dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	4b9c      	ldr	r3, [pc, #624]	; (8005b58 <HAL_RCC_OscConfig+0xf78>)
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058ee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80058f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058f6:	6011      	str	r1, [r2, #0]
 80058f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058fc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	fa92 f1a2 	rbit	r1, r2
 8005906:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800590a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800590e:	6011      	str	r1, [r2, #0]
  return result;
 8005910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005914:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	fab2 f282 	clz	r2, r2
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	f042 0220 	orr.w	r2, r2, #32
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	f002 021f 	and.w	r2, r2, #31
 800592a:	2101      	movs	r1, #1
 800592c:	fa01 f202 	lsl.w	r2, r1, r2
 8005930:	4013      	ands	r3, r2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d182      	bne.n	800583c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005936:	4b88      	ldr	r3, [pc, #544]	; (8005b58 <HAL_RCC_OscConfig+0xf78>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800593e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800594a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800594e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	430b      	orrs	r3, r1
 8005958:	497f      	ldr	r1, [pc, #508]	; (8005b58 <HAL_RCC_OscConfig+0xf78>)
 800595a:	4313      	orrs	r3, r2
 800595c:	604b      	str	r3, [r1, #4]
 800595e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005962:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005966:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800596a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005970:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	fa93 f2a3 	rbit	r2, r3
 800597a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800597e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005982:	601a      	str	r2, [r3, #0]
  return result;
 8005984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005988:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800598c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800598e:	fab3 f383 	clz	r3, r3
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005998:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	461a      	mov	r2, r3
 80059a0:	2301      	movs	r3, #1
 80059a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a4:	f7fd f91e 	bl	8002be4 <HAL_GetTick>
 80059a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059ac:	e009      	b.n	80059c2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ae:	f7fd f919 	bl	8002be4 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e144      	b.n	8005c4c <HAL_RCC_OscConfig+0x106c>
 80059c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80059ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	fa93 f2a3 	rbit	r2, r3
 80059de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059e2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80059e6:	601a      	str	r2, [r3, #0]
  return result;
 80059e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80059f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059f2:	fab3 f383 	clz	r3, r3
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d102      	bne.n	8005a0c <HAL_RCC_OscConfig+0xe2c>
 8005a06:	4b54      	ldr	r3, [pc, #336]	; (8005b58 <HAL_RCC_OscConfig+0xf78>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	e027      	b.n	8005a5c <HAL_RCC_OscConfig+0xe7c>
 8005a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a1e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	fa93 f2a3 	rbit	r2, r3
 8005a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a2c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a36:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a44:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	fa93 f2a3 	rbit	r2, r3
 8005a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a52:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	4b3f      	ldr	r3, [pc, #252]	; (8005b58 <HAL_RCC_OscConfig+0xf78>)
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a60:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005a64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a68:	6011      	str	r1, [r2, #0]
 8005a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a6e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	fa92 f1a2 	rbit	r1, r2
 8005a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a7c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005a80:	6011      	str	r1, [r2, #0]
  return result;
 8005a82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a86:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	fab2 f282 	clz	r2, r2
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	f042 0220 	orr.w	r2, r2, #32
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	f002 021f 	and.w	r2, r2, #31
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d082      	beq.n	80059ae <HAL_RCC_OscConfig+0xdce>
 8005aa8:	e0cf      	b.n	8005c4a <HAL_RCC_OscConfig+0x106a>
 8005aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005ab2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005abc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	fa93 f2a3 	rbit	r2, r3
 8005ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005ace:	601a      	str	r2, [r3, #0]
  return result;
 8005ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005ad8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ada:	fab3 f383 	clz	r3, r3
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ae4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	461a      	mov	r2, r3
 8005aec:	2300      	movs	r3, #0
 8005aee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af0:	f7fd f878 	bl	8002be4 <HAL_GetTick>
 8005af4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af8:	e009      	b.n	8005b0e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005afa:	f7fd f873 	bl	8002be4 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e09e      	b.n	8005c4c <HAL_RCC_OscConfig+0x106c>
 8005b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b12:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005b16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b20:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	fa93 f2a3 	rbit	r2, r3
 8005b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b32:	601a      	str	r2, [r3, #0]
  return result;
 8005b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b3e:	fab3 f383 	clz	r3, r3
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f043 0301 	orr.w	r3, r3, #1
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d104      	bne.n	8005b5c <HAL_RCC_OscConfig+0xf7c>
 8005b52:	4b01      	ldr	r3, [pc, #4]	; (8005b58 <HAL_RCC_OscConfig+0xf78>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	e029      	b.n	8005bac <HAL_RCC_OscConfig+0xfcc>
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b6e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	fa93 f2a3 	rbit	r2, r3
 8005b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b94:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	fa93 f2a3 	rbit	r2, r3
 8005b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	4b2b      	ldr	r3, [pc, #172]	; (8005c58 <HAL_RCC_OscConfig+0x1078>)
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bb0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005bb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005bb8:	6011      	str	r1, [r2, #0]
 8005bba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bbe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	fa92 f1a2 	rbit	r1, r2
 8005bc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bcc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005bd0:	6011      	str	r1, [r2, #0]
  return result;
 8005bd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bd6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	fab2 f282 	clz	r2, r2
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	f042 0220 	orr.w	r2, r2, #32
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	f002 021f 	and.w	r2, r2, #31
 8005bec:	2101      	movs	r1, #1
 8005bee:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d180      	bne.n	8005afa <HAL_RCC_OscConfig+0xf1a>
 8005bf8:	e027      	b.n	8005c4a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e01e      	b.n	8005c4c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c0e:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <HAL_RCC_OscConfig+0x1078>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005c1a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d10b      	bne.n	8005c46 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005c2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005c32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d001      	beq.n	8005c4a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40021000 	.word	0x40021000

08005c5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b09e      	sub	sp, #120	; 0x78
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e162      	b.n	8005f3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c74:	4b90      	ldr	r3, [pc, #576]	; (8005eb8 <HAL_RCC_ClockConfig+0x25c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d910      	bls.n	8005ca4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c82:	4b8d      	ldr	r3, [pc, #564]	; (8005eb8 <HAL_RCC_ClockConfig+0x25c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f023 0207 	bic.w	r2, r3, #7
 8005c8a:	498b      	ldr	r1, [pc, #556]	; (8005eb8 <HAL_RCC_ClockConfig+0x25c>)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c92:	4b89      	ldr	r3, [pc, #548]	; (8005eb8 <HAL_RCC_ClockConfig+0x25c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d001      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e14a      	b.n	8005f3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb0:	4b82      	ldr	r3, [pc, #520]	; (8005ebc <HAL_RCC_ClockConfig+0x260>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	497f      	ldr	r1, [pc, #508]	; (8005ebc <HAL_RCC_ClockConfig+0x260>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 80dc 	beq.w	8005e88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d13c      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xf6>
 8005cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cdc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ce0:	fa93 f3a3 	rbit	r3, r3
 8005ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce8:	fab3 f383 	clz	r3, r3
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	f043 0301 	orr.w	r3, r3, #1
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d102      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xa6>
 8005cfc:	4b6f      	ldr	r3, [pc, #444]	; (8005ebc <HAL_RCC_ClockConfig+0x260>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	e00f      	b.n	8005d22 <HAL_RCC_ClockConfig+0xc6>
 8005d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d0a:	fa93 f3a3 	rbit	r3, r3
 8005d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8005d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d14:	663b      	str	r3, [r7, #96]	; 0x60
 8005d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d18:	fa93 f3a3 	rbit	r3, r3
 8005d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d1e:	4b67      	ldr	r3, [pc, #412]	; (8005ebc <HAL_RCC_ClockConfig+0x260>)
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d26:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d2a:	fa92 f2a2 	rbit	r2, r2
 8005d2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005d30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d32:	fab2 f282 	clz	r2, r2
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	f042 0220 	orr.w	r2, r2, #32
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	f002 021f 	and.w	r2, r2, #31
 8005d42:	2101      	movs	r1, #1
 8005d44:	fa01 f202 	lsl.w	r2, r1, r2
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d17b      	bne.n	8005e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e0f3      	b.n	8005f3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d13c      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0x178>
 8005d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d62:	fa93 f3a3 	rbit	r3, r3
 8005d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6a:	fab3 f383 	clz	r3, r3
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d102      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x128>
 8005d7e:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <HAL_RCC_ClockConfig+0x260>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	e00f      	b.n	8005da4 <HAL_RCC_ClockConfig+0x148>
 8005d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8c:	fa93 f3a3 	rbit	r3, r3
 8005d90:	647b      	str	r3, [r7, #68]	; 0x44
 8005d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d96:	643b      	str	r3, [r7, #64]	; 0x40
 8005d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9a:	fa93 f3a3 	rbit	r3, r3
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005da0:	4b46      	ldr	r3, [pc, #280]	; (8005ebc <HAL_RCC_ClockConfig+0x260>)
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005da8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dac:	fa92 f2a2 	rbit	r2, r2
 8005db0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005db4:	fab2 f282 	clz	r2, r2
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	f042 0220 	orr.w	r2, r2, #32
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	f002 021f 	and.w	r2, r2, #31
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d13a      	bne.n	8005e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e0b2      	b.n	8005f3a <HAL_RCC_ClockConfig+0x2de>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	fa93 f3a3 	rbit	r3, r3
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de2:	fab3 f383 	clz	r3, r3
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f043 0301 	orr.w	r3, r3, #1
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d102      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x1a0>
 8005df6:	4b31      	ldr	r3, [pc, #196]	; (8005ebc <HAL_RCC_ClockConfig+0x260>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	e00d      	b.n	8005e18 <HAL_RCC_ClockConfig+0x1bc>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	fa93 f3a3 	rbit	r3, r3
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
 8005e08:	2302      	movs	r3, #2
 8005e0a:	623b      	str	r3, [r7, #32]
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	fa93 f3a3 	rbit	r3, r3
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	4b29      	ldr	r3, [pc, #164]	; (8005ebc <HAL_RCC_ClockConfig+0x260>)
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	2202      	movs	r2, #2
 8005e1a:	61ba      	str	r2, [r7, #24]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	fa92 f2a2 	rbit	r2, r2
 8005e22:	617a      	str	r2, [r7, #20]
  return result;
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	fab2 f282 	clz	r2, r2
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	f042 0220 	orr.w	r2, r2, #32
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	f002 021f 	and.w	r2, r2, #31
 8005e36:	2101      	movs	r1, #1
 8005e38:	fa01 f202 	lsl.w	r2, r1, r2
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e079      	b.n	8005f3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e46:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <HAL_RCC_ClockConfig+0x260>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f023 0203 	bic.w	r2, r3, #3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	491a      	ldr	r1, [pc, #104]	; (8005ebc <HAL_RCC_ClockConfig+0x260>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e58:	f7fc fec4 	bl	8002be4 <HAL_GetTick>
 8005e5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e60:	f7fc fec0 	bl	8002be4 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e061      	b.n	8005f3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e76:	4b11      	ldr	r3, [pc, #68]	; (8005ebc <HAL_RCC_ClockConfig+0x260>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f003 020c 	and.w	r2, r3, #12
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d1eb      	bne.n	8005e60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e88:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <HAL_RCC_ClockConfig+0x25c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d214      	bcs.n	8005ec0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e96:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <HAL_RCC_ClockConfig+0x25c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 0207 	bic.w	r2, r3, #7
 8005e9e:	4906      	ldr	r1, [pc, #24]	; (8005eb8 <HAL_RCC_ClockConfig+0x25c>)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea6:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <HAL_RCC_ClockConfig+0x25c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d005      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e040      	b.n	8005f3a <HAL_RCC_ClockConfig+0x2de>
 8005eb8:	40022000 	.word	0x40022000
 8005ebc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <HAL_RCC_ClockConfig+0x2e8>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	491a      	ldr	r1, [pc, #104]	; (8005f44 <HAL_RCC_ClockConfig+0x2e8>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eea:	4b16      	ldr	r3, [pc, #88]	; (8005f44 <HAL_RCC_ClockConfig+0x2e8>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4912      	ldr	r1, [pc, #72]	; (8005f44 <HAL_RCC_ClockConfig+0x2e8>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005efe:	f000 f829 	bl	8005f54 <HAL_RCC_GetSysClockFreq>
 8005f02:	4601      	mov	r1, r0
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <HAL_RCC_ClockConfig+0x2e8>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f0c:	22f0      	movs	r2, #240	; 0xf0
 8005f0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	fa92 f2a2 	rbit	r2, r2
 8005f16:	60fa      	str	r2, [r7, #12]
  return result;
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	fab2 f282 	clz	r2, r2
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	40d3      	lsrs	r3, r2
 8005f22:	4a09      	ldr	r2, [pc, #36]	; (8005f48 <HAL_RCC_ClockConfig+0x2ec>)
 8005f24:	5cd3      	ldrb	r3, [r2, r3]
 8005f26:	fa21 f303 	lsr.w	r3, r1, r3
 8005f2a:	4a08      	ldr	r2, [pc, #32]	; (8005f4c <HAL_RCC_ClockConfig+0x2f0>)
 8005f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <HAL_RCC_ClockConfig+0x2f4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fc fe12 	bl	8002b5c <HAL_InitTick>
  
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3778      	adds	r7, #120	; 0x78
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40021000 	.word	0x40021000
 8005f48:	0800906c 	.word	0x0800906c
 8005f4c:	20000000 	.word	0x20000000
 8005f50:	20000004 	.word	0x20000004

08005f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b08b      	sub	sp, #44	; 0x2c
 8005f58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	2300      	movs	r3, #0
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005f6e:	4b29      	ldr	r3, [pc, #164]	; (8006014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f003 030c 	and.w	r3, r3, #12
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d002      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0x30>
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d003      	beq.n	8005f8a <HAL_RCC_GetSysClockFreq+0x36>
 8005f82:	e03c      	b.n	8005ffe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f84:	4b24      	ldr	r3, [pc, #144]	; (8006018 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f86:	623b      	str	r3, [r7, #32]
      break;
 8005f88:	e03c      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005f90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005f94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	fa92 f2a2 	rbit	r2, r2
 8005f9c:	607a      	str	r2, [r7, #4]
  return result;
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	fab2 f282 	clz	r2, r2
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	40d3      	lsrs	r3, r2
 8005fa8:	4a1c      	ldr	r2, [pc, #112]	; (800601c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005faa:	5cd3      	ldrb	r3, [r2, r3]
 8005fac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005fae:	4b19      	ldr	r3, [pc, #100]	; (8006014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	220f      	movs	r2, #15
 8005fb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	fa92 f2a2 	rbit	r2, r2
 8005fc0:	60fa      	str	r2, [r7, #12]
  return result;
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	fab2 f282 	clz	r2, r2
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	40d3      	lsrs	r3, r2
 8005fcc:	4a14      	ldr	r2, [pc, #80]	; (8006020 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005fce:	5cd3      	ldrb	r3, [r2, r3]
 8005fd0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005fdc:	4a0e      	ldr	r2, [pc, #56]	; (8006018 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	fb02 f303 	mul.w	r3, r2, r3
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
 8005fec:	e004      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	4a0c      	ldr	r2, [pc, #48]	; (8006024 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	623b      	str	r3, [r7, #32]
      break;
 8005ffc:	e002      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006000:	623b      	str	r3, [r7, #32]
      break;
 8006002:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006004:	6a3b      	ldr	r3, [r7, #32]
}
 8006006:	4618      	mov	r0, r3
 8006008:	372c      	adds	r7, #44	; 0x2c
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40021000 	.word	0x40021000
 8006018:	007a1200 	.word	0x007a1200
 800601c:	08009084 	.word	0x08009084
 8006020:	08009094 	.word	0x08009094
 8006024:	003d0900 	.word	0x003d0900

08006028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800602c:	4b03      	ldr	r3, [pc, #12]	; (800603c <HAL_RCC_GetHCLKFreq+0x14>)
 800602e:	681b      	ldr	r3, [r3, #0]
}
 8006030:	4618      	mov	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	20000000 	.word	0x20000000

08006040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006046:	f7ff ffef 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 800604a:	4601      	mov	r1, r0
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006054:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006058:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	fa92 f2a2 	rbit	r2, r2
 8006060:	603a      	str	r2, [r7, #0]
  return result;
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	fab2 f282 	clz	r2, r2
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	40d3      	lsrs	r3, r2
 800606c:	4a04      	ldr	r2, [pc, #16]	; (8006080 <HAL_RCC_GetPCLK1Freq+0x40>)
 800606e:	5cd3      	ldrb	r3, [r2, r3]
 8006070:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40021000 	.word	0x40021000
 8006080:	0800907c 	.word	0x0800907c

08006084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800608a:	f7ff ffcd 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 800608e:	4601      	mov	r1, r0
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006098:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800609c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	fa92 f2a2 	rbit	r2, r2
 80060a4:	603a      	str	r2, [r7, #0]
  return result;
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	fab2 f282 	clz	r2, r2
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	40d3      	lsrs	r3, r2
 80060b0:	4a04      	ldr	r2, [pc, #16]	; (80060c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80060b2:	5cd3      	ldrb	r3, [r2, r3]
 80060b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	0800907c 	.word	0x0800907c

080060c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b092      	sub	sp, #72	; 0x48
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80060d8:	2300      	movs	r3, #0
 80060da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80d4 	beq.w	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ec:	4b4e      	ldr	r3, [pc, #312]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10e      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060f8:	4b4b      	ldr	r3, [pc, #300]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	4a4a      	ldr	r2, [pc, #296]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006102:	61d3      	str	r3, [r2, #28]
 8006104:	4b48      	ldr	r3, [pc, #288]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006116:	4b45      	ldr	r3, [pc, #276]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611e:	2b00      	cmp	r3, #0
 8006120:	d118      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006122:	4b42      	ldr	r3, [pc, #264]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a41      	ldr	r2, [pc, #260]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800612e:	f7fc fd59 	bl	8002be4 <HAL_GetTick>
 8006132:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006134:	e008      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006136:	f7fc fd55 	bl	8002be4 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b64      	cmp	r3, #100	; 0x64
 8006142:	d901      	bls.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e14b      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006148:	4b38      	ldr	r3, [pc, #224]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0f0      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006154:	4b34      	ldr	r3, [pc, #208]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800615c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800615e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8084 	beq.w	800626e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006170:	429a      	cmp	r2, r3
 8006172:	d07c      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006174:	4b2c      	ldr	r3, [pc, #176]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006182:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	fa93 f3a3 	rbit	r3, r3
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800618e:	fab3 f383 	clz	r3, r3
 8006192:	b2db      	uxtb	r3, r3
 8006194:	461a      	mov	r2, r3
 8006196:	4b26      	ldr	r3, [pc, #152]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	461a      	mov	r2, r3
 800619e:	2301      	movs	r3, #1
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	fa93 f3a3 	rbit	r3, r3
 80061ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80061b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061b2:	fab3 f383 	clz	r3, r3
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	461a      	mov	r2, r3
 80061c2:	2300      	movs	r3, #0
 80061c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061c6:	4a18      	ldr	r2, [pc, #96]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d04b      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d6:	f7fc fd05 	bl	8002be4 <HAL_GetTick>
 80061da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061dc:	e00a      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061de:	f7fc fd01 	bl	8002be4 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e0f5      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80061f4:	2302      	movs	r3, #2
 80061f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	fa93 f3a3 	rbit	r3, r3
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006200:	2302      	movs	r3, #2
 8006202:	623b      	str	r3, [r7, #32]
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	fa93 f3a3 	rbit	r3, r3
 800620a:	61fb      	str	r3, [r7, #28]
  return result;
 800620c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800620e:	fab3 f383 	clz	r3, r3
 8006212:	b2db      	uxtb	r3, r3
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f043 0302 	orr.w	r3, r3, #2
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d108      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006222:	4b01      	ldr	r3, [pc, #4]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	e00d      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006228:	40021000 	.word	0x40021000
 800622c:	40007000 	.word	0x40007000
 8006230:	10908100 	.word	0x10908100
 8006234:	2302      	movs	r3, #2
 8006236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	fa93 f3a3 	rbit	r3, r3
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	4b69      	ldr	r3, [pc, #420]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	2202      	movs	r2, #2
 8006246:	613a      	str	r2, [r7, #16]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	fa92 f2a2 	rbit	r2, r2
 800624e:	60fa      	str	r2, [r7, #12]
  return result;
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	fab2 f282 	clz	r2, r2
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	f002 021f 	and.w	r2, r2, #31
 8006262:	2101      	movs	r1, #1
 8006264:	fa01 f202 	lsl.w	r2, r1, r2
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0b7      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800626e:	4b5e      	ldr	r3, [pc, #376]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	495b      	ldr	r1, [pc, #364]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800627c:	4313      	orrs	r3, r2
 800627e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006280:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006284:	2b01      	cmp	r3, #1
 8006286:	d105      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006288:	4b57      	ldr	r3, [pc, #348]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	4a56      	ldr	r2, [pc, #344]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800628e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006292:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062a0:	4b51      	ldr	r3, [pc, #324]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	f023 0203 	bic.w	r2, r3, #3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	494e      	ldr	r1, [pc, #312]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d008      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062be:	4b4a      	ldr	r3, [pc, #296]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	f023 0210 	bic.w	r2, r3, #16
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	4947      	ldr	r1, [pc, #284]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80062dc:	4b42      	ldr	r3, [pc, #264]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	493f      	ldr	r1, [pc, #252]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062fa:	4b3b      	ldr	r3, [pc, #236]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	f023 0220 	bic.w	r2, r3, #32
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	4938      	ldr	r1, [pc, #224]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006308:	4313      	orrs	r3, r2
 800630a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006318:	4b33      	ldr	r3, [pc, #204]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	4930      	ldr	r1, [pc, #192]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006326:	4313      	orrs	r3, r2
 8006328:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006332:	2b00      	cmp	r3, #0
 8006334:	d008      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006336:	4b2c      	ldr	r3, [pc, #176]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	4929      	ldr	r1, [pc, #164]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006344:	4313      	orrs	r3, r2
 8006346:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006354:	4b24      	ldr	r3, [pc, #144]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	4921      	ldr	r1, [pc, #132]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006362:	4313      	orrs	r3, r2
 8006364:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d008      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006372:	4b1d      	ldr	r3, [pc, #116]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	491a      	ldr	r1, [pc, #104]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006380:	4313      	orrs	r3, r2
 8006382:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006390:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	4912      	ldr	r1, [pc, #72]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d008      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80063ae:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	490b      	ldr	r1, [pc, #44]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80063cc:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	4903      	ldr	r1, [pc, #12]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3748      	adds	r7, #72	; 0x48
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40021000 	.word	0x40021000

080063ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d001      	beq.n	8006404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e03b      	b.n	800647c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a19      	ldr	r2, [pc, #100]	; (8006488 <HAL_TIM_Base_Start_IT+0x9c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d009      	beq.n	800643a <HAL_TIM_Base_Start_IT+0x4e>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642e:	d004      	beq.n	800643a <HAL_TIM_Base_Start_IT+0x4e>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a15      	ldr	r2, [pc, #84]	; (800648c <HAL_TIM_Base_Start_IT+0xa0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d115      	bne.n	8006466 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	4b13      	ldr	r3, [pc, #76]	; (8006490 <HAL_TIM_Base_Start_IT+0xa4>)
 8006442:	4013      	ands	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b06      	cmp	r3, #6
 800644a:	d015      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x8c>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006452:	d011      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006464:	e008      	b.n	8006478 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0201 	orr.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	e000      	b.n	800647a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006478:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	40012c00 	.word	0x40012c00
 800648c:	40014000 	.word	0x40014000
 8006490:	00010007 	.word	0x00010007

08006494 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e049      	b.n	800653a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fc f942 	bl	8002744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4619      	mov	r1, r3
 80064d2:	4610      	mov	r0, r2
 80064d4:	f000 fc52 	bl	8006d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d109      	bne.n	8006568 <HAL_TIM_PWM_Start+0x24>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b01      	cmp	r3, #1
 800655e:	bf14      	ite	ne
 8006560:	2301      	movne	r3, #1
 8006562:	2300      	moveq	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	e03c      	b.n	80065e2 <HAL_TIM_PWM_Start+0x9e>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b04      	cmp	r3, #4
 800656c:	d109      	bne.n	8006582 <HAL_TIM_PWM_Start+0x3e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b01      	cmp	r3, #1
 8006578:	bf14      	ite	ne
 800657a:	2301      	movne	r3, #1
 800657c:	2300      	moveq	r3, #0
 800657e:	b2db      	uxtb	r3, r3
 8006580:	e02f      	b.n	80065e2 <HAL_TIM_PWM_Start+0x9e>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b08      	cmp	r3, #8
 8006586:	d109      	bne.n	800659c <HAL_TIM_PWM_Start+0x58>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b01      	cmp	r3, #1
 8006592:	bf14      	ite	ne
 8006594:	2301      	movne	r3, #1
 8006596:	2300      	moveq	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	e022      	b.n	80065e2 <HAL_TIM_PWM_Start+0x9e>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	d109      	bne.n	80065b6 <HAL_TIM_PWM_Start+0x72>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	bf14      	ite	ne
 80065ae:	2301      	movne	r3, #1
 80065b0:	2300      	moveq	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	e015      	b.n	80065e2 <HAL_TIM_PWM_Start+0x9e>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b10      	cmp	r3, #16
 80065ba:	d109      	bne.n	80065d0 <HAL_TIM_PWM_Start+0x8c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	e008      	b.n	80065e2 <HAL_TIM_PWM_Start+0x9e>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b01      	cmp	r3, #1
 80065da:	bf14      	ite	ne
 80065dc:	2301      	movne	r3, #1
 80065de:	2300      	moveq	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e083      	b.n	80066f2 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <HAL_TIM_PWM_Start+0xb6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065f8:	e023      	b.n	8006642 <HAL_TIM_PWM_Start+0xfe>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d104      	bne.n	800660a <HAL_TIM_PWM_Start+0xc6>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006608:	e01b      	b.n	8006642 <HAL_TIM_PWM_Start+0xfe>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b08      	cmp	r3, #8
 800660e:	d104      	bne.n	800661a <HAL_TIM_PWM_Start+0xd6>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006618:	e013      	b.n	8006642 <HAL_TIM_PWM_Start+0xfe>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b0c      	cmp	r3, #12
 800661e:	d104      	bne.n	800662a <HAL_TIM_PWM_Start+0xe6>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006628:	e00b      	b.n	8006642 <HAL_TIM_PWM_Start+0xfe>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b10      	cmp	r3, #16
 800662e:	d104      	bne.n	800663a <HAL_TIM_PWM_Start+0xf6>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006638:	e003      	b.n	8006642 <HAL_TIM_PWM_Start+0xfe>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2202      	movs	r2, #2
 800663e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2201      	movs	r2, #1
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f000 ffb6 	bl	80075bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a29      	ldr	r2, [pc, #164]	; (80066fc <HAL_TIM_PWM_Start+0x1b8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00e      	beq.n	8006678 <HAL_TIM_PWM_Start+0x134>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a28      	ldr	r2, [pc, #160]	; (8006700 <HAL_TIM_PWM_Start+0x1bc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d009      	beq.n	8006678 <HAL_TIM_PWM_Start+0x134>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a26      	ldr	r2, [pc, #152]	; (8006704 <HAL_TIM_PWM_Start+0x1c0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <HAL_TIM_PWM_Start+0x134>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a25      	ldr	r2, [pc, #148]	; (8006708 <HAL_TIM_PWM_Start+0x1c4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d101      	bne.n	800667c <HAL_TIM_PWM_Start+0x138>
 8006678:	2301      	movs	r3, #1
 800667a:	e000      	b.n	800667e <HAL_TIM_PWM_Start+0x13a>
 800667c:	2300      	movs	r3, #0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006690:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a19      	ldr	r2, [pc, #100]	; (80066fc <HAL_TIM_PWM_Start+0x1b8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_TIM_PWM_Start+0x16c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a4:	d004      	beq.n	80066b0 <HAL_TIM_PWM_Start+0x16c>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a15      	ldr	r2, [pc, #84]	; (8006700 <HAL_TIM_PWM_Start+0x1bc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d115      	bne.n	80066dc <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	4b15      	ldr	r3, [pc, #84]	; (800670c <HAL_TIM_PWM_Start+0x1c8>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b06      	cmp	r3, #6
 80066c0:	d015      	beq.n	80066ee <HAL_TIM_PWM_Start+0x1aa>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c8:	d011      	beq.n	80066ee <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0201 	orr.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066da:	e008      	b.n	80066ee <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	e000      	b.n	80066f0 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40014000 	.word	0x40014000
 8006704:	40014400 	.word	0x40014400
 8006708:	40014800 	.word	0x40014800
 800670c:	00010007 	.word	0x00010007

08006710 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e049      	b.n	80067b6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fc f824 	bl	8002784 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3304      	adds	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f000 fb14 	bl	8006d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
	...

080067c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d104      	bne.n	80067de <HAL_TIM_IC_Start_IT+0x1e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	e023      	b.n	8006826 <HAL_TIM_IC_Start_IT+0x66>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d104      	bne.n	80067ee <HAL_TIM_IC_Start_IT+0x2e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	e01b      	b.n	8006826 <HAL_TIM_IC_Start_IT+0x66>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d104      	bne.n	80067fe <HAL_TIM_IC_Start_IT+0x3e>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	e013      	b.n	8006826 <HAL_TIM_IC_Start_IT+0x66>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b0c      	cmp	r3, #12
 8006802:	d104      	bne.n	800680e <HAL_TIM_IC_Start_IT+0x4e>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800680a:	b2db      	uxtb	r3, r3
 800680c:	e00b      	b.n	8006826 <HAL_TIM_IC_Start_IT+0x66>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b10      	cmp	r3, #16
 8006812:	d104      	bne.n	800681e <HAL_TIM_IC_Start_IT+0x5e>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800681a:	b2db      	uxtb	r3, r3
 800681c:	e003      	b.n	8006826 <HAL_TIM_IC_Start_IT+0x66>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006824:	b2db      	uxtb	r3, r3
 8006826:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d104      	bne.n	8006838 <HAL_TIM_IC_Start_IT+0x78>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006834:	b2db      	uxtb	r3, r3
 8006836:	e013      	b.n	8006860 <HAL_TIM_IC_Start_IT+0xa0>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b04      	cmp	r3, #4
 800683c:	d104      	bne.n	8006848 <HAL_TIM_IC_Start_IT+0x88>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006844:	b2db      	uxtb	r3, r3
 8006846:	e00b      	b.n	8006860 <HAL_TIM_IC_Start_IT+0xa0>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b08      	cmp	r3, #8
 800684c:	d104      	bne.n	8006858 <HAL_TIM_IC_Start_IT+0x98>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006854:	b2db      	uxtb	r3, r3
 8006856:	e003      	b.n	8006860 <HAL_TIM_IC_Start_IT+0xa0>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800685e:	b2db      	uxtb	r3, r3
 8006860:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d102      	bne.n	800686e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006868:	7b7b      	ldrb	r3, [r7, #13]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d001      	beq.n	8006872 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e0c9      	b.n	8006a06 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <HAL_TIM_IC_Start_IT+0xc2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006880:	e023      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x10a>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b04      	cmp	r3, #4
 8006886:	d104      	bne.n	8006892 <HAL_TIM_IC_Start_IT+0xd2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006890:	e01b      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x10a>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b08      	cmp	r3, #8
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_IC_Start_IT+0xe2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a0:	e013      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x10a>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b0c      	cmp	r3, #12
 80068a6:	d104      	bne.n	80068b2 <HAL_TIM_IC_Start_IT+0xf2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068b0:	e00b      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x10a>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	d104      	bne.n	80068c2 <HAL_TIM_IC_Start_IT+0x102>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068c0:	e003      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x10a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d104      	bne.n	80068da <HAL_TIM_IC_Start_IT+0x11a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d8:	e013      	b.n	8006902 <HAL_TIM_IC_Start_IT+0x142>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b04      	cmp	r3, #4
 80068de:	d104      	bne.n	80068ea <HAL_TIM_IC_Start_IT+0x12a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e8:	e00b      	b.n	8006902 <HAL_TIM_IC_Start_IT+0x142>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d104      	bne.n	80068fa <HAL_TIM_IC_Start_IT+0x13a>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068f8:	e003      	b.n	8006902 <HAL_TIM_IC_Start_IT+0x142>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b0c      	cmp	r3, #12
 8006906:	d841      	bhi.n	800698c <HAL_TIM_IC_Start_IT+0x1cc>
 8006908:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <HAL_TIM_IC_Start_IT+0x150>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	08006945 	.word	0x08006945
 8006914:	0800698d 	.word	0x0800698d
 8006918:	0800698d 	.word	0x0800698d
 800691c:	0800698d 	.word	0x0800698d
 8006920:	08006957 	.word	0x08006957
 8006924:	0800698d 	.word	0x0800698d
 8006928:	0800698d 	.word	0x0800698d
 800692c:	0800698d 	.word	0x0800698d
 8006930:	08006969 	.word	0x08006969
 8006934:	0800698d 	.word	0x0800698d
 8006938:	0800698d 	.word	0x0800698d
 800693c:	0800698d 	.word	0x0800698d
 8006940:	0800697b 	.word	0x0800697b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0202 	orr.w	r2, r2, #2
 8006952:	60da      	str	r2, [r3, #12]
      break;
 8006954:	e01d      	b.n	8006992 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0204 	orr.w	r2, r2, #4
 8006964:	60da      	str	r2, [r3, #12]
      break;
 8006966:	e014      	b.n	8006992 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0208 	orr.w	r2, r2, #8
 8006976:	60da      	str	r2, [r3, #12]
      break;
 8006978:	e00b      	b.n	8006992 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0210 	orr.w	r2, r2, #16
 8006988:	60da      	str	r2, [r3, #12]
      break;
 800698a:	e002      	b.n	8006992 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
      break;
 8006990:	bf00      	nop
  }

  if (status == HAL_OK)
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d135      	bne.n	8006a04 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2201      	movs	r2, #1
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fe0b 	bl	80075bc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a19      	ldr	r2, [pc, #100]	; (8006a10 <HAL_TIM_IC_Start_IT+0x250>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d009      	beq.n	80069c4 <HAL_TIM_IC_Start_IT+0x204>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b8:	d004      	beq.n	80069c4 <HAL_TIM_IC_Start_IT+0x204>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <HAL_TIM_IC_Start_IT+0x254>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d115      	bne.n	80069f0 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	4b13      	ldr	r3, [pc, #76]	; (8006a18 <HAL_TIM_IC_Start_IT+0x258>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b06      	cmp	r3, #6
 80069d4:	d015      	beq.n	8006a02 <HAL_TIM_IC_Start_IT+0x242>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069dc:	d011      	beq.n	8006a02 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0201 	orr.w	r2, r2, #1
 80069ec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ee:	e008      	b.n	8006a02 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	e000      	b.n	8006a04 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a02:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	40012c00 	.word	0x40012c00
 8006a14:	40014000 	.word	0x40014000
 8006a18:	00010007 	.word	0x00010007

08006a1c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e088      	b.n	8006b4c <HAL_TIM_IC_ConfigChannel+0x130>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11b      	bne.n	8006a80 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006a58:	f000 fca4 	bl	80073a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 020c 	bic.w	r2, r2, #12
 8006a6a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6999      	ldr	r1, [r3, #24]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	619a      	str	r2, [r3, #24]
 8006a7e:	e060      	b.n	8006b42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d11c      	bne.n	8006ac0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006a96:	f000 fcdb 	bl	8007450 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699a      	ldr	r2, [r3, #24]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006aa8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6999      	ldr	r1, [r3, #24]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	021a      	lsls	r2, r3, #8
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	619a      	str	r2, [r3, #24]
 8006abe:	e040      	b.n	8006b42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d11b      	bne.n	8006afe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006ad6:	f000 fcf8 	bl	80074ca <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 020c 	bic.w	r2, r2, #12
 8006ae8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69d9      	ldr	r1, [r3, #28]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	61da      	str	r2, [r3, #28]
 8006afc:	e021      	b.n	8006b42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b0c      	cmp	r3, #12
 8006b02:	d11c      	bne.n	8006b3e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006b14:	f000 fd15 	bl	8007542 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69da      	ldr	r2, [r3, #28]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b26:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69d9      	ldr	r1, [r3, #28]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	021a      	lsls	r2, r3, #8
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	61da      	str	r2, [r3, #28]
 8006b3c:	e001      	b.n	8006b42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e0ff      	b.n	8006d72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b14      	cmp	r3, #20
 8006b7e:	f200 80f0 	bhi.w	8006d62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b82:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b88:	08006bdd 	.word	0x08006bdd
 8006b8c:	08006d63 	.word	0x08006d63
 8006b90:	08006d63 	.word	0x08006d63
 8006b94:	08006d63 	.word	0x08006d63
 8006b98:	08006c1d 	.word	0x08006c1d
 8006b9c:	08006d63 	.word	0x08006d63
 8006ba0:	08006d63 	.word	0x08006d63
 8006ba4:	08006d63 	.word	0x08006d63
 8006ba8:	08006c5f 	.word	0x08006c5f
 8006bac:	08006d63 	.word	0x08006d63
 8006bb0:	08006d63 	.word	0x08006d63
 8006bb4:	08006d63 	.word	0x08006d63
 8006bb8:	08006c9f 	.word	0x08006c9f
 8006bbc:	08006d63 	.word	0x08006d63
 8006bc0:	08006d63 	.word	0x08006d63
 8006bc4:	08006d63 	.word	0x08006d63
 8006bc8:	08006ce1 	.word	0x08006ce1
 8006bcc:	08006d63 	.word	0x08006d63
 8006bd0:	08006d63 	.word	0x08006d63
 8006bd4:	08006d63 	.word	0x08006d63
 8006bd8:	08006d21 	.word	0x08006d21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f938 	bl	8006e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699a      	ldr	r2, [r3, #24]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0208 	orr.w	r2, r2, #8
 8006bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699a      	ldr	r2, [r3, #24]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0204 	bic.w	r2, r2, #4
 8006c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6999      	ldr	r1, [r3, #24]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	691a      	ldr	r2, [r3, #16]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	619a      	str	r2, [r3, #24]
      break;
 8006c1a:	e0a5      	b.n	8006d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f99e 	bl	8006f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699a      	ldr	r2, [r3, #24]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6999      	ldr	r1, [r3, #24]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	021a      	lsls	r2, r3, #8
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	619a      	str	r2, [r3, #24]
      break;
 8006c5c:	e084      	b.n	8006d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 f9fd 	bl	8007064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0208 	orr.w	r2, r2, #8
 8006c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69da      	ldr	r2, [r3, #28]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0204 	bic.w	r2, r2, #4
 8006c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69d9      	ldr	r1, [r3, #28]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	61da      	str	r2, [r3, #28]
      break;
 8006c9c:	e064      	b.n	8006d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fa5b 	bl	8007160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69da      	ldr	r2, [r3, #28]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69d9      	ldr	r1, [r3, #28]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	021a      	lsls	r2, r3, #8
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	61da      	str	r2, [r3, #28]
      break;
 8006cde:	e043      	b.n	8006d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68b9      	ldr	r1, [r7, #8]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fa9e 	bl	8007228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0208 	orr.w	r2, r2, #8
 8006cfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0204 	bic.w	r2, r2, #4
 8006d0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d1e:	e023      	b.n	8006d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fadc 	bl	80072e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	021a      	lsls	r2, r3, #8
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d60:	e002      	b.n	8006d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	75fb      	strb	r3, [r7, #23]
      break;
 8006d66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop

08006d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a2e      	ldr	r2, [pc, #184]	; (8006e48 <TIM_Base_SetConfig+0xcc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d003      	beq.n	8006d9c <TIM_Base_SetConfig+0x20>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9a:	d108      	bne.n	8006dae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a25      	ldr	r2, [pc, #148]	; (8006e48 <TIM_Base_SetConfig+0xcc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00f      	beq.n	8006dd6 <TIM_Base_SetConfig+0x5a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dbc:	d00b      	beq.n	8006dd6 <TIM_Base_SetConfig+0x5a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a22      	ldr	r2, [pc, #136]	; (8006e4c <TIM_Base_SetConfig+0xd0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d007      	beq.n	8006dd6 <TIM_Base_SetConfig+0x5a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a21      	ldr	r2, [pc, #132]	; (8006e50 <TIM_Base_SetConfig+0xd4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d003      	beq.n	8006dd6 <TIM_Base_SetConfig+0x5a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a20      	ldr	r2, [pc, #128]	; (8006e54 <TIM_Base_SetConfig+0xd8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d108      	bne.n	8006de8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a0e      	ldr	r2, [pc, #56]	; (8006e48 <TIM_Base_SetConfig+0xcc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00b      	beq.n	8006e2c <TIM_Base_SetConfig+0xb0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a0d      	ldr	r2, [pc, #52]	; (8006e4c <TIM_Base_SetConfig+0xd0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d007      	beq.n	8006e2c <TIM_Base_SetConfig+0xb0>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a0c      	ldr	r2, [pc, #48]	; (8006e50 <TIM_Base_SetConfig+0xd4>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d003      	beq.n	8006e2c <TIM_Base_SetConfig+0xb0>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a0b      	ldr	r2, [pc, #44]	; (8006e54 <TIM_Base_SetConfig+0xd8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d103      	bne.n	8006e34 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	615a      	str	r2, [r3, #20]
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	40012c00 	.word	0x40012c00
 8006e4c:	40014000 	.word	0x40014000
 8006e50:	40014400 	.word	0x40014400
 8006e54:	40014800 	.word	0x40014800

08006e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	f023 0201 	bic.w	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0303 	bic.w	r3, r3, #3
 8006e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f023 0302 	bic.w	r3, r3, #2
 8006ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a28      	ldr	r2, [pc, #160]	; (8006f54 <TIM_OC1_SetConfig+0xfc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00b      	beq.n	8006ed0 <TIM_OC1_SetConfig+0x78>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a27      	ldr	r2, [pc, #156]	; (8006f58 <TIM_OC1_SetConfig+0x100>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d007      	beq.n	8006ed0 <TIM_OC1_SetConfig+0x78>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a26      	ldr	r2, [pc, #152]	; (8006f5c <TIM_OC1_SetConfig+0x104>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_OC1_SetConfig+0x78>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a25      	ldr	r2, [pc, #148]	; (8006f60 <TIM_OC1_SetConfig+0x108>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d10c      	bne.n	8006eea <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f023 0308 	bic.w	r3, r3, #8
 8006ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f023 0304 	bic.w	r3, r3, #4
 8006ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a19      	ldr	r2, [pc, #100]	; (8006f54 <TIM_OC1_SetConfig+0xfc>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00b      	beq.n	8006f0a <TIM_OC1_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a18      	ldr	r2, [pc, #96]	; (8006f58 <TIM_OC1_SetConfig+0x100>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d007      	beq.n	8006f0a <TIM_OC1_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a17      	ldr	r2, [pc, #92]	; (8006f5c <TIM_OC1_SetConfig+0x104>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d003      	beq.n	8006f0a <TIM_OC1_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a16      	ldr	r2, [pc, #88]	; (8006f60 <TIM_OC1_SetConfig+0x108>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d111      	bne.n	8006f2e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40014400 	.word	0x40014400
 8006f60:	40014800 	.word	0x40014800

08006f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f023 0210 	bic.w	r2, r3, #16
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	021b      	lsls	r3, r3, #8
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f023 0320 	bic.w	r3, r3, #32
 8006fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a24      	ldr	r2, [pc, #144]	; (8007054 <TIM_OC2_SetConfig+0xf0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d10d      	bne.n	8006fe4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <TIM_OC2_SetConfig+0xf0>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d00b      	beq.n	8007004 <TIM_OC2_SetConfig+0xa0>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <TIM_OC2_SetConfig+0xf4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d007      	beq.n	8007004 <TIM_OC2_SetConfig+0xa0>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a19      	ldr	r2, [pc, #100]	; (800705c <TIM_OC2_SetConfig+0xf8>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d003      	beq.n	8007004 <TIM_OC2_SetConfig+0xa0>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a18      	ldr	r2, [pc, #96]	; (8007060 <TIM_OC2_SetConfig+0xfc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d113      	bne.n	800702c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800700a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007012:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	621a      	str	r2, [r3, #32]
}
 8007046:	bf00      	nop
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40012c00 	.word	0x40012c00
 8007058:	40014000 	.word	0x40014000
 800705c:	40014400 	.word	0x40014400
 8007060:	40014800 	.word	0x40014800

08007064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0303 	bic.w	r3, r3, #3
 800709e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a23      	ldr	r2, [pc, #140]	; (8007150 <TIM_OC3_SetConfig+0xec>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d10d      	bne.n	80070e2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	021b      	lsls	r3, r3, #8
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070e0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a1a      	ldr	r2, [pc, #104]	; (8007150 <TIM_OC3_SetConfig+0xec>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d00b      	beq.n	8007102 <TIM_OC3_SetConfig+0x9e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a19      	ldr	r2, [pc, #100]	; (8007154 <TIM_OC3_SetConfig+0xf0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d007      	beq.n	8007102 <TIM_OC3_SetConfig+0x9e>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a18      	ldr	r2, [pc, #96]	; (8007158 <TIM_OC3_SetConfig+0xf4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d003      	beq.n	8007102 <TIM_OC3_SetConfig+0x9e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a17      	ldr	r2, [pc, #92]	; (800715c <TIM_OC3_SetConfig+0xf8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d113      	bne.n	800712a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	621a      	str	r2, [r3, #32]
}
 8007144:	bf00      	nop
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	40012c00 	.word	0x40012c00
 8007154:	40014000 	.word	0x40014000
 8007158:	40014400 	.word	0x40014400
 800715c:	40014800 	.word	0x40014800

08007160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800718e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800719a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	031b      	lsls	r3, r3, #12
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a16      	ldr	r2, [pc, #88]	; (8007218 <TIM_OC4_SetConfig+0xb8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00b      	beq.n	80071dc <TIM_OC4_SetConfig+0x7c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a15      	ldr	r2, [pc, #84]	; (800721c <TIM_OC4_SetConfig+0xbc>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d007      	beq.n	80071dc <TIM_OC4_SetConfig+0x7c>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a14      	ldr	r2, [pc, #80]	; (8007220 <TIM_OC4_SetConfig+0xc0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d003      	beq.n	80071dc <TIM_OC4_SetConfig+0x7c>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a13      	ldr	r2, [pc, #76]	; (8007224 <TIM_OC4_SetConfig+0xc4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d109      	bne.n	80071f0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	019b      	lsls	r3, r3, #6
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	621a      	str	r2, [r3, #32]
}
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40012c00 	.word	0x40012c00
 800721c:	40014000 	.word	0x40014000
 8007220:	40014400 	.word	0x40014400
 8007224:	40014800 	.word	0x40014800

08007228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800726c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	041b      	lsls	r3, r3, #16
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a15      	ldr	r2, [pc, #84]	; (80072d4 <TIM_OC5_SetConfig+0xac>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00b      	beq.n	800729a <TIM_OC5_SetConfig+0x72>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a14      	ldr	r2, [pc, #80]	; (80072d8 <TIM_OC5_SetConfig+0xb0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d007      	beq.n	800729a <TIM_OC5_SetConfig+0x72>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a13      	ldr	r2, [pc, #76]	; (80072dc <TIM_OC5_SetConfig+0xb4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d003      	beq.n	800729a <TIM_OC5_SetConfig+0x72>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a12      	ldr	r2, [pc, #72]	; (80072e0 <TIM_OC5_SetConfig+0xb8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d109      	bne.n	80072ae <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	621a      	str	r2, [r3, #32]
}
 80072c8:	bf00      	nop
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	40012c00 	.word	0x40012c00
 80072d8:	40014000 	.word	0x40014000
 80072dc:	40014400 	.word	0x40014400
 80072e0:	40014800 	.word	0x40014800

080072e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800732a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	051b      	lsls	r3, r3, #20
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4313      	orrs	r3, r2
 8007336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a16      	ldr	r2, [pc, #88]	; (8007394 <TIM_OC6_SetConfig+0xb0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00b      	beq.n	8007358 <TIM_OC6_SetConfig+0x74>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a15      	ldr	r2, [pc, #84]	; (8007398 <TIM_OC6_SetConfig+0xb4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d007      	beq.n	8007358 <TIM_OC6_SetConfig+0x74>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a14      	ldr	r2, [pc, #80]	; (800739c <TIM_OC6_SetConfig+0xb8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_OC6_SetConfig+0x74>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a13      	ldr	r2, [pc, #76]	; (80073a0 <TIM_OC6_SetConfig+0xbc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d109      	bne.n	800736c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800735e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	029b      	lsls	r3, r3, #10
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	621a      	str	r2, [r3, #32]
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40012c00 	.word	0x40012c00
 8007398:	40014000 	.word	0x40014000
 800739c:	40014400 	.word	0x40014400
 80073a0:	40014800 	.word	0x40014800

080073a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	f023 0201 	bic.w	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4a1e      	ldr	r2, [pc, #120]	; (8007448 <TIM_TI1_SetConfig+0xa4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d007      	beq.n	80073e2 <TIM_TI1_SetConfig+0x3e>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d8:	d003      	beq.n	80073e2 <TIM_TI1_SetConfig+0x3e>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a1b      	ldr	r2, [pc, #108]	; (800744c <TIM_TI1_SetConfig+0xa8>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d101      	bne.n	80073e6 <TIM_TI1_SetConfig+0x42>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <TIM_TI1_SetConfig+0x44>
 80073e6:	2300      	movs	r3, #0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d008      	beq.n	80073fe <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f023 0303 	bic.w	r3, r3, #3
 80073f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	e003      	b.n	8007406 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f043 0301 	orr.w	r3, r3, #1
 8007404:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800740c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	b2db      	uxtb	r3, r3
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f023 030a 	bic.w	r3, r3, #10
 8007420:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f003 030a 	and.w	r3, r3, #10
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40012c00 	.word	0x40012c00
 800744c:	40014000 	.word	0x40014000

08007450 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f023 0210 	bic.w	r2, r3, #16
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800748e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	031b      	lsls	r3, r3, #12
 8007494:	b29b      	uxth	r3, r3
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	621a      	str	r2, [r3, #32]
}
 80074be:	bf00      	nop
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b087      	sub	sp, #28
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
 80074d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007506:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	b2db      	uxtb	r3, r3
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4313      	orrs	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800751a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	021b      	lsls	r3, r3, #8
 8007520:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	621a      	str	r2, [r3, #32]
}
 8007536:	bf00      	nop
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007542:	b480      	push	{r7}
 8007544:	b087      	sub	sp, #28
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
 800754e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800756e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	021b      	lsls	r3, r3, #8
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007580:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	031b      	lsls	r3, r3, #12
 8007586:	b29b      	uxth	r3, r3
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007594:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	031b      	lsls	r3, r3, #12
 800759a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	621a      	str	r2, [r3, #32]
}
 80075b0:	bf00      	nop
 80075b2:	371c      	adds	r7, #28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	2201      	movs	r2, #1
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a1a      	ldr	r2, [r3, #32]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	43db      	mvns	r3, r3
 80075de:	401a      	ands	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1a      	ldr	r2, [r3, #32]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	fa01 f303 	lsl.w	r3, r1, r3
 80075f4:	431a      	orrs	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	621a      	str	r2, [r3, #32]
}
 80075fa:	bf00      	nop
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
	...

08007608 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d109      	bne.n	800762c <HAL_TIMEx_PWMN_Start+0x24>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b01      	cmp	r3, #1
 8007622:	bf14      	ite	ne
 8007624:	2301      	movne	r3, #1
 8007626:	2300      	moveq	r3, #0
 8007628:	b2db      	uxtb	r3, r3
 800762a:	e022      	b.n	8007672 <HAL_TIMEx_PWMN_Start+0x6a>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b04      	cmp	r3, #4
 8007630:	d109      	bne.n	8007646 <HAL_TIMEx_PWMN_Start+0x3e>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b01      	cmp	r3, #1
 800763c:	bf14      	ite	ne
 800763e:	2301      	movne	r3, #1
 8007640:	2300      	moveq	r3, #0
 8007642:	b2db      	uxtb	r3, r3
 8007644:	e015      	b.n	8007672 <HAL_TIMEx_PWMN_Start+0x6a>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b08      	cmp	r3, #8
 800764a:	d109      	bne.n	8007660 <HAL_TIMEx_PWMN_Start+0x58>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	e008      	b.n	8007672 <HAL_TIMEx_PWMN_Start+0x6a>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b01      	cmp	r3, #1
 800766a:	bf14      	ite	ne
 800766c:	2301      	movne	r3, #1
 800766e:	2300      	moveq	r3, #0
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e05a      	b.n	8007730 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d104      	bne.n	800768a <HAL_TIMEx_PWMN_Start+0x82>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007688:	e013      	b.n	80076b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b04      	cmp	r3, #4
 800768e:	d104      	bne.n	800769a <HAL_TIMEx_PWMN_Start+0x92>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007698:	e00b      	b.n	80076b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b08      	cmp	r3, #8
 800769e:	d104      	bne.n	80076aa <HAL_TIMEx_PWMN_Start+0xa2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076a8:	e003      	b.n	80076b2 <HAL_TIMEx_PWMN_Start+0xaa>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2202      	movs	r2, #2
 80076ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2204      	movs	r2, #4
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f920 	bl	8007900 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a18      	ldr	r2, [pc, #96]	; (8007738 <HAL_TIMEx_PWMN_Start+0x130>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d009      	beq.n	80076ee <HAL_TIMEx_PWMN_Start+0xe6>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e2:	d004      	beq.n	80076ee <HAL_TIMEx_PWMN_Start+0xe6>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a14      	ldr	r2, [pc, #80]	; (800773c <HAL_TIMEx_PWMN_Start+0x134>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d115      	bne.n	800771a <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	4b12      	ldr	r3, [pc, #72]	; (8007740 <HAL_TIMEx_PWMN_Start+0x138>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b06      	cmp	r3, #6
 80076fe:	d015      	beq.n	800772c <HAL_TIMEx_PWMN_Start+0x124>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007706:	d011      	beq.n	800772c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0201 	orr.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007718:	e008      	b.n	800772c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0201 	orr.w	r2, r2, #1
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	e000      	b.n	800772e <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800772c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	40012c00 	.word	0x40012c00
 800773c:	40014000 	.word	0x40014000
 8007740:	00010007 	.word	0x00010007

08007744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007758:	2302      	movs	r3, #2
 800775a:	e04f      	b.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a21      	ldr	r2, [pc, #132]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d108      	bne.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800778c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4313      	orrs	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a14      	ldr	r2, [pc, #80]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d009      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c4:	d004      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a10      	ldr	r2, [pc, #64]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10c      	bne.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	40012c00 	.word	0x40012c00
 800780c:	40014000 	.word	0x40014000

08007810 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007828:	2302      	movs	r3, #2
 800782a:	e060      	b.n	80078ee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	4313      	orrs	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	041b      	lsls	r3, r3, #16
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a14      	ldr	r2, [pc, #80]	; (80078fc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d115      	bne.n	80078dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	051b      	lsls	r3, r3, #20
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	40012c00 	.word	0x40012c00

08007900 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	2204      	movs	r2, #4
 8007914:	fa02 f303 	lsl.w	r3, r2, r3
 8007918:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a1a      	ldr	r2, [r3, #32]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	43db      	mvns	r3, r3
 8007922:	401a      	ands	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a1a      	ldr	r2, [r3, #32]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	fa01 f303 	lsl.w	r3, r1, r3
 8007938:	431a      	orrs	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	621a      	str	r2, [r3, #32]
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e040      	b.n	80079de <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007960:	2b00      	cmp	r3, #0
 8007962:	d106      	bne.n	8007972 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7fa ffe1 	bl	8002934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2224      	movs	r2, #36	; 0x24
 8007976:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0201 	bic.w	r2, r2, #1
 8007986:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f82d 	bl	80079e8 <UART_SetConfig>
 800798e:	4603      	mov	r3, r0
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e022      	b.n	80079de <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f957 	bl	8007c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0201 	orr.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f9de 	bl	8007d98 <UART_CheckIdleState>
 80079dc:	4603      	mov	r3, r0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4b8a      	ldr	r3, [pc, #552]	; (8007c3c <UART_SetConfig+0x254>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6812      	ldr	r2, [r2, #0]
 8007a1a:	6979      	ldr	r1, [r7, #20]
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a78      	ldr	r2, [pc, #480]	; (8007c40 <UART_SetConfig+0x258>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d120      	bne.n	8007aa6 <UART_SetConfig+0xbe>
 8007a64:	4b77      	ldr	r3, [pc, #476]	; (8007c44 <UART_SetConfig+0x25c>)
 8007a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a68:	f003 0303 	and.w	r3, r3, #3
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d817      	bhi.n	8007aa0 <UART_SetConfig+0xb8>
 8007a70:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <UART_SetConfig+0x90>)
 8007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a76:	bf00      	nop
 8007a78:	08007a89 	.word	0x08007a89
 8007a7c:	08007a95 	.word	0x08007a95
 8007a80:	08007a9b 	.word	0x08007a9b
 8007a84:	08007a8f 	.word	0x08007a8f
 8007a88:	2300      	movs	r3, #0
 8007a8a:	77fb      	strb	r3, [r7, #31]
 8007a8c:	e01d      	b.n	8007aca <UART_SetConfig+0xe2>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	77fb      	strb	r3, [r7, #31]
 8007a92:	e01a      	b.n	8007aca <UART_SetConfig+0xe2>
 8007a94:	2304      	movs	r3, #4
 8007a96:	77fb      	strb	r3, [r7, #31]
 8007a98:	e017      	b.n	8007aca <UART_SetConfig+0xe2>
 8007a9a:	2308      	movs	r3, #8
 8007a9c:	77fb      	strb	r3, [r7, #31]
 8007a9e:	e014      	b.n	8007aca <UART_SetConfig+0xe2>
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	77fb      	strb	r3, [r7, #31]
 8007aa4:	e011      	b.n	8007aca <UART_SetConfig+0xe2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a67      	ldr	r2, [pc, #412]	; (8007c48 <UART_SetConfig+0x260>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d102      	bne.n	8007ab6 <UART_SetConfig+0xce>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	77fb      	strb	r3, [r7, #31]
 8007ab4:	e009      	b.n	8007aca <UART_SetConfig+0xe2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a64      	ldr	r2, [pc, #400]	; (8007c4c <UART_SetConfig+0x264>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d102      	bne.n	8007ac6 <UART_SetConfig+0xde>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	77fb      	strb	r3, [r7, #31]
 8007ac4:	e001      	b.n	8007aca <UART_SetConfig+0xe2>
 8007ac6:	2310      	movs	r3, #16
 8007ac8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad2:	d15a      	bne.n	8007b8a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007ad4:	7ffb      	ldrb	r3, [r7, #31]
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d827      	bhi.n	8007b2a <UART_SetConfig+0x142>
 8007ada:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <UART_SetConfig+0xf8>)
 8007adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae0:	08007b05 	.word	0x08007b05
 8007ae4:	08007b0d 	.word	0x08007b0d
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	08007b2b 	.word	0x08007b2b
 8007af0:	08007b1b 	.word	0x08007b1b
 8007af4:	08007b2b 	.word	0x08007b2b
 8007af8:	08007b2b 	.word	0x08007b2b
 8007afc:	08007b2b 	.word	0x08007b2b
 8007b00:	08007b23 	.word	0x08007b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b04:	f7fe fa9c 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8007b08:	61b8      	str	r0, [r7, #24]
        break;
 8007b0a:	e013      	b.n	8007b34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b0c:	f7fe faba 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
 8007b10:	61b8      	str	r0, [r7, #24]
        break;
 8007b12:	e00f      	b.n	8007b34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b14:	4b4e      	ldr	r3, [pc, #312]	; (8007c50 <UART_SetConfig+0x268>)
 8007b16:	61bb      	str	r3, [r7, #24]
        break;
 8007b18:	e00c      	b.n	8007b34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b1a:	f7fe fa1b 	bl	8005f54 <HAL_RCC_GetSysClockFreq>
 8007b1e:	61b8      	str	r0, [r7, #24]
        break;
 8007b20:	e008      	b.n	8007b34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b26:	61bb      	str	r3, [r7, #24]
        break;
 8007b28:	e004      	b.n	8007b34 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	77bb      	strb	r3, [r7, #30]
        break;
 8007b32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d074      	beq.n	8007c24 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	005a      	lsls	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	085b      	lsrs	r3, r3, #1
 8007b44:	441a      	add	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b0f      	cmp	r3, #15
 8007b54:	d916      	bls.n	8007b84 <UART_SetConfig+0x19c>
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5c:	d212      	bcs.n	8007b84 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	f023 030f 	bic.w	r3, r3, #15
 8007b66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	085b      	lsrs	r3, r3, #1
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	89fb      	ldrh	r3, [r7, #14]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	89fa      	ldrh	r2, [r7, #14]
 8007b80:	60da      	str	r2, [r3, #12]
 8007b82:	e04f      	b.n	8007c24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	77bb      	strb	r3, [r7, #30]
 8007b88:	e04c      	b.n	8007c24 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b8a:	7ffb      	ldrb	r3, [r7, #31]
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d828      	bhi.n	8007be2 <UART_SetConfig+0x1fa>
 8007b90:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x1b0>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bc5 	.word	0x08007bc5
 8007ba0:	08007bcd 	.word	0x08007bcd
 8007ba4:	08007be3 	.word	0x08007be3
 8007ba8:	08007bd3 	.word	0x08007bd3
 8007bac:	08007be3 	.word	0x08007be3
 8007bb0:	08007be3 	.word	0x08007be3
 8007bb4:	08007be3 	.word	0x08007be3
 8007bb8:	08007bdb 	.word	0x08007bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fe fa40 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8007bc0:	61b8      	str	r0, [r7, #24]
        break;
 8007bc2:	e013      	b.n	8007bec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bc4:	f7fe fa5e 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
 8007bc8:	61b8      	str	r0, [r7, #24]
        break;
 8007bca:	e00f      	b.n	8007bec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bcc:	4b20      	ldr	r3, [pc, #128]	; (8007c50 <UART_SetConfig+0x268>)
 8007bce:	61bb      	str	r3, [r7, #24]
        break;
 8007bd0:	e00c      	b.n	8007bec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bd2:	f7fe f9bf 	bl	8005f54 <HAL_RCC_GetSysClockFreq>
 8007bd6:	61b8      	str	r0, [r7, #24]
        break;
 8007bd8:	e008      	b.n	8007bec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bde:	61bb      	str	r3, [r7, #24]
        break;
 8007be0:	e004      	b.n	8007bec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	77bb      	strb	r3, [r7, #30]
        break;
 8007bea:	bf00      	nop
    }

    if (pclk != 0U)
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d018      	beq.n	8007c24 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	085a      	lsrs	r2, r3, #1
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	441a      	add	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2b0f      	cmp	r3, #15
 8007c0a:	d909      	bls.n	8007c20 <UART_SetConfig+0x238>
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c12:	d205      	bcs.n	8007c20 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60da      	str	r2, [r3, #12]
 8007c1e:	e001      	b.n	8007c24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007c30:	7fbb      	ldrb	r3, [r7, #30]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3720      	adds	r7, #32
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	efff69f3 	.word	0xefff69f3
 8007c40:	40013800 	.word	0x40013800
 8007c44:	40021000 	.word	0x40021000
 8007c48:	40004400 	.word	0x40004400
 8007c4c:	40004800 	.word	0x40004800
 8007c50:	007a1200 	.word	0x007a1200

08007c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00a      	beq.n	8007c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00a      	beq.n	8007cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	f003 0310 	and.w	r3, r3, #16
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d01a      	beq.n	8007d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d52:	d10a      	bne.n	8007d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	605a      	str	r2, [r3, #4]
  }
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b098      	sub	sp, #96	; 0x60
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007da8:	f7fa ff1c 	bl	8002be4 <HAL_GetTick>
 8007dac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d12e      	bne.n	8007e1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f88c 	bl	8007ee8 <UART_WaitOnFlagUntilTimeout>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d021      	beq.n	8007e1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dea:	653b      	str	r3, [r7, #80]	; 0x50
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df4:	647b      	str	r3, [r7, #68]	; 0x44
 8007df6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e6      	bne.n	8007dd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e062      	b.n	8007ee0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d149      	bne.n	8007ebc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e30:	2200      	movs	r2, #0
 8007e32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f856 	bl	8007ee8 <UART_WaitOnFlagUntilTimeout>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d03c      	beq.n	8007ebc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	e853 3f00 	ldrex	r3, [r3]
 8007e4e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e60:	633b      	str	r3, [r7, #48]	; 0x30
 8007e62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e68:	e841 2300 	strex	r3, r2, [r1]
 8007e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e6      	bne.n	8007e42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	e853 3f00 	ldrex	r3, [r3]
 8007e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3308      	adds	r3, #8
 8007e92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e94:	61fa      	str	r2, [r7, #28]
 8007e96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e98:	69b9      	ldr	r1, [r7, #24]
 8007e9a:	69fa      	ldr	r2, [r7, #28]
 8007e9c:	e841 2300 	strex	r3, r2, [r1]
 8007ea0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e5      	bne.n	8007e74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e011      	b.n	8007ee0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3758      	adds	r7, #88	; 0x58
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef8:	e049      	b.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f00:	d045      	beq.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f02:	f7fa fe6f 	bl	8002be4 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d302      	bcc.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e048      	b.n	8007fae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d031      	beq.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	f003 0308 	and.w	r3, r3, #8
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d110      	bne.n	8007f5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2208      	movs	r2, #8
 8007f3e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f838 	bl	8007fb6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2208      	movs	r2, #8
 8007f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e029      	b.n	8007fae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f68:	d111      	bne.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 f81e 	bl	8007fb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e00f      	b.n	8007fae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69da      	ldr	r2, [r3, #28]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4013      	ands	r3, r2
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	bf0c      	ite	eq
 8007f9e:	2301      	moveq	r3, #1
 8007fa0:	2300      	movne	r3, #0
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d0a6      	beq.n	8007efa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b095      	sub	sp, #84	; 0x54
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8007fde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e6      	bne.n	8007fbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	e853 3f00 	ldrex	r3, [r3]
 8007ffe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f023 0301 	bic.w	r3, r3, #1
 8008006:	64bb      	str	r3, [r7, #72]	; 0x48
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3308      	adds	r3, #8
 800800e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008010:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008018:	e841 2300 	strex	r3, r2, [r1]
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1e5      	bne.n	8007ff0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008028:	2b01      	cmp	r3, #1
 800802a:	d118      	bne.n	800805e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	60bb      	str	r3, [r7, #8]
   return(result);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f023 0310 	bic.w	r3, r3, #16
 8008040:	647b      	str	r3, [r7, #68]	; 0x44
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800804a:	61bb      	str	r3, [r7, #24]
 800804c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	6979      	ldr	r1, [r7, #20]
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	e841 2300 	strex	r3, r2, [r1]
 8008056:	613b      	str	r3, [r7, #16]
   return(result);
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e6      	bne.n	800802c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2220      	movs	r2, #32
 8008062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008072:	bf00      	nop
 8008074:	3754      	adds	r7, #84	; 0x54
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <memset>:
 800807e:	4402      	add	r2, r0
 8008080:	4603      	mov	r3, r0
 8008082:	4293      	cmp	r3, r2
 8008084:	d100      	bne.n	8008088 <memset+0xa>
 8008086:	4770      	bx	lr
 8008088:	f803 1b01 	strb.w	r1, [r3], #1
 800808c:	e7f9      	b.n	8008082 <memset+0x4>
	...

08008090 <__errno>:
 8008090:	4b01      	ldr	r3, [pc, #4]	; (8008098 <__errno+0x8>)
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20000058 	.word	0x20000058

0800809c <__libc_init_array>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	4d0d      	ldr	r5, [pc, #52]	; (80080d4 <__libc_init_array+0x38>)
 80080a0:	4c0d      	ldr	r4, [pc, #52]	; (80080d8 <__libc_init_array+0x3c>)
 80080a2:	1b64      	subs	r4, r4, r5
 80080a4:	10a4      	asrs	r4, r4, #2
 80080a6:	2600      	movs	r6, #0
 80080a8:	42a6      	cmp	r6, r4
 80080aa:	d109      	bne.n	80080c0 <__libc_init_array+0x24>
 80080ac:	4d0b      	ldr	r5, [pc, #44]	; (80080dc <__libc_init_array+0x40>)
 80080ae:	4c0c      	ldr	r4, [pc, #48]	; (80080e0 <__libc_init_array+0x44>)
 80080b0:	f000 ffd0 	bl	8009054 <_init>
 80080b4:	1b64      	subs	r4, r4, r5
 80080b6:	10a4      	asrs	r4, r4, #2
 80080b8:	2600      	movs	r6, #0
 80080ba:	42a6      	cmp	r6, r4
 80080bc:	d105      	bne.n	80080ca <__libc_init_array+0x2e>
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c4:	4798      	blx	r3
 80080c6:	3601      	adds	r6, #1
 80080c8:	e7ee      	b.n	80080a8 <__libc_init_array+0xc>
 80080ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ce:	4798      	blx	r3
 80080d0:	3601      	adds	r6, #1
 80080d2:	e7f2      	b.n	80080ba <__libc_init_array+0x1e>
 80080d4:	080094b4 	.word	0x080094b4
 80080d8:	080094b4 	.word	0x080094b4
 80080dc:	080094b4 	.word	0x080094b4
 80080e0:	080094b8 	.word	0x080094b8

080080e4 <atan2f>:
 80080e4:	f000 b972 	b.w	80083cc <__ieee754_atan2f>

080080e8 <fmodf>:
 80080e8:	b508      	push	{r3, lr}
 80080ea:	ed2d 8b02 	vpush	{d8}
 80080ee:	eef0 8a40 	vmov.f32	s17, s0
 80080f2:	eeb0 8a60 	vmov.f32	s16, s1
 80080f6:	f000 fa09 	bl	800850c <__ieee754_fmodf>
 80080fa:	eef4 8a48 	vcmp.f32	s17, s16
 80080fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008102:	d60c      	bvs.n	800811e <fmodf+0x36>
 8008104:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008124 <fmodf+0x3c>
 8008108:	eeb4 8a68 	vcmp.f32	s16, s17
 800810c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008110:	d105      	bne.n	800811e <fmodf+0x36>
 8008112:	f7ff ffbd 	bl	8008090 <__errno>
 8008116:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800811a:	2321      	movs	r3, #33	; 0x21
 800811c:	6003      	str	r3, [r0, #0]
 800811e:	ecbd 8b02 	vpop	{d8}
 8008122:	bd08      	pop	{r3, pc}
 8008124:	00000000 	.word	0x00000000

08008128 <sqrtf>:
 8008128:	b508      	push	{r3, lr}
 800812a:	ed2d 8b02 	vpush	{d8}
 800812e:	eeb0 8a40 	vmov.f32	s16, s0
 8008132:	f000 f8a1 	bl	8008278 <__ieee754_sqrtf>
 8008136:	eeb4 8a48 	vcmp.f32	s16, s16
 800813a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800813e:	d60c      	bvs.n	800815a <sqrtf+0x32>
 8008140:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008160 <sqrtf+0x38>
 8008144:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814c:	d505      	bpl.n	800815a <sqrtf+0x32>
 800814e:	f7ff ff9f 	bl	8008090 <__errno>
 8008152:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008156:	2321      	movs	r3, #33	; 0x21
 8008158:	6003      	str	r3, [r0, #0]
 800815a:	ecbd 8b02 	vpop	{d8}
 800815e:	bd08      	pop	{r3, pc}
 8008160:	00000000 	.word	0x00000000

08008164 <cosf>:
 8008164:	ee10 3a10 	vmov	r3, s0
 8008168:	b507      	push	{r0, r1, r2, lr}
 800816a:	4a1e      	ldr	r2, [pc, #120]	; (80081e4 <cosf+0x80>)
 800816c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008170:	4293      	cmp	r3, r2
 8008172:	dc06      	bgt.n	8008182 <cosf+0x1e>
 8008174:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80081e8 <cosf+0x84>
 8008178:	b003      	add	sp, #12
 800817a:	f85d eb04 	ldr.w	lr, [sp], #4
 800817e:	f000 b87f 	b.w	8008280 <__kernel_cosf>
 8008182:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008186:	db04      	blt.n	8008192 <cosf+0x2e>
 8008188:	ee30 0a40 	vsub.f32	s0, s0, s0
 800818c:	b003      	add	sp, #12
 800818e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008192:	4668      	mov	r0, sp
 8008194:	f000 fa3c 	bl	8008610 <__ieee754_rem_pio2f>
 8008198:	f000 0003 	and.w	r0, r0, #3
 800819c:	2801      	cmp	r0, #1
 800819e:	d009      	beq.n	80081b4 <cosf+0x50>
 80081a0:	2802      	cmp	r0, #2
 80081a2:	d010      	beq.n	80081c6 <cosf+0x62>
 80081a4:	b9b0      	cbnz	r0, 80081d4 <cosf+0x70>
 80081a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80081aa:	ed9d 0a00 	vldr	s0, [sp]
 80081ae:	f000 f867 	bl	8008280 <__kernel_cosf>
 80081b2:	e7eb      	b.n	800818c <cosf+0x28>
 80081b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80081b8:	ed9d 0a00 	vldr	s0, [sp]
 80081bc:	f000 f8be 	bl	800833c <__kernel_sinf>
 80081c0:	eeb1 0a40 	vneg.f32	s0, s0
 80081c4:	e7e2      	b.n	800818c <cosf+0x28>
 80081c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80081ca:	ed9d 0a00 	vldr	s0, [sp]
 80081ce:	f000 f857 	bl	8008280 <__kernel_cosf>
 80081d2:	e7f5      	b.n	80081c0 <cosf+0x5c>
 80081d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80081d8:	ed9d 0a00 	vldr	s0, [sp]
 80081dc:	2001      	movs	r0, #1
 80081de:	f000 f8ad 	bl	800833c <__kernel_sinf>
 80081e2:	e7d3      	b.n	800818c <cosf+0x28>
 80081e4:	3f490fd8 	.word	0x3f490fd8
 80081e8:	00000000 	.word	0x00000000

080081ec <sinf>:
 80081ec:	ee10 3a10 	vmov	r3, s0
 80081f0:	b507      	push	{r0, r1, r2, lr}
 80081f2:	4a1f      	ldr	r2, [pc, #124]	; (8008270 <sinf+0x84>)
 80081f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081f8:	4293      	cmp	r3, r2
 80081fa:	dc07      	bgt.n	800820c <sinf+0x20>
 80081fc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008274 <sinf+0x88>
 8008200:	2000      	movs	r0, #0
 8008202:	b003      	add	sp, #12
 8008204:	f85d eb04 	ldr.w	lr, [sp], #4
 8008208:	f000 b898 	b.w	800833c <__kernel_sinf>
 800820c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008210:	db04      	blt.n	800821c <sinf+0x30>
 8008212:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008216:	b003      	add	sp, #12
 8008218:	f85d fb04 	ldr.w	pc, [sp], #4
 800821c:	4668      	mov	r0, sp
 800821e:	f000 f9f7 	bl	8008610 <__ieee754_rem_pio2f>
 8008222:	f000 0003 	and.w	r0, r0, #3
 8008226:	2801      	cmp	r0, #1
 8008228:	d00a      	beq.n	8008240 <sinf+0x54>
 800822a:	2802      	cmp	r0, #2
 800822c:	d00f      	beq.n	800824e <sinf+0x62>
 800822e:	b9c0      	cbnz	r0, 8008262 <sinf+0x76>
 8008230:	eddd 0a01 	vldr	s1, [sp, #4]
 8008234:	ed9d 0a00 	vldr	s0, [sp]
 8008238:	2001      	movs	r0, #1
 800823a:	f000 f87f 	bl	800833c <__kernel_sinf>
 800823e:	e7ea      	b.n	8008216 <sinf+0x2a>
 8008240:	eddd 0a01 	vldr	s1, [sp, #4]
 8008244:	ed9d 0a00 	vldr	s0, [sp]
 8008248:	f000 f81a 	bl	8008280 <__kernel_cosf>
 800824c:	e7e3      	b.n	8008216 <sinf+0x2a>
 800824e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008252:	ed9d 0a00 	vldr	s0, [sp]
 8008256:	2001      	movs	r0, #1
 8008258:	f000 f870 	bl	800833c <__kernel_sinf>
 800825c:	eeb1 0a40 	vneg.f32	s0, s0
 8008260:	e7d9      	b.n	8008216 <sinf+0x2a>
 8008262:	eddd 0a01 	vldr	s1, [sp, #4]
 8008266:	ed9d 0a00 	vldr	s0, [sp]
 800826a:	f000 f809 	bl	8008280 <__kernel_cosf>
 800826e:	e7f5      	b.n	800825c <sinf+0x70>
 8008270:	3f490fd8 	.word	0x3f490fd8
 8008274:	00000000 	.word	0x00000000

08008278 <__ieee754_sqrtf>:
 8008278:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800827c:	4770      	bx	lr
	...

08008280 <__kernel_cosf>:
 8008280:	ee10 3a10 	vmov	r3, s0
 8008284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008288:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800828c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008290:	da05      	bge.n	800829e <__kernel_cosf+0x1e>
 8008292:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008296:	ee17 2a90 	vmov	r2, s15
 800829a:	2a00      	cmp	r2, #0
 800829c:	d03b      	beq.n	8008316 <__kernel_cosf+0x96>
 800829e:	ee20 7a00 	vmul.f32	s14, s0, s0
 80082a2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800831c <__kernel_cosf+0x9c>
 80082a6:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8008320 <__kernel_cosf+0xa0>
 80082aa:	4a1e      	ldr	r2, [pc, #120]	; (8008324 <__kernel_cosf+0xa4>)
 80082ac:	eea7 6a27 	vfma.f32	s12, s14, s15
 80082b0:	4293      	cmp	r3, r2
 80082b2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8008328 <__kernel_cosf+0xa8>
 80082b6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80082ba:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800832c <__kernel_cosf+0xac>
 80082be:	eea7 6a87 	vfma.f32	s12, s15, s14
 80082c2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8008330 <__kernel_cosf+0xb0>
 80082c6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80082ca:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8008334 <__kernel_cosf+0xb4>
 80082ce:	eea7 6a87 	vfma.f32	s12, s15, s14
 80082d2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80082d6:	ee26 6a07 	vmul.f32	s12, s12, s14
 80082da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80082de:	eee7 0a06 	vfma.f32	s1, s14, s12
 80082e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e6:	dc04      	bgt.n	80082f2 <__kernel_cosf+0x72>
 80082e8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80082ec:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80082f0:	4770      	bx	lr
 80082f2:	4a11      	ldr	r2, [pc, #68]	; (8008338 <__kernel_cosf+0xb8>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	bfda      	itte	le
 80082f8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80082fc:	ee07 3a10 	vmovle	s14, r3
 8008300:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8008304:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008308:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800830c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008310:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008314:	4770      	bx	lr
 8008316:	eeb0 0a66 	vmov.f32	s0, s13
 800831a:	4770      	bx	lr
 800831c:	ad47d74e 	.word	0xad47d74e
 8008320:	310f74f6 	.word	0x310f74f6
 8008324:	3e999999 	.word	0x3e999999
 8008328:	b493f27c 	.word	0xb493f27c
 800832c:	37d00d01 	.word	0x37d00d01
 8008330:	bab60b61 	.word	0xbab60b61
 8008334:	3d2aaaab 	.word	0x3d2aaaab
 8008338:	3f480000 	.word	0x3f480000

0800833c <__kernel_sinf>:
 800833c:	ee10 3a10 	vmov	r3, s0
 8008340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008344:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008348:	da04      	bge.n	8008354 <__kernel_sinf+0x18>
 800834a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800834e:	ee17 3a90 	vmov	r3, s15
 8008352:	b35b      	cbz	r3, 80083ac <__kernel_sinf+0x70>
 8008354:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008358:	eddf 7a15 	vldr	s15, [pc, #84]	; 80083b0 <__kernel_sinf+0x74>
 800835c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80083b4 <__kernel_sinf+0x78>
 8008360:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008364:	eddf 7a14 	vldr	s15, [pc, #80]	; 80083b8 <__kernel_sinf+0x7c>
 8008368:	eee6 7a07 	vfma.f32	s15, s12, s14
 800836c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80083bc <__kernel_sinf+0x80>
 8008370:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008374:	eddf 7a12 	vldr	s15, [pc, #72]	; 80083c0 <__kernel_sinf+0x84>
 8008378:	ee60 6a07 	vmul.f32	s13, s0, s14
 800837c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008380:	b930      	cbnz	r0, 8008390 <__kernel_sinf+0x54>
 8008382:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80083c4 <__kernel_sinf+0x88>
 8008386:	eea7 6a27 	vfma.f32	s12, s14, s15
 800838a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800838e:	4770      	bx	lr
 8008390:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008394:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008398:	eee0 7a86 	vfma.f32	s15, s1, s12
 800839c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80083a0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80083c8 <__kernel_sinf+0x8c>
 80083a4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80083a8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	2f2ec9d3 	.word	0x2f2ec9d3
 80083b4:	b2d72f34 	.word	0xb2d72f34
 80083b8:	3638ef1b 	.word	0x3638ef1b
 80083bc:	b9500d01 	.word	0xb9500d01
 80083c0:	3c088889 	.word	0x3c088889
 80083c4:	be2aaaab 	.word	0xbe2aaaab
 80083c8:	3e2aaaab 	.word	0x3e2aaaab

080083cc <__ieee754_atan2f>:
 80083cc:	ee10 2a90 	vmov	r2, s1
 80083d0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80083d4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80083d8:	b510      	push	{r4, lr}
 80083da:	eef0 7a40 	vmov.f32	s15, s0
 80083de:	dc06      	bgt.n	80083ee <__ieee754_atan2f+0x22>
 80083e0:	ee10 0a10 	vmov	r0, s0
 80083e4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80083e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80083ec:	dd04      	ble.n	80083f8 <__ieee754_atan2f+0x2c>
 80083ee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80083f2:	eeb0 0a67 	vmov.f32	s0, s15
 80083f6:	bd10      	pop	{r4, pc}
 80083f8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80083fc:	d103      	bne.n	8008406 <__ieee754_atan2f+0x3a>
 80083fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008402:	f000 ba31 	b.w	8008868 <atanf>
 8008406:	1794      	asrs	r4, r2, #30
 8008408:	f004 0402 	and.w	r4, r4, #2
 800840c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008410:	b943      	cbnz	r3, 8008424 <__ieee754_atan2f+0x58>
 8008412:	2c02      	cmp	r4, #2
 8008414:	d05e      	beq.n	80084d4 <__ieee754_atan2f+0x108>
 8008416:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80084e8 <__ieee754_atan2f+0x11c>
 800841a:	2c03      	cmp	r4, #3
 800841c:	bf08      	it	eq
 800841e:	eef0 7a47 	vmoveq.f32	s15, s14
 8008422:	e7e6      	b.n	80083f2 <__ieee754_atan2f+0x26>
 8008424:	b941      	cbnz	r1, 8008438 <__ieee754_atan2f+0x6c>
 8008426:	eddf 7a31 	vldr	s15, [pc, #196]	; 80084ec <__ieee754_atan2f+0x120>
 800842a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80084f0 <__ieee754_atan2f+0x124>
 800842e:	2800      	cmp	r0, #0
 8008430:	bfb8      	it	lt
 8008432:	eef0 7a47 	vmovlt.f32	s15, s14
 8008436:	e7dc      	b.n	80083f2 <__ieee754_atan2f+0x26>
 8008438:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800843c:	d110      	bne.n	8008460 <__ieee754_atan2f+0x94>
 800843e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008442:	f104 34ff 	add.w	r4, r4, #4294967295
 8008446:	d107      	bne.n	8008458 <__ieee754_atan2f+0x8c>
 8008448:	2c02      	cmp	r4, #2
 800844a:	d846      	bhi.n	80084da <__ieee754_atan2f+0x10e>
 800844c:	4b29      	ldr	r3, [pc, #164]	; (80084f4 <__ieee754_atan2f+0x128>)
 800844e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008452:	edd3 7a00 	vldr	s15, [r3]
 8008456:	e7cc      	b.n	80083f2 <__ieee754_atan2f+0x26>
 8008458:	2c02      	cmp	r4, #2
 800845a:	d841      	bhi.n	80084e0 <__ieee754_atan2f+0x114>
 800845c:	4b26      	ldr	r3, [pc, #152]	; (80084f8 <__ieee754_atan2f+0x12c>)
 800845e:	e7f6      	b.n	800844e <__ieee754_atan2f+0x82>
 8008460:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008464:	d0df      	beq.n	8008426 <__ieee754_atan2f+0x5a>
 8008466:	1a5b      	subs	r3, r3, r1
 8008468:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800846c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008470:	da1a      	bge.n	80084a8 <__ieee754_atan2f+0xdc>
 8008472:	2a00      	cmp	r2, #0
 8008474:	da01      	bge.n	800847a <__ieee754_atan2f+0xae>
 8008476:	313c      	adds	r1, #60	; 0x3c
 8008478:	db19      	blt.n	80084ae <__ieee754_atan2f+0xe2>
 800847a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800847e:	f000 fac7 	bl	8008a10 <fabsf>
 8008482:	f000 f9f1 	bl	8008868 <atanf>
 8008486:	eef0 7a40 	vmov.f32	s15, s0
 800848a:	2c01      	cmp	r4, #1
 800848c:	d012      	beq.n	80084b4 <__ieee754_atan2f+0xe8>
 800848e:	2c02      	cmp	r4, #2
 8008490:	d017      	beq.n	80084c2 <__ieee754_atan2f+0xf6>
 8008492:	2c00      	cmp	r4, #0
 8008494:	d0ad      	beq.n	80083f2 <__ieee754_atan2f+0x26>
 8008496:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80084fc <__ieee754_atan2f+0x130>
 800849a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800849e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008500 <__ieee754_atan2f+0x134>
 80084a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084a6:	e7a4      	b.n	80083f2 <__ieee754_atan2f+0x26>
 80084a8:	eddf 7a10 	vldr	s15, [pc, #64]	; 80084ec <__ieee754_atan2f+0x120>
 80084ac:	e7ed      	b.n	800848a <__ieee754_atan2f+0xbe>
 80084ae:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008504 <__ieee754_atan2f+0x138>
 80084b2:	e7ea      	b.n	800848a <__ieee754_atan2f+0xbe>
 80084b4:	ee17 3a90 	vmov	r3, s15
 80084b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80084bc:	ee07 3a90 	vmov	s15, r3
 80084c0:	e797      	b.n	80083f2 <__ieee754_atan2f+0x26>
 80084c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80084fc <__ieee754_atan2f+0x130>
 80084c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008500 <__ieee754_atan2f+0x134>
 80084ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084d2:	e78e      	b.n	80083f2 <__ieee754_atan2f+0x26>
 80084d4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008500 <__ieee754_atan2f+0x134>
 80084d8:	e78b      	b.n	80083f2 <__ieee754_atan2f+0x26>
 80084da:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008508 <__ieee754_atan2f+0x13c>
 80084de:	e788      	b.n	80083f2 <__ieee754_atan2f+0x26>
 80084e0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008504 <__ieee754_atan2f+0x138>
 80084e4:	e785      	b.n	80083f2 <__ieee754_atan2f+0x26>
 80084e6:	bf00      	nop
 80084e8:	c0490fdb 	.word	0xc0490fdb
 80084ec:	3fc90fdb 	.word	0x3fc90fdb
 80084f0:	bfc90fdb 	.word	0xbfc90fdb
 80084f4:	080090a4 	.word	0x080090a4
 80084f8:	080090b0 	.word	0x080090b0
 80084fc:	33bbbd2e 	.word	0x33bbbd2e
 8008500:	40490fdb 	.word	0x40490fdb
 8008504:	00000000 	.word	0x00000000
 8008508:	3f490fdb 	.word	0x3f490fdb

0800850c <__ieee754_fmodf>:
 800850c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850e:	ee10 4a90 	vmov	r4, s1
 8008512:	f034 4000 	bics.w	r0, r4, #2147483648	; 0x80000000
 8008516:	d009      	beq.n	800852c <__ieee754_fmodf+0x20>
 8008518:	ee10 3a10 	vmov	r3, s0
 800851c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8008520:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008524:	da02      	bge.n	800852c <__ieee754_fmodf+0x20>
 8008526:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800852a:	dd04      	ble.n	8008536 <__ieee754_fmodf+0x2a>
 800852c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8008530:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8008534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008536:	4286      	cmp	r6, r0
 8008538:	dbfc      	blt.n	8008534 <__ieee754_fmodf+0x28>
 800853a:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
 800853e:	d105      	bne.n	800854c <__ieee754_fmodf+0x40>
 8008540:	4b32      	ldr	r3, [pc, #200]	; (800860c <__ieee754_fmodf+0x100>)
 8008542:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8008546:	ed93 0a00 	vldr	s0, [r3]
 800854a:	e7f3      	b.n	8008534 <__ieee754_fmodf+0x28>
 800854c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008550:	d140      	bne.n	80085d4 <__ieee754_fmodf+0xc8>
 8008552:	0232      	lsls	r2, r6, #8
 8008554:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8008558:	2a00      	cmp	r2, #0
 800855a:	dc38      	bgt.n	80085ce <__ieee754_fmodf+0xc2>
 800855c:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 8008560:	d13e      	bne.n	80085e0 <__ieee754_fmodf+0xd4>
 8008562:	0207      	lsls	r7, r0, #8
 8008564:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8008568:	2f00      	cmp	r7, #0
 800856a:	da36      	bge.n	80085da <__ieee754_fmodf+0xce>
 800856c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008570:	bfb9      	ittee	lt
 8008572:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8008576:	1a5b      	sublt	r3, r3, r1
 8008578:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800857c:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8008580:	bfb8      	it	lt
 8008582:	fa06 f303 	lsllt.w	r3, r6, r3
 8008586:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800858a:	bfb5      	itete	lt
 800858c:	f06f 047d 	mvnlt.w	r4, #125	; 0x7d
 8008590:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8008594:	1aa4      	sublt	r4, r4, r2
 8008596:	f444 0000 	orrge.w	r0, r4, #8388608	; 0x800000
 800859a:	bfb8      	it	lt
 800859c:	40a0      	lsllt	r0, r4
 800859e:	1a89      	subs	r1, r1, r2
 80085a0:	1a1c      	subs	r4, r3, r0
 80085a2:	bb01      	cbnz	r1, 80085e6 <__ieee754_fmodf+0xda>
 80085a4:	ea13 0324 	ands.w	r3, r3, r4, asr #32
 80085a8:	bf38      	it	cc
 80085aa:	4623      	movcc	r3, r4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0c7      	beq.n	8008540 <__ieee754_fmodf+0x34>
 80085b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085b4:	db1f      	blt.n	80085f6 <__ieee754_fmodf+0xea>
 80085b6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80085ba:	db1f      	blt.n	80085fc <__ieee754_fmodf+0xf0>
 80085bc:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80085c0:	327f      	adds	r2, #127	; 0x7f
 80085c2:	432b      	orrs	r3, r5
 80085c4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80085c8:	ee00 3a10 	vmov	s0, r3
 80085cc:	e7b2      	b.n	8008534 <__ieee754_fmodf+0x28>
 80085ce:	3901      	subs	r1, #1
 80085d0:	0052      	lsls	r2, r2, #1
 80085d2:	e7c1      	b.n	8008558 <__ieee754_fmodf+0x4c>
 80085d4:	15f1      	asrs	r1, r6, #23
 80085d6:	397f      	subs	r1, #127	; 0x7f
 80085d8:	e7c0      	b.n	800855c <__ieee754_fmodf+0x50>
 80085da:	3a01      	subs	r2, #1
 80085dc:	007f      	lsls	r7, r7, #1
 80085de:	e7c3      	b.n	8008568 <__ieee754_fmodf+0x5c>
 80085e0:	15c2      	asrs	r2, r0, #23
 80085e2:	3a7f      	subs	r2, #127	; 0x7f
 80085e4:	e7c2      	b.n	800856c <__ieee754_fmodf+0x60>
 80085e6:	2c00      	cmp	r4, #0
 80085e8:	da02      	bge.n	80085f0 <__ieee754_fmodf+0xe4>
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	3901      	subs	r1, #1
 80085ee:	e7d7      	b.n	80085a0 <__ieee754_fmodf+0x94>
 80085f0:	d0a6      	beq.n	8008540 <__ieee754_fmodf+0x34>
 80085f2:	0063      	lsls	r3, r4, #1
 80085f4:	e7fa      	b.n	80085ec <__ieee754_fmodf+0xe0>
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	3a01      	subs	r2, #1
 80085fa:	e7d9      	b.n	80085b0 <__ieee754_fmodf+0xa4>
 80085fc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008600:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008604:	3282      	adds	r2, #130	; 0x82
 8008606:	4113      	asrs	r3, r2
 8008608:	432b      	orrs	r3, r5
 800860a:	e7dd      	b.n	80085c8 <__ieee754_fmodf+0xbc>
 800860c:	080090bc 	.word	0x080090bc

08008610 <__ieee754_rem_pio2f>:
 8008610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008612:	ee10 6a10 	vmov	r6, s0
 8008616:	4b86      	ldr	r3, [pc, #536]	; (8008830 <__ieee754_rem_pio2f+0x220>)
 8008618:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800861c:	429d      	cmp	r5, r3
 800861e:	b087      	sub	sp, #28
 8008620:	4604      	mov	r4, r0
 8008622:	dc05      	bgt.n	8008630 <__ieee754_rem_pio2f+0x20>
 8008624:	2300      	movs	r3, #0
 8008626:	ed80 0a00 	vstr	s0, [r0]
 800862a:	6043      	str	r3, [r0, #4]
 800862c:	2000      	movs	r0, #0
 800862e:	e020      	b.n	8008672 <__ieee754_rem_pio2f+0x62>
 8008630:	4b80      	ldr	r3, [pc, #512]	; (8008834 <__ieee754_rem_pio2f+0x224>)
 8008632:	429d      	cmp	r5, r3
 8008634:	dc38      	bgt.n	80086a8 <__ieee754_rem_pio2f+0x98>
 8008636:	2e00      	cmp	r6, #0
 8008638:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8008838 <__ieee754_rem_pio2f+0x228>
 800863c:	4b7f      	ldr	r3, [pc, #508]	; (800883c <__ieee754_rem_pio2f+0x22c>)
 800863e:	f025 050f 	bic.w	r5, r5, #15
 8008642:	dd18      	ble.n	8008676 <__ieee754_rem_pio2f+0x66>
 8008644:	429d      	cmp	r5, r3
 8008646:	ee70 7a47 	vsub.f32	s15, s0, s14
 800864a:	bf09      	itett	eq
 800864c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8008840 <__ieee754_rem_pio2f+0x230>
 8008650:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008844 <__ieee754_rem_pio2f+0x234>
 8008654:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008658:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8008848 <__ieee754_rem_pio2f+0x238>
 800865c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008660:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008664:	edc0 6a00 	vstr	s13, [r0]
 8008668:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800866c:	edc0 7a01 	vstr	s15, [r0, #4]
 8008670:	2001      	movs	r0, #1
 8008672:	b007      	add	sp, #28
 8008674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008676:	429d      	cmp	r5, r3
 8008678:	ee70 7a07 	vadd.f32	s15, s0, s14
 800867c:	bf09      	itett	eq
 800867e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8008840 <__ieee754_rem_pio2f+0x230>
 8008682:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008844 <__ieee754_rem_pio2f+0x234>
 8008686:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800868a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8008848 <__ieee754_rem_pio2f+0x238>
 800868e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008692:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008696:	edc0 6a00 	vstr	s13, [r0]
 800869a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800869e:	edc0 7a01 	vstr	s15, [r0, #4]
 80086a2:	f04f 30ff 	mov.w	r0, #4294967295
 80086a6:	e7e4      	b.n	8008672 <__ieee754_rem_pio2f+0x62>
 80086a8:	4b68      	ldr	r3, [pc, #416]	; (800884c <__ieee754_rem_pio2f+0x23c>)
 80086aa:	429d      	cmp	r5, r3
 80086ac:	dc71      	bgt.n	8008792 <__ieee754_rem_pio2f+0x182>
 80086ae:	f000 f9af 	bl	8008a10 <fabsf>
 80086b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008850 <__ieee754_rem_pio2f+0x240>
 80086b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80086ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80086be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086c6:	ee17 0a90 	vmov	r0, s15
 80086ca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008838 <__ieee754_rem_pio2f+0x228>
 80086ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 80086d2:	281f      	cmp	r0, #31
 80086d4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008844 <__ieee754_rem_pio2f+0x234>
 80086d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086dc:	eeb1 6a47 	vneg.f32	s12, s14
 80086e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80086e4:	ee16 2a90 	vmov	r2, s13
 80086e8:	dc1c      	bgt.n	8008724 <__ieee754_rem_pio2f+0x114>
 80086ea:	495a      	ldr	r1, [pc, #360]	; (8008854 <__ieee754_rem_pio2f+0x244>)
 80086ec:	1e47      	subs	r7, r0, #1
 80086ee:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80086f2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80086f6:	428b      	cmp	r3, r1
 80086f8:	d014      	beq.n	8008724 <__ieee754_rem_pio2f+0x114>
 80086fa:	6022      	str	r2, [r4, #0]
 80086fc:	ed94 7a00 	vldr	s14, [r4]
 8008700:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008704:	2e00      	cmp	r6, #0
 8008706:	ee30 0a67 	vsub.f32	s0, s0, s15
 800870a:	ed84 0a01 	vstr	s0, [r4, #4]
 800870e:	dab0      	bge.n	8008672 <__ieee754_rem_pio2f+0x62>
 8008710:	eeb1 7a47 	vneg.f32	s14, s14
 8008714:	eeb1 0a40 	vneg.f32	s0, s0
 8008718:	ed84 7a00 	vstr	s14, [r4]
 800871c:	ed84 0a01 	vstr	s0, [r4, #4]
 8008720:	4240      	negs	r0, r0
 8008722:	e7a6      	b.n	8008672 <__ieee754_rem_pio2f+0x62>
 8008724:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008728:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800872c:	2908      	cmp	r1, #8
 800872e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8008732:	dde2      	ble.n	80086fa <__ieee754_rem_pio2f+0xea>
 8008734:	eddf 5a42 	vldr	s11, [pc, #264]	; 8008840 <__ieee754_rem_pio2f+0x230>
 8008738:	eef0 6a40 	vmov.f32	s13, s0
 800873c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8008740:	ee70 7a66 	vsub.f32	s15, s0, s13
 8008744:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008748:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008848 <__ieee754_rem_pio2f+0x238>
 800874c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008750:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008754:	ee15 2a90 	vmov	r2, s11
 8008758:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800875c:	1a5b      	subs	r3, r3, r1
 800875e:	2b19      	cmp	r3, #25
 8008760:	dc04      	bgt.n	800876c <__ieee754_rem_pio2f+0x15c>
 8008762:	edc4 5a00 	vstr	s11, [r4]
 8008766:	eeb0 0a66 	vmov.f32	s0, s13
 800876a:	e7c7      	b.n	80086fc <__ieee754_rem_pio2f+0xec>
 800876c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008858 <__ieee754_rem_pio2f+0x248>
 8008770:	eeb0 0a66 	vmov.f32	s0, s13
 8008774:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008778:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800877c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800885c <__ieee754_rem_pio2f+0x24c>
 8008780:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008784:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008788:	ee30 7a67 	vsub.f32	s14, s0, s15
 800878c:	ed84 7a00 	vstr	s14, [r4]
 8008790:	e7b4      	b.n	80086fc <__ieee754_rem_pio2f+0xec>
 8008792:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008796:	db06      	blt.n	80087a6 <__ieee754_rem_pio2f+0x196>
 8008798:	ee70 7a40 	vsub.f32	s15, s0, s0
 800879c:	edc0 7a01 	vstr	s15, [r0, #4]
 80087a0:	edc0 7a00 	vstr	s15, [r0]
 80087a4:	e742      	b.n	800862c <__ieee754_rem_pio2f+0x1c>
 80087a6:	15ea      	asrs	r2, r5, #23
 80087a8:	3a86      	subs	r2, #134	; 0x86
 80087aa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087b6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8008860 <__ieee754_rem_pio2f+0x250>
 80087ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80087be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087c2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80087c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80087ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80087d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087d6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80087da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80087de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e6:	edcd 7a05 	vstr	s15, [sp, #20]
 80087ea:	d11e      	bne.n	800882a <__ieee754_rem_pio2f+0x21a>
 80087ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80087f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f4:	bf14      	ite	ne
 80087f6:	2302      	movne	r3, #2
 80087f8:	2301      	moveq	r3, #1
 80087fa:	491a      	ldr	r1, [pc, #104]	; (8008864 <__ieee754_rem_pio2f+0x254>)
 80087fc:	9101      	str	r1, [sp, #4]
 80087fe:	2102      	movs	r1, #2
 8008800:	9100      	str	r1, [sp, #0]
 8008802:	a803      	add	r0, sp, #12
 8008804:	4621      	mov	r1, r4
 8008806:	f000 f90b 	bl	8008a20 <__kernel_rem_pio2f>
 800880a:	2e00      	cmp	r6, #0
 800880c:	f6bf af31 	bge.w	8008672 <__ieee754_rem_pio2f+0x62>
 8008810:	edd4 7a00 	vldr	s15, [r4]
 8008814:	eef1 7a67 	vneg.f32	s15, s15
 8008818:	edc4 7a00 	vstr	s15, [r4]
 800881c:	edd4 7a01 	vldr	s15, [r4, #4]
 8008820:	eef1 7a67 	vneg.f32	s15, s15
 8008824:	edc4 7a01 	vstr	s15, [r4, #4]
 8008828:	e77a      	b.n	8008720 <__ieee754_rem_pio2f+0x110>
 800882a:	2303      	movs	r3, #3
 800882c:	e7e5      	b.n	80087fa <__ieee754_rem_pio2f+0x1ea>
 800882e:	bf00      	nop
 8008830:	3f490fd8 	.word	0x3f490fd8
 8008834:	4016cbe3 	.word	0x4016cbe3
 8008838:	3fc90f80 	.word	0x3fc90f80
 800883c:	3fc90fd0 	.word	0x3fc90fd0
 8008840:	37354400 	.word	0x37354400
 8008844:	37354443 	.word	0x37354443
 8008848:	2e85a308 	.word	0x2e85a308
 800884c:	43490f80 	.word	0x43490f80
 8008850:	3f22f984 	.word	0x3f22f984
 8008854:	080090c4 	.word	0x080090c4
 8008858:	2e85a300 	.word	0x2e85a300
 800885c:	248d3132 	.word	0x248d3132
 8008860:	43800000 	.word	0x43800000
 8008864:	08009144 	.word	0x08009144

08008868 <atanf>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	ee10 5a10 	vmov	r5, s0
 800886e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008872:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008876:	eef0 7a40 	vmov.f32	s15, s0
 800887a:	db10      	blt.n	800889e <atanf+0x36>
 800887c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008880:	dd04      	ble.n	800888c <atanf+0x24>
 8008882:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008886:	eeb0 0a67 	vmov.f32	s0, s15
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80089c4 <atanf+0x15c>
 8008890:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80089c8 <atanf+0x160>
 8008894:	2d00      	cmp	r5, #0
 8008896:	bfd8      	it	le
 8008898:	eef0 7a47 	vmovle.f32	s15, s14
 800889c:	e7f3      	b.n	8008886 <atanf+0x1e>
 800889e:	4b4b      	ldr	r3, [pc, #300]	; (80089cc <atanf+0x164>)
 80088a0:	429c      	cmp	r4, r3
 80088a2:	dc10      	bgt.n	80088c6 <atanf+0x5e>
 80088a4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80088a8:	da0a      	bge.n	80088c0 <atanf+0x58>
 80088aa:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80089d0 <atanf+0x168>
 80088ae:	ee30 7a07 	vadd.f32	s14, s0, s14
 80088b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80088ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088be:	dce2      	bgt.n	8008886 <atanf+0x1e>
 80088c0:	f04f 33ff 	mov.w	r3, #4294967295
 80088c4:	e013      	b.n	80088ee <atanf+0x86>
 80088c6:	f000 f8a3 	bl	8008a10 <fabsf>
 80088ca:	4b42      	ldr	r3, [pc, #264]	; (80089d4 <atanf+0x16c>)
 80088cc:	429c      	cmp	r4, r3
 80088ce:	dc4f      	bgt.n	8008970 <atanf+0x108>
 80088d0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80088d4:	429c      	cmp	r4, r3
 80088d6:	dc41      	bgt.n	800895c <atanf+0xf4>
 80088d8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80088dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80088e0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80088e4:	2300      	movs	r3, #0
 80088e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80088ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80088ee:	1c5a      	adds	r2, r3, #1
 80088f0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80088f4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80089d8 <atanf+0x170>
 80088f8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80089dc <atanf+0x174>
 80088fc:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80089e0 <atanf+0x178>
 8008900:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008904:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008908:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80089e4 <atanf+0x17c>
 800890c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008910:	eddf 5a35 	vldr	s11, [pc, #212]	; 80089e8 <atanf+0x180>
 8008914:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008918:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80089ec <atanf+0x184>
 800891c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008920:	eddf 5a33 	vldr	s11, [pc, #204]	; 80089f0 <atanf+0x188>
 8008924:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008928:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80089f4 <atanf+0x18c>
 800892c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008930:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80089f8 <atanf+0x190>
 8008934:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008938:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80089fc <atanf+0x194>
 800893c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008940:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008a00 <atanf+0x198>
 8008944:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008948:	ee27 7a26 	vmul.f32	s14, s14, s13
 800894c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008950:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008954:	d121      	bne.n	800899a <atanf+0x132>
 8008956:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800895a:	e794      	b.n	8008886 <atanf+0x1e>
 800895c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008960:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008964:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008968:	2301      	movs	r3, #1
 800896a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800896e:	e7be      	b.n	80088ee <atanf+0x86>
 8008970:	4b24      	ldr	r3, [pc, #144]	; (8008a04 <atanf+0x19c>)
 8008972:	429c      	cmp	r4, r3
 8008974:	dc0b      	bgt.n	800898e <atanf+0x126>
 8008976:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800897a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800897e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008982:	2302      	movs	r3, #2
 8008984:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800898c:	e7af      	b.n	80088ee <atanf+0x86>
 800898e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008992:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008996:	2303      	movs	r3, #3
 8008998:	e7a9      	b.n	80088ee <atanf+0x86>
 800899a:	4a1b      	ldr	r2, [pc, #108]	; (8008a08 <atanf+0x1a0>)
 800899c:	491b      	ldr	r1, [pc, #108]	; (8008a0c <atanf+0x1a4>)
 800899e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80089a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80089a6:	edd3 6a00 	vldr	s13, [r3]
 80089aa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80089ae:	2d00      	cmp	r5, #0
 80089b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80089b4:	edd2 7a00 	vldr	s15, [r2]
 80089b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089bc:	bfb8      	it	lt
 80089be:	eef1 7a67 	vneglt.f32	s15, s15
 80089c2:	e760      	b.n	8008886 <atanf+0x1e>
 80089c4:	3fc90fdb 	.word	0x3fc90fdb
 80089c8:	bfc90fdb 	.word	0xbfc90fdb
 80089cc:	3edfffff 	.word	0x3edfffff
 80089d0:	7149f2ca 	.word	0x7149f2ca
 80089d4:	3f97ffff 	.word	0x3f97ffff
 80089d8:	3c8569d7 	.word	0x3c8569d7
 80089dc:	3d4bda59 	.word	0x3d4bda59
 80089e0:	bd6ef16b 	.word	0xbd6ef16b
 80089e4:	3d886b35 	.word	0x3d886b35
 80089e8:	3dba2e6e 	.word	0x3dba2e6e
 80089ec:	3e124925 	.word	0x3e124925
 80089f0:	3eaaaaab 	.word	0x3eaaaaab
 80089f4:	bd15a221 	.word	0xbd15a221
 80089f8:	bd9d8795 	.word	0xbd9d8795
 80089fc:	bde38e38 	.word	0xbde38e38
 8008a00:	be4ccccd 	.word	0xbe4ccccd
 8008a04:	401bffff 	.word	0x401bffff
 8008a08:	0800945c 	.word	0x0800945c
 8008a0c:	0800946c 	.word	0x0800946c

08008a10 <fabsf>:
 8008a10:	ee10 3a10 	vmov	r3, s0
 8008a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a18:	ee00 3a10 	vmov	s0, r3
 8008a1c:	4770      	bx	lr
	...

08008a20 <__kernel_rem_pio2f>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	ed2d 8b04 	vpush	{d8-d9}
 8008a28:	b0d9      	sub	sp, #356	; 0x164
 8008a2a:	4688      	mov	r8, r1
 8008a2c:	9002      	str	r0, [sp, #8]
 8008a2e:	49b8      	ldr	r1, [pc, #736]	; (8008d10 <__kernel_rem_pio2f+0x2f0>)
 8008a30:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008a32:	9301      	str	r3, [sp, #4]
 8008a34:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008a38:	9901      	ldr	r1, [sp, #4]
 8008a3a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8008a3c:	f101 3bff 	add.w	fp, r1, #4294967295
 8008a40:	1d11      	adds	r1, r2, #4
 8008a42:	db25      	blt.n	8008a90 <__kernel_rem_pio2f+0x70>
 8008a44:	1ed0      	subs	r0, r2, #3
 8008a46:	bf48      	it	mi
 8008a48:	1d10      	addmi	r0, r2, #4
 8008a4a:	10c0      	asrs	r0, r0, #3
 8008a4c:	1c45      	adds	r5, r0, #1
 8008a4e:	00e9      	lsls	r1, r5, #3
 8008a50:	eba0 070b 	sub.w	r7, r0, fp
 8008a54:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8008d20 <__kernel_rem_pio2f+0x300>
 8008a58:	9103      	str	r1, [sp, #12]
 8008a5a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008a5e:	eb0a 0c0b 	add.w	ip, sl, fp
 8008a62:	ae1c      	add	r6, sp, #112	; 0x70
 8008a64:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8008a68:	2400      	movs	r4, #0
 8008a6a:	4564      	cmp	r4, ip
 8008a6c:	dd12      	ble.n	8008a94 <__kernel_rem_pio2f+0x74>
 8008a6e:	9901      	ldr	r1, [sp, #4]
 8008a70:	ac1c      	add	r4, sp, #112	; 0x70
 8008a72:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8008a76:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8008a7a:	f04f 0c00 	mov.w	ip, #0
 8008a7e:	45d4      	cmp	ip, sl
 8008a80:	dc27      	bgt.n	8008ad2 <__kernel_rem_pio2f+0xb2>
 8008a82:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008a86:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8008d20 <__kernel_rem_pio2f+0x300>
 8008a8a:	4627      	mov	r7, r4
 8008a8c:	2600      	movs	r6, #0
 8008a8e:	e016      	b.n	8008abe <__kernel_rem_pio2f+0x9e>
 8008a90:	2000      	movs	r0, #0
 8008a92:	e7db      	b.n	8008a4c <__kernel_rem_pio2f+0x2c>
 8008a94:	42e7      	cmn	r7, r4
 8008a96:	bf5d      	ittte	pl
 8008a98:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8008a9c:	ee07 1a90 	vmovpl	s15, r1
 8008aa0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008aa4:	eef0 7a47 	vmovmi.f32	s15, s14
 8008aa8:	ece6 7a01 	vstmia	r6!, {s15}
 8008aac:	3401      	adds	r4, #1
 8008aae:	e7dc      	b.n	8008a6a <__kernel_rem_pio2f+0x4a>
 8008ab0:	ecfe 6a01 	vldmia	lr!, {s13}
 8008ab4:	ed97 7a00 	vldr	s14, [r7]
 8008ab8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008abc:	3601      	adds	r6, #1
 8008abe:	455e      	cmp	r6, fp
 8008ac0:	f1a7 0704 	sub.w	r7, r7, #4
 8008ac4:	ddf4      	ble.n	8008ab0 <__kernel_rem_pio2f+0x90>
 8008ac6:	ece9 7a01 	vstmia	r9!, {s15}
 8008aca:	f10c 0c01 	add.w	ip, ip, #1
 8008ace:	3404      	adds	r4, #4
 8008ad0:	e7d5      	b.n	8008a7e <__kernel_rem_pio2f+0x5e>
 8008ad2:	a908      	add	r1, sp, #32
 8008ad4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ad8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008adc:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8008d1c <__kernel_rem_pio2f+0x2fc>
 8008ae0:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8008d18 <__kernel_rem_pio2f+0x2f8>
 8008ae4:	9105      	str	r1, [sp, #20]
 8008ae6:	9304      	str	r3, [sp, #16]
 8008ae8:	4656      	mov	r6, sl
 8008aea:	00b3      	lsls	r3, r6, #2
 8008aec:	9306      	str	r3, [sp, #24]
 8008aee:	ab58      	add	r3, sp, #352	; 0x160
 8008af0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008af4:	ac08      	add	r4, sp, #32
 8008af6:	ab44      	add	r3, sp, #272	; 0x110
 8008af8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008afc:	46a4      	mov	ip, r4
 8008afe:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008b02:	4637      	mov	r7, r6
 8008b04:	2f00      	cmp	r7, #0
 8008b06:	f1a0 0004 	sub.w	r0, r0, #4
 8008b0a:	dc4a      	bgt.n	8008ba2 <__kernel_rem_pio2f+0x182>
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	9207      	str	r2, [sp, #28]
 8008b10:	f000 f9f8 	bl	8008f04 <scalbnf>
 8008b14:	eeb0 8a40 	vmov.f32	s16, s0
 8008b18:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008b1c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008b20:	f000 fa56 	bl	8008fd0 <floorf>
 8008b24:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008b28:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008b2c:	2d00      	cmp	r5, #0
 8008b2e:	9a07      	ldr	r2, [sp, #28]
 8008b30:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008b34:	ee17 9a90 	vmov	r9, s15
 8008b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b3c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008b40:	dd41      	ble.n	8008bc6 <__kernel_rem_pio2f+0x1a6>
 8008b42:	f106 3cff 	add.w	ip, r6, #4294967295
 8008b46:	ab08      	add	r3, sp, #32
 8008b48:	f1c5 0e08 	rsb	lr, r5, #8
 8008b4c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008b50:	fa47 f00e 	asr.w	r0, r7, lr
 8008b54:	4481      	add	r9, r0
 8008b56:	fa00 f00e 	lsl.w	r0, r0, lr
 8008b5a:	1a3f      	subs	r7, r7, r0
 8008b5c:	f1c5 0007 	rsb	r0, r5, #7
 8008b60:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008b64:	4107      	asrs	r7, r0
 8008b66:	2f00      	cmp	r7, #0
 8008b68:	dd3c      	ble.n	8008be4 <__kernel_rem_pio2f+0x1c4>
 8008b6a:	f04f 0e00 	mov.w	lr, #0
 8008b6e:	f109 0901 	add.w	r9, r9, #1
 8008b72:	4671      	mov	r1, lr
 8008b74:	4576      	cmp	r6, lr
 8008b76:	dc67      	bgt.n	8008c48 <__kernel_rem_pio2f+0x228>
 8008b78:	2d00      	cmp	r5, #0
 8008b7a:	dd03      	ble.n	8008b84 <__kernel_rem_pio2f+0x164>
 8008b7c:	2d01      	cmp	r5, #1
 8008b7e:	d074      	beq.n	8008c6a <__kernel_rem_pio2f+0x24a>
 8008b80:	2d02      	cmp	r5, #2
 8008b82:	d07b      	beq.n	8008c7c <__kernel_rem_pio2f+0x25c>
 8008b84:	2f02      	cmp	r7, #2
 8008b86:	d12d      	bne.n	8008be4 <__kernel_rem_pio2f+0x1c4>
 8008b88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008b8c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008b90:	b341      	cbz	r1, 8008be4 <__kernel_rem_pio2f+0x1c4>
 8008b92:	4628      	mov	r0, r5
 8008b94:	9207      	str	r2, [sp, #28]
 8008b96:	f000 f9b5 	bl	8008f04 <scalbnf>
 8008b9a:	9a07      	ldr	r2, [sp, #28]
 8008b9c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008ba0:	e020      	b.n	8008be4 <__kernel_rem_pio2f+0x1c4>
 8008ba2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008ba6:	3f01      	subs	r7, #1
 8008ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bb0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008bb4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008bb8:	ecac 0a01 	vstmia	ip!, {s0}
 8008bbc:	ed90 0a00 	vldr	s0, [r0]
 8008bc0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008bc4:	e79e      	b.n	8008b04 <__kernel_rem_pio2f+0xe4>
 8008bc6:	d105      	bne.n	8008bd4 <__kernel_rem_pio2f+0x1b4>
 8008bc8:	1e70      	subs	r0, r6, #1
 8008bca:	ab08      	add	r3, sp, #32
 8008bcc:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008bd0:	11ff      	asrs	r7, r7, #7
 8008bd2:	e7c8      	b.n	8008b66 <__kernel_rem_pio2f+0x146>
 8008bd4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008bd8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be0:	da30      	bge.n	8008c44 <__kernel_rem_pio2f+0x224>
 8008be2:	2700      	movs	r7, #0
 8008be4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bec:	f040 809a 	bne.w	8008d24 <__kernel_rem_pio2f+0x304>
 8008bf0:	1e74      	subs	r4, r6, #1
 8008bf2:	46a4      	mov	ip, r4
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	45d4      	cmp	ip, sl
 8008bf8:	da47      	bge.n	8008c8a <__kernel_rem_pio2f+0x26a>
 8008bfa:	2900      	cmp	r1, #0
 8008bfc:	d063      	beq.n	8008cc6 <__kernel_rem_pio2f+0x2a6>
 8008bfe:	ab08      	add	r3, sp, #32
 8008c00:	3d08      	subs	r5, #8
 8008c02:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d07f      	beq.n	8008d0a <__kernel_rem_pio2f+0x2ea>
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008c10:	f000 f978 	bl	8008f04 <scalbnf>
 8008c14:	1c63      	adds	r3, r4, #1
 8008c16:	aa44      	add	r2, sp, #272	; 0x110
 8008c18:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008d1c <__kernel_rem_pio2f+0x2fc>
 8008c1c:	0099      	lsls	r1, r3, #2
 8008c1e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008c22:	4623      	mov	r3, r4
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f280 80ad 	bge.w	8008d84 <__kernel_rem_pio2f+0x364>
 8008c2a:	4623      	mov	r3, r4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f2c0 80cb 	blt.w	8008dc8 <__kernel_rem_pio2f+0x3a8>
 8008c32:	aa44      	add	r2, sp, #272	; 0x110
 8008c34:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008c38:	4e36      	ldr	r6, [pc, #216]	; (8008d14 <__kernel_rem_pio2f+0x2f4>)
 8008c3a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008d20 <__kernel_rem_pio2f+0x300>
 8008c3e:	2000      	movs	r0, #0
 8008c40:	1ae2      	subs	r2, r4, r3
 8008c42:	e0b6      	b.n	8008db2 <__kernel_rem_pio2f+0x392>
 8008c44:	2702      	movs	r7, #2
 8008c46:	e790      	b.n	8008b6a <__kernel_rem_pio2f+0x14a>
 8008c48:	6820      	ldr	r0, [r4, #0]
 8008c4a:	b949      	cbnz	r1, 8008c60 <__kernel_rem_pio2f+0x240>
 8008c4c:	b118      	cbz	r0, 8008c56 <__kernel_rem_pio2f+0x236>
 8008c4e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008c52:	6020      	str	r0, [r4, #0]
 8008c54:	2001      	movs	r0, #1
 8008c56:	f10e 0e01 	add.w	lr, lr, #1
 8008c5a:	3404      	adds	r4, #4
 8008c5c:	4601      	mov	r1, r0
 8008c5e:	e789      	b.n	8008b74 <__kernel_rem_pio2f+0x154>
 8008c60:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008c64:	6020      	str	r0, [r4, #0]
 8008c66:	4608      	mov	r0, r1
 8008c68:	e7f5      	b.n	8008c56 <__kernel_rem_pio2f+0x236>
 8008c6a:	1e74      	subs	r4, r6, #1
 8008c6c:	ab08      	add	r3, sp, #32
 8008c6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008c72:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008c76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008c7a:	e783      	b.n	8008b84 <__kernel_rem_pio2f+0x164>
 8008c7c:	1e74      	subs	r4, r6, #1
 8008c7e:	ab08      	add	r3, sp, #32
 8008c80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008c84:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008c88:	e7f5      	b.n	8008c76 <__kernel_rem_pio2f+0x256>
 8008c8a:	ab08      	add	r3, sp, #32
 8008c8c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8008c90:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c94:	4301      	orrs	r1, r0
 8008c96:	e7ae      	b.n	8008bf6 <__kernel_rem_pio2f+0x1d6>
 8008c98:	3001      	adds	r0, #1
 8008c9a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8008c9e:	2f00      	cmp	r7, #0
 8008ca0:	d0fa      	beq.n	8008c98 <__kernel_rem_pio2f+0x278>
 8008ca2:	9b06      	ldr	r3, [sp, #24]
 8008ca4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008ca8:	eb0d 0403 	add.w	r4, sp, r3
 8008cac:	9b01      	ldr	r3, [sp, #4]
 8008cae:	18f7      	adds	r7, r6, r3
 8008cb0:	ab1c      	add	r3, sp, #112	; 0x70
 8008cb2:	f106 0c01 	add.w	ip, r6, #1
 8008cb6:	3c4c      	subs	r4, #76	; 0x4c
 8008cb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008cbc:	4430      	add	r0, r6
 8008cbe:	4560      	cmp	r0, ip
 8008cc0:	da04      	bge.n	8008ccc <__kernel_rem_pio2f+0x2ac>
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	e711      	b.n	8008aea <__kernel_rem_pio2f+0xca>
 8008cc6:	9c05      	ldr	r4, [sp, #20]
 8008cc8:	2001      	movs	r0, #1
 8008cca:	e7e6      	b.n	8008c9a <__kernel_rem_pio2f+0x27a>
 8008ccc:	9b04      	ldr	r3, [sp, #16]
 8008cce:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008cd2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008cd6:	9306      	str	r3, [sp, #24]
 8008cd8:	ee07 3a90 	vmov	s15, r3
 8008cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ce0:	2600      	movs	r6, #0
 8008ce2:	ece7 7a01 	vstmia	r7!, {s15}
 8008ce6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008d20 <__kernel_rem_pio2f+0x300>
 8008cea:	46b9      	mov	r9, r7
 8008cec:	455e      	cmp	r6, fp
 8008cee:	dd04      	ble.n	8008cfa <__kernel_rem_pio2f+0x2da>
 8008cf0:	ece4 7a01 	vstmia	r4!, {s15}
 8008cf4:	f10c 0c01 	add.w	ip, ip, #1
 8008cf8:	e7e1      	b.n	8008cbe <__kernel_rem_pio2f+0x29e>
 8008cfa:	ecfe 6a01 	vldmia	lr!, {s13}
 8008cfe:	ed39 7a01 	vldmdb	r9!, {s14}
 8008d02:	3601      	adds	r6, #1
 8008d04:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008d08:	e7f0      	b.n	8008cec <__kernel_rem_pio2f+0x2cc>
 8008d0a:	3c01      	subs	r4, #1
 8008d0c:	e777      	b.n	8008bfe <__kernel_rem_pio2f+0x1de>
 8008d0e:	bf00      	nop
 8008d10:	080094a8 	.word	0x080094a8
 8008d14:	0800947c 	.word	0x0800947c
 8008d18:	43800000 	.word	0x43800000
 8008d1c:	3b800000 	.word	0x3b800000
 8008d20:	00000000 	.word	0x00000000
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	eeb0 0a48 	vmov.f32	s0, s16
 8008d2a:	1a98      	subs	r0, r3, r2
 8008d2c:	f000 f8ea 	bl	8008f04 <scalbnf>
 8008d30:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008d18 <__kernel_rem_pio2f+0x2f8>
 8008d34:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3c:	db19      	blt.n	8008d72 <__kernel_rem_pio2f+0x352>
 8008d3e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008d1c <__kernel_rem_pio2f+0x2fc>
 8008d42:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008d46:	aa08      	add	r2, sp, #32
 8008d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d4c:	1c74      	adds	r4, r6, #1
 8008d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d52:	3508      	adds	r5, #8
 8008d54:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008d60:	ee10 3a10 	vmov	r3, s0
 8008d64:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008d68:	ee17 3a90 	vmov	r3, s15
 8008d6c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008d70:	e74b      	b.n	8008c0a <__kernel_rem_pio2f+0x1ea>
 8008d72:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008d76:	aa08      	add	r2, sp, #32
 8008d78:	ee10 3a10 	vmov	r3, s0
 8008d7c:	4634      	mov	r4, r6
 8008d7e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008d82:	e742      	b.n	8008c0a <__kernel_rem_pio2f+0x1ea>
 8008d84:	a808      	add	r0, sp, #32
 8008d86:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008d8a:	9001      	str	r0, [sp, #4]
 8008d8c:	ee07 0a90 	vmov	s15, r0
 8008d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d94:	3b01      	subs	r3, #1
 8008d96:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008d9a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008d9e:	ed62 7a01 	vstmdb	r2!, {s15}
 8008da2:	e73f      	b.n	8008c24 <__kernel_rem_pio2f+0x204>
 8008da4:	ecf6 6a01 	vldmia	r6!, {s13}
 8008da8:	ecb5 7a01 	vldmia	r5!, {s14}
 8008dac:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008db0:	3001      	adds	r0, #1
 8008db2:	4550      	cmp	r0, sl
 8008db4:	dc01      	bgt.n	8008dba <__kernel_rem_pio2f+0x39a>
 8008db6:	4290      	cmp	r0, r2
 8008db8:	ddf4      	ble.n	8008da4 <__kernel_rem_pio2f+0x384>
 8008dba:	a858      	add	r0, sp, #352	; 0x160
 8008dbc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008dc0:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	e731      	b.n	8008c2c <__kernel_rem_pio2f+0x20c>
 8008dc8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	dc09      	bgt.n	8008de2 <__kernel_rem_pio2f+0x3c2>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	dc2b      	bgt.n	8008e2a <__kernel_rem_pio2f+0x40a>
 8008dd2:	d044      	beq.n	8008e5e <__kernel_rem_pio2f+0x43e>
 8008dd4:	f009 0007 	and.w	r0, r9, #7
 8008dd8:	b059      	add	sp, #356	; 0x164
 8008dda:	ecbd 8b04 	vpop	{d8-d9}
 8008dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d1f5      	bne.n	8008dd4 <__kernel_rem_pio2f+0x3b4>
 8008de8:	aa30      	add	r2, sp, #192	; 0xc0
 8008dea:	1f0b      	subs	r3, r1, #4
 8008dec:	4413      	add	r3, r2
 8008dee:	461a      	mov	r2, r3
 8008df0:	4620      	mov	r0, r4
 8008df2:	2800      	cmp	r0, #0
 8008df4:	f1a2 0204 	sub.w	r2, r2, #4
 8008df8:	dc52      	bgt.n	8008ea0 <__kernel_rem_pio2f+0x480>
 8008dfa:	4622      	mov	r2, r4
 8008dfc:	2a01      	cmp	r2, #1
 8008dfe:	f1a3 0304 	sub.w	r3, r3, #4
 8008e02:	dc5d      	bgt.n	8008ec0 <__kernel_rem_pio2f+0x4a0>
 8008e04:	ab30      	add	r3, sp, #192	; 0xc0
 8008e06:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008d20 <__kernel_rem_pio2f+0x300>
 8008e0a:	440b      	add	r3, r1
 8008e0c:	2c01      	cmp	r4, #1
 8008e0e:	dc67      	bgt.n	8008ee0 <__kernel_rem_pio2f+0x4c0>
 8008e10:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008e14:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008e18:	2f00      	cmp	r7, #0
 8008e1a:	d167      	bne.n	8008eec <__kernel_rem_pio2f+0x4cc>
 8008e1c:	edc8 6a00 	vstr	s13, [r8]
 8008e20:	ed88 7a01 	vstr	s14, [r8, #4]
 8008e24:	edc8 7a02 	vstr	s15, [r8, #8]
 8008e28:	e7d4      	b.n	8008dd4 <__kernel_rem_pio2f+0x3b4>
 8008e2a:	ab30      	add	r3, sp, #192	; 0xc0
 8008e2c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8008d20 <__kernel_rem_pio2f+0x300>
 8008e30:	440b      	add	r3, r1
 8008e32:	4622      	mov	r2, r4
 8008e34:	2a00      	cmp	r2, #0
 8008e36:	da24      	bge.n	8008e82 <__kernel_rem_pio2f+0x462>
 8008e38:	b34f      	cbz	r7, 8008e8e <__kernel_rem_pio2f+0x46e>
 8008e3a:	eef1 7a47 	vneg.f32	s15, s14
 8008e3e:	edc8 7a00 	vstr	s15, [r8]
 8008e42:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008e46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e4a:	aa31      	add	r2, sp, #196	; 0xc4
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	429c      	cmp	r4, r3
 8008e50:	da20      	bge.n	8008e94 <__kernel_rem_pio2f+0x474>
 8008e52:	b10f      	cbz	r7, 8008e58 <__kernel_rem_pio2f+0x438>
 8008e54:	eef1 7a67 	vneg.f32	s15, s15
 8008e58:	edc8 7a01 	vstr	s15, [r8, #4]
 8008e5c:	e7ba      	b.n	8008dd4 <__kernel_rem_pio2f+0x3b4>
 8008e5e:	ab30      	add	r3, sp, #192	; 0xc0
 8008e60:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8008d20 <__kernel_rem_pio2f+0x300>
 8008e64:	440b      	add	r3, r1
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	da05      	bge.n	8008e76 <__kernel_rem_pio2f+0x456>
 8008e6a:	b10f      	cbz	r7, 8008e70 <__kernel_rem_pio2f+0x450>
 8008e6c:	eef1 7a67 	vneg.f32	s15, s15
 8008e70:	edc8 7a00 	vstr	s15, [r8]
 8008e74:	e7ae      	b.n	8008dd4 <__kernel_rem_pio2f+0x3b4>
 8008e76:	ed33 7a01 	vldmdb	r3!, {s14}
 8008e7a:	3c01      	subs	r4, #1
 8008e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e80:	e7f1      	b.n	8008e66 <__kernel_rem_pio2f+0x446>
 8008e82:	ed73 7a01 	vldmdb	r3!, {s15}
 8008e86:	3a01      	subs	r2, #1
 8008e88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e8c:	e7d2      	b.n	8008e34 <__kernel_rem_pio2f+0x414>
 8008e8e:	eef0 7a47 	vmov.f32	s15, s14
 8008e92:	e7d4      	b.n	8008e3e <__kernel_rem_pio2f+0x41e>
 8008e94:	ecb2 7a01 	vldmia	r2!, {s14}
 8008e98:	3301      	adds	r3, #1
 8008e9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e9e:	e7d6      	b.n	8008e4e <__kernel_rem_pio2f+0x42e>
 8008ea0:	edd2 7a00 	vldr	s15, [r2]
 8008ea4:	edd2 6a01 	vldr	s13, [r2, #4]
 8008ea8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008eac:	3801      	subs	r0, #1
 8008eae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008eb2:	ed82 7a00 	vstr	s14, [r2]
 8008eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eba:	edc2 7a01 	vstr	s15, [r2, #4]
 8008ebe:	e798      	b.n	8008df2 <__kernel_rem_pio2f+0x3d2>
 8008ec0:	edd3 7a00 	vldr	s15, [r3]
 8008ec4:	edd3 6a01 	vldr	s13, [r3, #4]
 8008ec8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008ecc:	3a01      	subs	r2, #1
 8008ece:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ed2:	ed83 7a00 	vstr	s14, [r3]
 8008ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eda:	edc3 7a01 	vstr	s15, [r3, #4]
 8008ede:	e78d      	b.n	8008dfc <__kernel_rem_pio2f+0x3dc>
 8008ee0:	ed33 7a01 	vldmdb	r3!, {s14}
 8008ee4:	3c01      	subs	r4, #1
 8008ee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008eea:	e78f      	b.n	8008e0c <__kernel_rem_pio2f+0x3ec>
 8008eec:	eef1 6a66 	vneg.f32	s13, s13
 8008ef0:	eeb1 7a47 	vneg.f32	s14, s14
 8008ef4:	edc8 6a00 	vstr	s13, [r8]
 8008ef8:	ed88 7a01 	vstr	s14, [r8, #4]
 8008efc:	eef1 7a67 	vneg.f32	s15, s15
 8008f00:	e790      	b.n	8008e24 <__kernel_rem_pio2f+0x404>
 8008f02:	bf00      	nop

08008f04 <scalbnf>:
 8008f04:	ee10 3a10 	vmov	r3, s0
 8008f08:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008f0c:	d02b      	beq.n	8008f66 <scalbnf+0x62>
 8008f0e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008f12:	d302      	bcc.n	8008f1a <scalbnf+0x16>
 8008f14:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008f18:	4770      	bx	lr
 8008f1a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008f1e:	d123      	bne.n	8008f68 <scalbnf+0x64>
 8008f20:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <scalbnf+0xb0>)
 8008f22:	eddf 7a25 	vldr	s15, [pc, #148]	; 8008fb8 <scalbnf+0xb4>
 8008f26:	4298      	cmp	r0, r3
 8008f28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008f2c:	db17      	blt.n	8008f5e <scalbnf+0x5a>
 8008f2e:	ee10 3a10 	vmov	r3, s0
 8008f32:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008f36:	3a19      	subs	r2, #25
 8008f38:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008f3c:	4288      	cmp	r0, r1
 8008f3e:	dd15      	ble.n	8008f6c <scalbnf+0x68>
 8008f40:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008fbc <scalbnf+0xb8>
 8008f44:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008fc0 <scalbnf+0xbc>
 8008f48:	ee10 3a10 	vmov	r3, s0
 8008f4c:	eeb0 7a67 	vmov.f32	s14, s15
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	bfb8      	it	lt
 8008f54:	eef0 7a66 	vmovlt.f32	s15, s13
 8008f58:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008f5c:	4770      	bx	lr
 8008f5e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008fc4 <scalbnf+0xc0>
 8008f62:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008f66:	4770      	bx	lr
 8008f68:	0dd2      	lsrs	r2, r2, #23
 8008f6a:	e7e5      	b.n	8008f38 <scalbnf+0x34>
 8008f6c:	4410      	add	r0, r2
 8008f6e:	28fe      	cmp	r0, #254	; 0xfe
 8008f70:	dce6      	bgt.n	8008f40 <scalbnf+0x3c>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	dd06      	ble.n	8008f84 <scalbnf+0x80>
 8008f76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f7a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008f7e:	ee00 3a10 	vmov	s0, r3
 8008f82:	4770      	bx	lr
 8008f84:	f110 0f16 	cmn.w	r0, #22
 8008f88:	da09      	bge.n	8008f9e <scalbnf+0x9a>
 8008f8a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008fc4 <scalbnf+0xc0>
 8008f8e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8008fc8 <scalbnf+0xc4>
 8008f92:	ee10 3a10 	vmov	r3, s0
 8008f96:	eeb0 7a67 	vmov.f32	s14, s15
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	e7d9      	b.n	8008f52 <scalbnf+0x4e>
 8008f9e:	3019      	adds	r0, #25
 8008fa0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fa4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008fa8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008fcc <scalbnf+0xc8>
 8008fac:	ee07 3a90 	vmov	s15, r3
 8008fb0:	e7d7      	b.n	8008f62 <scalbnf+0x5e>
 8008fb2:	bf00      	nop
 8008fb4:	ffff3cb0 	.word	0xffff3cb0
 8008fb8:	4c000000 	.word	0x4c000000
 8008fbc:	7149f2ca 	.word	0x7149f2ca
 8008fc0:	f149f2ca 	.word	0xf149f2ca
 8008fc4:	0da24260 	.word	0x0da24260
 8008fc8:	8da24260 	.word	0x8da24260
 8008fcc:	33000000 	.word	0x33000000

08008fd0 <floorf>:
 8008fd0:	ee10 3a10 	vmov	r3, s0
 8008fd4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008fd8:	3a7f      	subs	r2, #127	; 0x7f
 8008fda:	2a16      	cmp	r2, #22
 8008fdc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008fe0:	dc2a      	bgt.n	8009038 <floorf+0x68>
 8008fe2:	2a00      	cmp	r2, #0
 8008fe4:	da11      	bge.n	800900a <floorf+0x3a>
 8008fe6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009048 <floorf+0x78>
 8008fea:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008fee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff6:	dd05      	ble.n	8009004 <floorf+0x34>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	da23      	bge.n	8009044 <floorf+0x74>
 8008ffc:	4a13      	ldr	r2, [pc, #76]	; (800904c <floorf+0x7c>)
 8008ffe:	2900      	cmp	r1, #0
 8009000:	bf18      	it	ne
 8009002:	4613      	movne	r3, r2
 8009004:	ee00 3a10 	vmov	s0, r3
 8009008:	4770      	bx	lr
 800900a:	4911      	ldr	r1, [pc, #68]	; (8009050 <floorf+0x80>)
 800900c:	4111      	asrs	r1, r2
 800900e:	420b      	tst	r3, r1
 8009010:	d0fa      	beq.n	8009008 <floorf+0x38>
 8009012:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009048 <floorf+0x78>
 8009016:	ee30 0a27 	vadd.f32	s0, s0, s15
 800901a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800901e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009022:	ddef      	ble.n	8009004 <floorf+0x34>
 8009024:	2b00      	cmp	r3, #0
 8009026:	bfbe      	ittt	lt
 8009028:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800902c:	fa40 f202 	asrlt.w	r2, r0, r2
 8009030:	189b      	addlt	r3, r3, r2
 8009032:	ea23 0301 	bic.w	r3, r3, r1
 8009036:	e7e5      	b.n	8009004 <floorf+0x34>
 8009038:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800903c:	d3e4      	bcc.n	8009008 <floorf+0x38>
 800903e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009042:	4770      	bx	lr
 8009044:	2300      	movs	r3, #0
 8009046:	e7dd      	b.n	8009004 <floorf+0x34>
 8009048:	7149f2ca 	.word	0x7149f2ca
 800904c:	bf800000 	.word	0xbf800000
 8009050:	007fffff 	.word	0x007fffff

08009054 <_init>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	bf00      	nop
 8009058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905a:	bc08      	pop	{r3}
 800905c:	469e      	mov	lr, r3
 800905e:	4770      	bx	lr

08009060 <_fini>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	bf00      	nop
 8009064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009066:	bc08      	pop	{r3}
 8009068:	469e      	mov	lr, r3
 800906a:	4770      	bx	lr
