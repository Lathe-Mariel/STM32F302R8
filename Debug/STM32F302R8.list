
STM32F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007008  08007008  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007008  08007008  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007008  08007008  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007008  08007008  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800700c  0800700c  0001700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000000c  0800701c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800701c  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c07  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002689  00000000  00000000  00032c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000352d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00036278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c796  00000000  00000000  00037100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144ec  00000000  00000000  00053896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a90e2  00000000  00000000  00067d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110e64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004110  00000000  00000000  00110eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006fb8 	.word	0x08006fb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006fb8 	.word	0x08006fb8

080001c8 <cfPhaseLockedLoop>:
 */

#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80001d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80001d6:	ed87 1a01 	vstr	s2, [r7, #4]
 80001da:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	ed93 7a00 	vldr	s14, [r3]
 80001e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80001e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80001ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80001ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 80001f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80001fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	edd3 7a00 	vldr	s15, [r3]
 800020a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800020e:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	ee07 3a90 	vmov	s15, r3
}
 8000218:	eeb0 0a67 	vmov.f32	s0, s15
 800021c:	371c      	adds	r7, #28
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr

08000226 <gfDivideAvoidZero>:

#include "main.h"
#include "GeneralFunctions.h"
#include "GlogalVariables.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 8000226:	b480      	push	{r7}
 8000228:	b087      	sub	sp, #28
 800022a:	af00      	add	r7, sp, #0
 800022c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000230:	edc7 0a02 	vstr	s1, [r7, #8]
 8000234:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 8000238:	edd7 7a02 	vldr	s15, [r7, #8]
 800023c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000244:	db0b      	blt.n	800025e <gfDivideAvoidZero+0x38>
 8000246:	ed97 7a02 	vldr	s14, [r7, #8]
 800024a:	edd7 7a01 	vldr	s15, [r7, #4]
 800024e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000256:	d502      	bpl.n	800025e <gfDivideAvoidZero+0x38>
		den = threshold;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	60bb      	str	r3, [r7, #8]
 800025c:	e017      	b.n	800028e <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 800025e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000262:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800026a:	d510      	bpl.n	800028e <gfDivideAvoidZero+0x68>
 800026c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000270:	eef1 7a67 	vneg.f32	s15, s15
 8000274:	ed97 7a02 	vldr	s14, [r7, #8]
 8000278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800027c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000280:	dd05      	ble.n	800028e <gfDivideAvoidZero+0x68>
		den = -threshold;
 8000282:	edd7 7a01 	vldr	s15, [r7, #4]
 8000286:	eef1 7a67 	vneg.f32	s15, s15
 800028a:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 800028e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000292:	ed97 7a02 	vldr	s14, [r7, #8]
 8000296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800029a:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	ee07 3a90 	vmov	s15, r3
}
 80002a4:	eeb0 0a67 	vmov.f32	s0, s15
 80002a8:	371c      	adds	r7, #28
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
	...

080002b4 <gfWrapElectAngle>:

float gfWrapElectAngle(float electAngle){
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	ed87 0a01 	vstr	s0, [r7, #4]
	if( electAngle > PI)
 80002be:	edd7 7a01 	vldr	s15, [r7, #4]
 80002c2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000318 <gfWrapElectAngle+0x64>
 80002c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002ce:	dd08      	ble.n	80002e2 <gfWrapElectAngle+0x2e>
		electAngle -= TWOPI;
 80002d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80002d4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800031c <gfWrapElectAngle+0x68>
 80002d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80002dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80002e0:	e010      	b.n	8000304 <gfWrapElectAngle+0x50>
	else if( electAngle < -PI)
 80002e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80002e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000320 <gfWrapElectAngle+0x6c>
 80002ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002f2:	d507      	bpl.n	8000304 <gfWrapElectAngle+0x50>
		electAngle += TWOPI;
 80002f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80002f8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800031c <gfWrapElectAngle+0x68>
 80002fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000300:	edc7 7a01 	vstr	s15, [r7, #4]

	return electAngle;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	ee07 3a90 	vmov	s15, r3
}
 800030a:	eeb0 0a67 	vmov.f32	s0, s15
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40490fdb 	.word	0x40490fdb
 800031c:	40c90fdb 	.word	0x40c90fdb
 8000320:	c0490fdb 	.word	0xc0490fdb

08000324 <readButton1>:



uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
	uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800032a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <readButton1+0x20>)
 8000330:	f003 fb7c 	bl	8003a2c <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	71fb      	strb	r3, [r7, #7]
	return B1;
 8000338:	79fb      	ldrb	r3, [r7, #7]
}
 800033a:	4618      	mov	r0, r3
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	48000800 	.word	0x48000800

08000348 <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 800034e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000354:	607b      	str	r3, [r7, #4]

	return inputCaptureCnt;
 8000356:	687b      	ldr	r3, [r7, #4]
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8000364:	b480      	push	{r7}
 8000366:	b087      	sub	sp, #28
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	6039      	str	r1, [r7, #0]
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 800036e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000374:	613b      	str	r3, [r7, #16]
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	3301      	adds	r3, #1
 800037a:	085b      	lsrs	r3, r3, #1
 800037c:	60fb      	str	r3, [r7, #12]


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	ee07 3a90 	vmov	s15, r3
 8000384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	ee07 3a90 	vmov	s15, r3
 800038e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000396:	edc7 7a05 	vstr	s15, [r7, #20]

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	ee07 3a90 	vmov	s15, r3
 80003a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003a4:	eef1 7a67 	vneg.f32	s15, s15
 80003a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80003ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b4:	d50a      	bpl.n	80003cc <readTimeInterval+0x68>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	ee07 3a90 	vmov	s15, r3
 80003bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80003c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003c8:	edc7 7a05 	vstr	s15, [r7, #20]

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;
 80003cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80003d0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80003f0 <readTimeInterval+0x8c>
 80003d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80003d8:	edc7 7a02 	vstr	s15, [r7, #8]

	return timeInterval;
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	ee07 3a90 	vmov	s15, r3
}
 80003e2:	eeb0 0a67 	vmov.f32	s0, s15
 80003e6:	371c      	adds	r7, #28
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	4c895440 	.word	0x4c895440

080003f4 <readVolume>:

float readVolume(void){
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <readVolume+0x38>)
 80003fc:	885b      	ldrh	r3, [r3, #2]
 80003fe:	80fb      	strh	r3, [r7, #6]

	Volume = Volume_ad * 0.0002442f;
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	ee07 3a90 	vmov	s15, r3
 8000406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800040a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000430 <readVolume+0x3c>
 800040e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000412:	edc7 7a00 	vstr	s15, [r7]
	//Volume = ((int16_t)Volume_ad - 856) * 0.000573394f;
	return Volume;
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	ee07 3a90 	vmov	s15, r3
}
 800041c:	eeb0 0a67 	vmov.f32	s0, s15
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000028 	.word	0x20000028
 8000430:	398007f8 	.word	0x398007f8

08000434 <readVdc>:

float readVdc(void){
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <readVdc+0x38>)
 800043c:	881b      	ldrh	r3, [r3, #0]
 800043e:	80fb      	strh	r3, [r7, #6]
	Vdc = Vdc_ad * 0.0154305f; // 1/(9.31/(9.31+169)*4096/3.3V)
 8000440:	88fb      	ldrh	r3, [r7, #6]
 8000442:	ee07 3a90 	vmov	s15, r3
 8000446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800044a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000470 <readVdc+0x3c>
 800044e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000452:	edc7 7a00 	vstr	s15, [r7]
	return Vdc;
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	ee07 3a90 	vmov	s15, r3
}
 800045c:	eeb0 0a67 	vmov.f32	s0, s15
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000028 	.word	0x20000028
 8000470:	3c7cd035 	.word	0x3c7cd035

08000474 <readHallSignal>:
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
}

void readHallSignal(uint8_t* Hall){
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 800047c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000484:	f003 fad2 	bl	8003a2c <HAL_GPIO_ReadPin>
 8000488:	4603      	mov	r3, r0
 800048a:	461a      	mov	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	701a      	strb	r2, [r3, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	1c5c      	adds	r4, r3, #1
 8000494:	2108      	movs	r1, #8
 8000496:	4809      	ldr	r0, [pc, #36]	; (80004bc <readHallSignal+0x48>)
 8000498:	f003 fac8 	bl	8003a2c <HAL_GPIO_ReadPin>
 800049c:	4603      	mov	r3, r0
 800049e:	7023      	strb	r3, [r4, #0]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	1c9c      	adds	r4, r3, #2
 80004a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a8:	4804      	ldr	r0, [pc, #16]	; (80004bc <readHallSignal+0x48>)
 80004aa:	f003 fabf 	bl	8003a2c <HAL_GPIO_ReadPin>
 80004ae:	4603      	mov	r3, r0
 80004b0:	7023      	strb	r3, [r4, #0]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd90      	pop	{r4, r7, pc}
 80004ba:	bf00      	nop
 80004bc:	48000400 	.word	0x48000400

080004c0 <writeOutputMode>:

void writeOutputMode(int8_t* outputMode){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f993 3000 	ldrsb.w	r3, [r3]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d106      	bne.n	80004e0 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d8:	4819      	ldr	r0, [pc, #100]	; (8000540 <writeOutputMode+0x80>)
 80004da:	f003 fabf 	bl	8003a5c <HAL_GPIO_WritePin>
 80004de:	e005      	b.n	80004ec <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e6:	4816      	ldr	r0, [pc, #88]	; (8000540 <writeOutputMode+0x80>)
 80004e8:	f003 fab8 	bl	8003a5c <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	f993 3000 	ldrsb.w	r3, [r3]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d106      	bne.n	8000506 <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004fe:	4810      	ldr	r0, [pc, #64]	; (8000540 <writeOutputMode+0x80>)
 8000500:	f003 faac 	bl	8003a5c <HAL_GPIO_WritePin>
 8000504:	e005      	b.n	8000512 <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <writeOutputMode+0x80>)
 800050e:	f003 faa5 	bl	8003a5c <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3302      	adds	r3, #2
 8000516:	f993 3000 	ldrsb.w	r3, [r3]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d106      	bne.n	800052c <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000524:	4806      	ldr	r0, [pc, #24]	; (8000540 <writeOutputMode+0x80>)
 8000526:	f003 fa99 	bl	8003a5c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 800052a:	e005      	b.n	8000538 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <writeOutputMode+0x80>)
 8000534:	f003 fa92 	bl	8003a5c <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	48000800 	.word	0x48000800

08000544 <writeDuty>:

void writeDuty(float* Duty){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	ed93 7a00 	vldr	s14, [r3]
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <writeDuty+0x80>)
 8000554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000556:	ee07 3a90 	vmov	s15, r3
 800055a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800055e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <writeDuty+0x80>)
 8000564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000568:	ee17 2a90 	vmov	r2, s15
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3304      	adds	r3, #4
 8000572:	ed93 7a00 	vldr	s14, [r3]
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <writeDuty+0x80>)
 8000578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057a:	ee07 3a90 	vmov	s15, r3
 800057e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <writeDuty+0x80>)
 8000588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800058c:	ee17 2a90 	vmov	r2, s15
 8000590:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3308      	adds	r3, #8
 8000596:	ed93 7a00 	vldr	s14, [r3]
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <writeDuty+0x80>)
 800059c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059e:	ee07 3a90 	vmov	s15, r3
 80005a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <writeDuty+0x80>)
 80005ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005b0:	ee17 2a90 	vmov	r2, s15
 80005b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40012c00 	.word	0x40012c00

080005c8 <sixStepTasks>:
static void calcOutputMode(uint8_t voltageMode, int8_t* outputMode);
static void calcDuty(int8_t* outputMode, float DutyRef, float* Duty);


// input DutyRef minus1-1, output Duty 0-1
void sixStepTasks(float DutyRef, float leadAngle, float* Duty){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80005d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80005d6:	6078      	str	r0, [r7, #4]
	float Ki_PLL;
	float Ts_PLL;
	float timeInterval;

	// Read Hall Signals
	readHallSignal(gHall);
 80005d8:	4894      	ldr	r0, [pc, #592]	; (800082c <sixStepTasks+0x264>)
 80005da:	f7ff ff4b 	bl	8000474 <readHallSignal>

	// Hold & Read Input Capture Count
	gInputCaptureCnt_pre = gInputCaptureCnt;
 80005de:	4b94      	ldr	r3, [pc, #592]	; (8000830 <sixStepTasks+0x268>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a94      	ldr	r2, [pc, #592]	; (8000834 <sixStepTasks+0x26c>)
 80005e4:	6013      	str	r3, [r2, #0]
	gInputCaptureCnt = readInputCaptureCnt();
 80005e6:	f7ff feaf 	bl	8000348 <readInputCaptureCnt>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a90      	ldr	r2, [pc, #576]	; (8000830 <sixStepTasks+0x268>)
 80005ee:	6013      	str	r3, [r2, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(gInputCaptureCnt != gInputCaptureCnt_pre){
 80005f0:	4b8f      	ldr	r3, [pc, #572]	; (8000830 <sixStepTasks+0x268>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b8f      	ldr	r3, [pc, #572]	; (8000834 <sixStepTasks+0x26c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d016      	beq.n	800062a <sixStepTasks+0x62>
		timeInterval = readTimeInterval(gInputCaptureCnt, gInputCaptureCnt_pre);
 80005fc:	4b8c      	ldr	r3, [pc, #560]	; (8000830 <sixStepTasks+0x268>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a8c      	ldr	r2, [pc, #560]	; (8000834 <sixStepTasks+0x26c>)
 8000602:	6812      	ldr	r2, [r2, #0]
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff feac 	bl	8000364 <readTimeInterval>
 800060c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		gElectFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 8000610:	ed9f 1a89 	vldr	s2, [pc, #548]	; 8000838 <sixStepTasks+0x270>
 8000614:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8000618:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800061c:	f7ff fe03 	bl	8000226 <gfDivideAvoidZero>
 8000620:	eef0 7a40 	vmov.f32	s15, s0
 8000624:	4b85      	ldr	r3, [pc, #532]	; (800083c <sixStepTasks+0x274>)
 8000626:	edc3 7a00 	vstr	s15, [r3]
	}

	// Calculate PLL Gain based on Electrical Frequency
	wc_PLL = gElectFreq * 0.5f * TWOPI;
 800062a:	4b84      	ldr	r3, [pc, #528]	; (800083c <sixStepTasks+0x274>)
 800062c:	edd3 7a00 	vldr	s15, [r3]
 8000630:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000638:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8000840 <sixStepTasks+0x278>
 800063c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000640:	edc7 7a08 	vstr	s15, [r7, #32]
	Ts_PLL = 1.0f / (gElectFreq * 6.0f);
 8000644:	4b7d      	ldr	r3, [pc, #500]	; (800083c <sixStepTasks+0x274>)
 8000646:	edd3 7a00 	vldr	s15, [r3]
 800064a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800064e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800065a:	edc7 7a07 	vstr	s15, [r7, #28]
	Kp_PLL = wc_PLL;
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	61bb      	str	r3, [r7, #24]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8000662:	edd7 7a08 	vldr	s15, [r7, #32]
 8000666:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8000844 <sixStepTasks+0x27c>
 800066a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800066e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000676:	ed97 7a07 	vldr	s14, [r7, #28]
 800067a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067e:	edc7 7a05 	vstr	s15, [r7, #20]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 8000682:	4b71      	ldr	r3, [pc, #452]	; (8000848 <sixStepTasks+0x280>)
 8000684:	781a      	ldrb	r2, [r3, #0]
 8000686:	4b71      	ldr	r3, [pc, #452]	; (800084c <sixStepTasks+0x284>)
 8000688:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(gHall);
 800068a:	4868      	ldr	r0, [pc, #416]	; (800082c <sixStepTasks+0x264>)
 800068c:	f000 f8f8 	bl	8000880 <calcVoltageMode>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b6c      	ldr	r3, [pc, #432]	; (8000848 <sixStepTasks+0x280>)
 8000696:	701a      	strb	r2, [r3, #0]

	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 8000698:	4b6d      	ldr	r3, [pc, #436]	; (8000850 <sixStepTasks+0x288>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a6d      	ldr	r2, [pc, #436]	; (8000854 <sixStepTasks+0x28c>)
 800069e:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 80006a0:	4b6a      	ldr	r3, [pc, #424]	; (800084c <sixStepTasks+0x284>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4a68      	ldr	r2, [pc, #416]	; (8000848 <sixStepTasks+0x280>)
 80006a6:	7811      	ldrb	r1, [r2, #0]
 80006a8:	4a6b      	ldr	r2, [pc, #428]	; (8000858 <sixStepTasks+0x290>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f92e 	bl	800090c <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 80006b0:	4b65      	ldr	r3, [pc, #404]	; (8000848 <sixStepTasks+0x280>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4a68      	ldr	r2, [pc, #416]	; (8000858 <sixStepTasks+0x290>)
 80006b6:	f992 2000 	ldrsb.w	r2, [r2]
 80006ba:	4611      	mov	r1, r2
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f951 	bl	8000964 <calcElectAngleFromVoltageMode>
 80006c2:	eef0 7a40 	vmov.f32	s15, s0
 80006c6:	4b62      	ldr	r3, [pc, #392]	; (8000850 <sixStepTasks+0x288>)
 80006c8:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapElectAngle(sElectAngleActual);
 80006cc:	4b60      	ldr	r3, [pc, #384]	; (8000850 <sixStepTasks+0x288>)
 80006ce:	edd3 7a00 	vldr	s15, [r3]
 80006d2:	eeb0 0a67 	vmov.f32	s0, s15
 80006d6:	f7ff fded 	bl	80002b4 <gfWrapElectAngle>
 80006da:	eef0 7a40 	vmov.f32	s15, s0
 80006de:	4b5c      	ldr	r3, [pc, #368]	; (8000850 <sixStepTasks+0x288>)
 80006e0:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sLeadAngleModeFlg_pre = sLeadAngleModeFlg;
 80006e4:	4b5d      	ldr	r3, [pc, #372]	; (800085c <sixStepTasks+0x294>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b5d      	ldr	r3, [pc, #372]	; (8000860 <sixStepTasks+0x298>)
 80006ea:	701a      	strb	r2, [r3, #0]
	sLeadAngleModeFlg = 0;//calcLeadAngleModeFlg();
 80006ec:	4b5b      	ldr	r3, [pc, #364]	; (800085c <sixStepTasks+0x294>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]

	if(sLeadAngleModeFlg == 1){
 80006f2:	4b5a      	ldr	r3, [pc, #360]	; (800085c <sixStepTasks+0x294>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	f040 8082 	bne.w	8000800 <sixStepTasks+0x238>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sLeadAngleModeFlg_pre == 0 ){
 80006fc:	4b58      	ldr	r3, [pc, #352]	; (8000860 <sixStepTasks+0x298>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d111      	bne.n	8000728 <sixStepTasks+0x160>
			sElectAngVeloEstimate = gElectFreq * TWOPI;
 8000704:	4b4d      	ldr	r3, [pc, #308]	; (800083c <sixStepTasks+0x274>)
 8000706:	edd3 7a00 	vldr	s15, [r3]
 800070a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8000840 <sixStepTasks+0x278>
 800070e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000712:	4b54      	ldr	r3, [pc, #336]	; (8000864 <sixStepTasks+0x29c>)
 8000714:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8000718:	4b52      	ldr	r3, [pc, #328]	; (8000864 <sixStepTasks+0x29c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a52      	ldr	r2, [pc, #328]	; (8000868 <sixStepTasks+0x2a0>)
 800071e:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 8000720:	4b4b      	ldr	r3, [pc, #300]	; (8000850 <sixStepTasks+0x288>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a51      	ldr	r2, [pc, #324]	; (800086c <sixStepTasks+0x2a4>)
 8000726:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 8000728:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <sixStepTasks+0x29c>)
 800072a:	edd3 7a00 	vldr	s15, [r3]
 800072e:	eddf 6a50 	vldr	s13, [pc, #320]	; 8000870 <sixStepTasks+0x2a8>
 8000732:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000736:	4b4d      	ldr	r3, [pc, #308]	; (800086c <sixStepTasks+0x2a4>)
 8000738:	edd3 7a00 	vldr	s15, [r3]
 800073c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000740:	4b4a      	ldr	r3, [pc, #296]	; (800086c <sixStepTasks+0x2a4>)
 8000742:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapElectAngle(sElectAngleEstimate);
 8000746:	4b49      	ldr	r3, [pc, #292]	; (800086c <sixStepTasks+0x2a4>)
 8000748:	edd3 7a00 	vldr	s15, [r3]
 800074c:	eeb0 0a67 	vmov.f32	s0, s15
 8000750:	f7ff fdb0 	bl	80002b4 <gfWrapElectAngle>
 8000754:	eef0 7a40 	vmov.f32	s15, s0
 8000758:	4b44      	ldr	r3, [pc, #272]	; (800086c <sixStepTasks+0x2a4>)
 800075a:	edc3 7a00 	vstr	s15, [r3]

		electAnglePrusLeadAngle = sElectAngleEstimate + leadAngle;
 800075e:	4b43      	ldr	r3, [pc, #268]	; (800086c <sixStepTasks+0x2a4>)
 8000760:	edd3 7a00 	vldr	s15, [r3]
 8000764:	ed97 7a02 	vldr	s14, [r7, #8]
 8000768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800076c:	edc7 7a04 	vstr	s15, [r7, #16]
		electAnglePrusLeadAngle = gfWrapElectAngle(electAnglePrusLeadAngle);
 8000770:	ed97 0a04 	vldr	s0, [r7, #16]
 8000774:	f7ff fd9e 	bl	80002b4 <gfWrapElectAngle>
 8000778:	ed87 0a04 	vstr	s0, [r7, #16]

		sVoltageModeModify = calcVoltageModeFromElectAngle(electAnglePrusLeadAngle);
 800077c:	ed97 0a04 	vldr	s0, [r7, #16]
 8000780:	f000 f94a 	bl	8000a18 <calcVoltageModeFromElectAngle>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <sixStepTasks+0x2ac>)
 800078a:	701a      	strb	r2, [r3, #0]

		if( sElectAngleActual != sElectAngleActual_pre){
 800078c:	4b30      	ldr	r3, [pc, #192]	; (8000850 <sixStepTasks+0x288>)
 800078e:	ed93 7a00 	vldr	s14, [r3]
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <sixStepTasks+0x28c>)
 8000794:	edd3 7a00 	vldr	s15, [r3]
 8000798:	eeb4 7a67 	vcmp.f32	s14, s15
 800079c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a0:	d027      	beq.n	80007f2 <sixStepTasks+0x22a>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 80007a2:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <sixStepTasks+0x288>)
 80007a4:	ed93 7a00 	vldr	s14, [r3]
 80007a8:	4b30      	ldr	r3, [pc, #192]	; (800086c <sixStepTasks+0x2a4>)
 80007aa:	edd3 7a00 	vldr	s15, [r3]
 80007ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007b2:	4b31      	ldr	r3, [pc, #196]	; (8000878 <sixStepTasks+0x2b0>)
 80007b4:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapElectAngle(sElectAngleErr);
 80007b8:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <sixStepTasks+0x2b0>)
 80007ba:	edd3 7a00 	vldr	s15, [r3]
 80007be:	eeb0 0a67 	vmov.f32	s0, s15
 80007c2:	f7ff fd77 	bl	80002b4 <gfWrapElectAngle>
 80007c6:	eef0 7a40 	vmov.f32	s15, s0
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <sixStepTasks+0x2b0>)
 80007cc:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 80007d0:	4b29      	ldr	r3, [pc, #164]	; (8000878 <sixStepTasks+0x2b0>)
 80007d2:	edd3 7a00 	vldr	s15, [r3]
 80007d6:	4824      	ldr	r0, [pc, #144]	; (8000868 <sixStepTasks+0x2a0>)
 80007d8:	ed97 1a05 	vldr	s2, [r7, #20]
 80007dc:	edd7 0a06 	vldr	s1, [r7, #24]
 80007e0:	eeb0 0a67 	vmov.f32	s0, s15
 80007e4:	f7ff fcf0 	bl	80001c8 <cfPhaseLockedLoop>
 80007e8:	eef0 7a40 	vmov.f32	s15, s0
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <sixStepTasks+0x29c>)
 80007ee:	edc3 7a00 	vstr	s15, [r3]
		}

		calcOutputMode(sVoltageModeModify, sOutputMode);
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <sixStepTasks+0x2ac>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	4921      	ldr	r1, [pc, #132]	; (800087c <sixStepTasks+0x2b4>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f9bd 	bl	8000b78 <calcOutputMode>
 80007fe:	e005      	b.n	800080c <sixStepTasks+0x244>

	}

	else{
		// Control without Electrical Angle ( Use Only Hall Signals )
		calcOutputMode(sVoltageMode, sOutputMode);
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <sixStepTasks+0x280>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	491d      	ldr	r1, [pc, #116]	; (800087c <sixStepTasks+0x2b4>)
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f9b6 	bl	8000b78 <calcOutputMode>
	}

	// Output Voltage
	calcDuty(sOutputMode, DutyRef, Duty);
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000812:	481a      	ldr	r0, [pc, #104]	; (800087c <sixStepTasks+0x2b4>)
 8000814:	f000 fa24 	bl	8000c60 <calcDuty>

	//write IO signals
	writeOutputMode(sOutputMode);
 8000818:	4818      	ldr	r0, [pc, #96]	; (800087c <sixStepTasks+0x2b4>)
 800081a:	f7ff fe51 	bl	80004c0 <writeOutputMode>
	writeDuty(Duty);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff fe90 	bl	8000544 <writeDuty>

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000002c 	.word	0x2000002c
 8000830:	20000030 	.word	0x20000030
 8000834:	20000034 	.word	0x20000034
 8000838:	326e9bfb 	.word	0x326e9bfb
 800083c:	20000038 	.word	0x20000038
 8000840:	40c90fdb 	.word	0x40c90fdb
 8000844:	3e4ccccd 	.word	0x3e4ccccd
 8000848:	20000057 	.word	0x20000057
 800084c:	20000058 	.word	0x20000058
 8000850:	20000060 	.word	0x20000060
 8000854:	20000064 	.word	0x20000064
 8000858:	2000005a 	.word	0x2000005a
 800085c:	2000005b 	.word	0x2000005b
 8000860:	2000005c 	.word	0x2000005c
 8000864:	20000070 	.word	0x20000070
 8000868:	2000006c 	.word	0x2000006c
 800086c:	20000068 	.word	0x20000068
 8000870:	468ca000 	.word	0x468ca000
 8000874:	20000059 	.word	0x20000059
 8000878:	20000074 	.word	0x20000074
 800087c:	20000054 	.word	0x20000054

08000880 <calcVoltageMode>:
else
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

static uint8_t calcVoltageMode(uint8_t* Hall){
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	uint8_t hallInput;
	uint8_t voltageMode = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3302      	adds	r3, #2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	b2da      	uxtb	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3301      	adds	r3, #1
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4413      	add	r3, r2
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4413      	add	r3, r2
 80008aa:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 80008ac:	7bbb      	ldrb	r3, [r7, #14]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	2b05      	cmp	r3, #5
 80008b2:	d821      	bhi.n	80008f8 <calcVoltageMode+0x78>
 80008b4:	a201      	add	r2, pc, #4	; (adr r2, 80008bc <calcVoltageMode+0x3c>)
 80008b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ba:	bf00      	nop
 80008bc:	080008f3 	.word	0x080008f3
 80008c0:	080008db 	.word	0x080008db
 80008c4:	080008d5 	.word	0x080008d5
 80008c8:	080008e7 	.word	0x080008e7
 80008cc:	080008ed 	.word	0x080008ed
 80008d0:	080008e1 	.word	0x080008e1
	  case 3:
		voltageMode = 3;
 80008d4:	2303      	movs	r3, #3
 80008d6:	73fb      	strb	r3, [r7, #15]
		break;
 80008d8:	e011      	b.n	80008fe <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 80008da:	2304      	movs	r3, #4
 80008dc:	73fb      	strb	r3, [r7, #15]
		break;
 80008de:	e00e      	b.n	80008fe <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 80008e0:	2305      	movs	r3, #5
 80008e2:	73fb      	strb	r3, [r7, #15]
		break;
 80008e4:	e00b      	b.n	80008fe <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 80008e6:	2306      	movs	r3, #6
 80008e8:	73fb      	strb	r3, [r7, #15]
		break;
 80008ea:	e008      	b.n	80008fe <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]
		break;
 80008f0:	e005      	b.n	80008fe <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	73fb      	strb	r3, [r7, #15]
		break;
 80008f6:	e002      	b.n	80008fe <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
	  break;
 80008fc:	bf00      	nop
	}
	return voltageMode;
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <calcRotDirFromVoltageMode>:
static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	603a      	str	r2, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	460b      	mov	r3, r1
 800091a:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 800091c:	79ba      	ldrb	r2, [r7, #6]
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	2b01      	cmp	r3, #1
 800092c:	dd04      	ble.n	8000938 <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	3b06      	subs	r3, #6
 8000932:	b2db      	uxtb	r3, r3
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	e008      	b.n	800094a <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 8000938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000940:	da03      	bge.n	800094a <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	3306      	adds	r3, #6
 8000946:	b2db      	uxtb	r3, r3
 8000948:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 800094a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d002      	beq.n	8000958 <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	7bfa      	ldrb	r2, [r7, #15]
 8000956:	701a      	strb	r2, [r3, #0]

}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	460a      	mov	r2, r1
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	4613      	mov	r3, r2
 8000972:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	3b01      	subs	r3, #1
 8000978:	2b05      	cmp	r3, #5
 800097a:	d822      	bhi.n	80009c2 <calcElectAngleFromVoltageMode+0x5e>
 800097c:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <calcElectAngleFromVoltageMode+0x20>)
 800097e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000982:	bf00      	nop
 8000984:	080009b7 	.word	0x080009b7
 8000988:	080009bd 	.word	0x080009bd
 800098c:	0800099d 	.word	0x0800099d
 8000990:	080009a5 	.word	0x080009a5
 8000994:	080009ab 	.word	0x080009ab
 8000998:	080009b1 	.word	0x080009b1
		  case 3:
			  electAngle_Center = 0.0f;
 800099c:	f04f 0300 	mov.w	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
			break;
 80009a2:	e012      	b.n	80009ca <calcElectAngleFromVoltageMode+0x66>
		  case 4:
			  electAngle_Center = PIDIV3;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <calcElectAngleFromVoltageMode+0x9c>)
 80009a6:	60fb      	str	r3, [r7, #12]
			break;
 80009a8:	e00f      	b.n	80009ca <calcElectAngleFromVoltageMode+0x66>
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <calcElectAngleFromVoltageMode+0xa0>)
 80009ac:	60fb      	str	r3, [r7, #12]
			break;
 80009ae:	e00c      	b.n	80009ca <calcElectAngleFromVoltageMode+0x66>
		  case 6:
			  electAngle_Center = PI;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <calcElectAngleFromVoltageMode+0xa4>)
 80009b2:	60fb      	str	r3, [r7, #12]
			break;
 80009b4:	e009      	b.n	80009ca <calcElectAngleFromVoltageMode+0x66>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <calcElectAngleFromVoltageMode+0xa8>)
 80009b8:	60fb      	str	r3, [r7, #12]
			break;
 80009ba:	e006      	b.n	80009ca <calcElectAngleFromVoltageMode+0x66>
		  case 2:
			  electAngle_Center = -PIDIV3;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <calcElectAngleFromVoltageMode+0xac>)
 80009be:	60fb      	str	r3, [r7, #12]
			break;
 80009c0:	e003      	b.n	80009ca <calcElectAngleFromVoltageMode+0x66>
		  default :
			  electAngle_Center = 0.0f;
 80009c2:	f04f 0300 	mov.w	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
		  break;
 80009c8:	bf00      	nop
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 80009ca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009ce:	ee07 3a90 	vmov	s15, r3
 80009d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009d6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000a14 <calcElectAngleFromVoltageMode+0xb0>
 80009da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009de:	ed97 7a03 	vldr	s14, [r7, #12]
 80009e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009e6:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	ee07 3a90 	vmov	s15, r3
}
 80009f0:	eeb0 0a67 	vmov.f32	s0, s15
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	3f860a92 	.word	0x3f860a92
 8000a04:	40060a92 	.word	0x40060a92
 8000a08:	40490fdb 	.word	0x40490fdb
 8000a0c:	c0060a92 	.word	0xc0060a92
 8000a10:	bf860a92 	.word	0xbf860a92
 8000a14:	3f060a92 	.word	0x3f060a92

08000a18 <calcVoltageModeFromElectAngle>:
		leadAngleModeFlg = 0;

	return leadAngleModeFlg;
}

static uint8_t calcVoltageModeFromElectAngle(float electAngle){
 8000a18:	b480      	push	{r7}
 8000a1a:	b08b      	sub	sp, #44	; 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t voltageMode = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//Angle Limit : minus PI - prus PI
	float voltageMode1_StartAngle = -PI + PIDIV6;
 8000a28:	4b4d      	ldr	r3, [pc, #308]	; (8000b60 <calcVoltageModeFromElectAngle+0x148>)
 8000a2a:	623b      	str	r3, [r7, #32]
	float voltageMode2_StartAngle = -PIDIV3 * 2.0f + PIDIV6;
 8000a2c:	4b4d      	ldr	r3, [pc, #308]	; (8000b64 <calcVoltageModeFromElectAngle+0x14c>)
 8000a2e:	61fb      	str	r3, [r7, #28]
	float voltageMode3_StartAngle = -PIDIV3 + PIDIV6;
 8000a30:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <calcVoltageModeFromElectAngle+0x150>)
 8000a32:	61bb      	str	r3, [r7, #24]
	float voltageMode4_StartAngle = PIDIV6;
 8000a34:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <calcVoltageModeFromElectAngle+0x154>)
 8000a36:	617b      	str	r3, [r7, #20]
	float voltageMode5_StartAngle = PIDIV3 + PIDIV6;
 8000a38:	4b4d      	ldr	r3, [pc, #308]	; (8000b70 <calcVoltageModeFromElectAngle+0x158>)
 8000a3a:	613b      	str	r3, [r7, #16]
	float voltageMode6_StartAngle = PIDIV3 * 2.0f + PIDIV6;
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	; (8000b74 <calcVoltageModeFromElectAngle+0x15c>)
 8000a3e:	60fb      	str	r3, [r7, #12]
		voltageMode = 2;
	}
	else
		voltageMode = 0;
		*/
	if(electAngle >= voltageMode6_StartAngle || electAngle < voltageMode1_StartAngle ){
 8000a40:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a44:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a50:	da08      	bge.n	8000a64 <calcVoltageModeFromElectAngle+0x4c>
 8000a52:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a56:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a62:	d503      	bpl.n	8000a6c <calcVoltageModeFromElectAngle+0x54>
		voltageMode = 6;
 8000a64:	2306      	movs	r3, #6
 8000a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a6a:	e070      	b.n	8000b4e <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode1_StartAngle && electAngle < voltageMode2_StartAngle ){
 8000a6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a70:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7c:	db0c      	blt.n	8000a98 <calcVoltageModeFromElectAngle+0x80>
 8000a7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a82:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8e:	d503      	bpl.n	8000a98 <calcVoltageModeFromElectAngle+0x80>
		voltageMode = 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a96:	e05a      	b.n	8000b4e <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode2_StartAngle && electAngle < voltageMode3_StartAngle ){
 8000a98:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa8:	db0c      	blt.n	8000ac4 <calcVoltageModeFromElectAngle+0xac>
 8000aaa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000aae:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aba:	d503      	bpl.n	8000ac4 <calcVoltageModeFromElectAngle+0xac>
		voltageMode = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ac2:	e044      	b.n	8000b4e <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode3_StartAngle && electAngle < voltageMode4_StartAngle ){
 8000ac4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ac8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad4:	db0c      	blt.n	8000af0 <calcVoltageModeFromElectAngle+0xd8>
 8000ad6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae6:	d503      	bpl.n	8000af0 <calcVoltageModeFromElectAngle+0xd8>
		voltageMode = 3;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000aee:	e02e      	b.n	8000b4e <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode4_StartAngle && electAngle < voltageMode5_StartAngle ){
 8000af0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b00:	db0c      	blt.n	8000b1c <calcVoltageModeFromElectAngle+0x104>
 8000b02:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b06:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b12:	d503      	bpl.n	8000b1c <calcVoltageModeFromElectAngle+0x104>
		voltageMode = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b1a:	e018      	b.n	8000b4e <calcVoltageModeFromElectAngle+0x136>
	}
	else if(electAngle >= voltageMode5_StartAngle && electAngle < voltageMode6_StartAngle ){
 8000b1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b20:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2c:	db0c      	blt.n	8000b48 <calcVoltageModeFromElectAngle+0x130>
 8000b2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3e:	d503      	bpl.n	8000b48 <calcVoltageModeFromElectAngle+0x130>
		voltageMode = 5;
 8000b40:	2305      	movs	r3, #5
 8000b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b46:	e002      	b.n	8000b4e <calcVoltageModeFromElectAngle+0x136>
	}
	else
		voltageMode = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return voltageMode;
 8000b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	372c      	adds	r7, #44	; 0x2c
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	c0278d36 	.word	0xc0278d36
 8000b64:	bfc90fdb 	.word	0xbfc90fdb
 8000b68:	bf060a92 	.word	0xbf060a92
 8000b6c:	3f060a92 	.word	0x3f060a92
 8000b70:	3fc90fdb 	.word	0x3fc90fdb
 8000b74:	40278d36 	.word	0x40278d36

08000b78 <calcOutputMode>:

static void calcOutputMode(uint8_t voltageMode, int8_t* outputMode){
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
		// Decide output mode
		switch(voltageMode){
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	2b05      	cmp	r3, #5
 8000b8a:	d857      	bhi.n	8000c3c <calcOutputMode+0xc4>
 8000b8c:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <calcOutputMode+0x1c>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08000c0d 	.word	0x08000c0d
 8000b98:	08000c25 	.word	0x08000c25
 8000b9c:	08000bad 	.word	0x08000bad
 8000ba0:	08000bc5 	.word	0x08000bc5
 8000ba4:	08000bdd 	.word	0x08000bdd
 8000ba8:	08000bf5 	.word	0x08000bf5
		  case 3:
			outputMode[0] = OUTPUTMODE_OPEN;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_POSITIVE;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_NEGATIVE;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	22ff      	movs	r2, #255	; 0xff
 8000bc0:	701a      	strb	r2, [r3, #0]
			break;
 8000bc2:	e047      	b.n	8000c54 <calcOutputMode+0xdc>
		  case 4:
			outputMode[0] = OUTPUTMODE_NEGATIVE;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_POSITIVE;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
			break;
 8000bda:	e03b      	b.n	8000c54 <calcOutputMode+0xdc>
		  case 5:
			outputMode[0] = OUTPUTMODE_NEGATIVE;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	22ff      	movs	r2, #255	; 0xff
 8000be0:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_POSITIVE;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	3302      	adds	r3, #2
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
			break;
 8000bf2:	e02f      	b.n	8000c54 <calcOutputMode+0xdc>
		  case 6:
			outputMode[0] = OUTPUTMODE_OPEN;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_NEGATIVE;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_POSITIVE;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	3302      	adds	r3, #2
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
			break;
 8000c0a:	e023      	b.n	8000c54 <calcOutputMode+0xdc>
		  case 1:
			outputMode[0] = OUTPUTMODE_POSITIVE;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_NEGATIVE;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	22ff      	movs	r2, #255	; 0xff
 8000c18:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
			break;
 8000c22:	e017      	b.n	8000c54 <calcOutputMode+0xdc>
		  case 2:
			outputMode[0] = OUTPUTMODE_POSITIVE;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_NEGATIVE;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	3302      	adds	r3, #2
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	701a      	strb	r2, [r3, #0]
			break;
 8000c3a:	e00b      	b.n	8000c54 <calcOutputMode+0xdc>
		  default :
			outputMode[0] = OUTPUTMODE_OPEN;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
			outputMode[1] = OUTPUTMODE_OPEN;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
			outputMode[2] = OUTPUTMODE_OPEN;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
		  break;
 8000c52:	bf00      	nop
		}
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <calcDuty>:

static void calcDuty(int8_t* outputMode, float DutyRef, float* Duty){
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c6c:	6079      	str	r1, [r7, #4]

	// if DutyRef < 0, swap OUTPUTMODE_POSITIVE and OUTPUTMODE_NEGATIVE
	int8_t outputModeMulSwapGain[3];
	int8_t swapGain;

	if (DutyRef > 0)
 8000c6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c7a:	dd02      	ble.n	8000c82 <calcDuty+0x22>
		swapGain = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	75fb      	strb	r3, [r7, #23]
 8000c80:	e001      	b.n	8000c86 <calcDuty+0x26>
	else
		swapGain = -1;
 8000c82:	23ff      	movs	r3, #255	; 0xff
 8000c84:	75fb      	strb	r3, [r7, #23]


	outputModeMulSwapGain[0]  = outputMode[0] * swapGain;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f993 3000 	ldrsb.w	r3, [r3]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	7dfb      	ldrb	r3, [r7, #23]
 8000c90:	fb12 f303 	smulbb	r3, r2, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	753b      	strb	r3, [r7, #20]
	outputModeMulSwapGain[1]  = outputMode[1] * swapGain;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	fb12 f303 	smulbb	r3, r2, r3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	757b      	strb	r3, [r7, #21]
	outputModeMulSwapGain[2]  = outputMode[2] * swapGain;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	7dfb      	ldrb	r3, [r7, #23]
 8000cbc:	fb12 f303 	smulbb	r3, r2, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	75bb      	strb	r3, [r7, #22]

	if( outputModeMulSwapGain[0] < 0) outputModeMulSwapGain[0] = 0;
 8000cc6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	da01      	bge.n	8000cd2 <calcDuty+0x72>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	753b      	strb	r3, [r7, #20]
	if( outputModeMulSwapGain[1] < 0) outputModeMulSwapGain[1] = 0;
 8000cd2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	da01      	bge.n	8000cde <calcDuty+0x7e>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	757b      	strb	r3, [r7, #21]
	if( outputModeMulSwapGain[2] < 0) outputModeMulSwapGain[2] = 0;
 8000cde:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da01      	bge.n	8000cea <calcDuty+0x8a>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	75bb      	strb	r3, [r7, #22]


	Duty[0] = (float)(outputModeMulSwapGain[0] * DutyRef * swapGain);
 8000cea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000cee:	ee07 3a90 	vmov	s15, r3
 8000cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (float)(outputModeMulSwapGain[1] * DutyRef * swapGain);
 8000d14:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d18:	ee07 3a90 	vmov	s15, r3
 8000d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d20:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d2c:	ee07 3a90 	vmov	s15, r3
 8000d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3304      	adds	r3, #4
 8000d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d3c:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (float)(outputModeMulSwapGain[2] * DutyRef * swapGain);
 8000d40:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3308      	adds	r3, #8
 8000d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d68:	edc3 7a00 	vstr	s15, [r3]

}
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7c:	f000 fe40 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d80:	f000 f862 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d84:	f000 fada 	bl	800133c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d88:	f000 faba 	bl	8001300 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d8c:	f000 fa88 	bl	80012a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d90:	f000 f8b4 	bl	8000efc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d94:	f000 f964 	bl	8001060 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d98:	f000 fa18 	bl	80011cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000d9c:	4824      	ldr	r0, [pc, #144]	; (8000e30 <main+0xb8>)
 8000d9e:	f004 fa95 	bl	80052cc <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000da2:	4824      	ldr	r0, [pc, #144]	; (8000e34 <main+0xbc>)
 8000da4:	f001 fa7e 	bl	80022a4 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dae:	4822      	ldr	r0, [pc, #136]	; (8000e38 <main+0xc0>)
 8000db0:	f002 fe54 	bl	8003a5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dba:	481f      	ldr	r0, [pc, #124]	; (8000e38 <main+0xc0>)
 8000dbc:	f002 fe4e 	bl	8003a5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc6:	481c      	ldr	r0, [pc, #112]	; (8000e38 <main+0xc0>)
 8000dc8:	f002 fe48 	bl	8003a5c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4818      	ldr	r0, [pc, #96]	; (8000e30 <main+0xb8>)
 8000dd0:	f004 fb28 	bl	8005424 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4816      	ldr	r0, [pc, #88]	; (8000e30 <main+0xb8>)
 8000dd8:	f005 fb86 	bl	80064e8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ddc:	2104      	movs	r1, #4
 8000dde:	4814      	ldr	r0, [pc, #80]	; (8000e30 <main+0xb8>)
 8000de0:	f004 fb20 	bl	8005424 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000de4:	2104      	movs	r1, #4
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <main+0xb8>)
 8000de8:	f005 fb7e 	bl	80064e8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000dec:	2108      	movs	r1, #8
 8000dee:	4810      	ldr	r0, [pc, #64]	; (8000e30 <main+0xb8>)
 8000df0:	f004 fb18 	bl	8005424 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000df4:	2108      	movs	r1, #8
 8000df6:	480e      	ldr	r0, [pc, #56]	; (8000e30 <main+0xb8>)
 8000df8:	f005 fb76 	bl	80064e8 <HAL_TIMEx_PWMN_Start>

  TIM1 -> CCR4 = (TIM1 -> ARR) - 10;//for Carrier Top Interrupt
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <main+0xc4>)
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <main+0xc4>)
 8000e02:	3b0a      	subs	r3, #10
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40

  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <main+0xc8>)
 8000e08:	f004 fa60 	bl	80052cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	480c      	ldr	r0, [pc, #48]	; (8000e40 <main+0xc8>)
 8000e10:	f004 fc46 	bl	80056a0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000e14:	2104      	movs	r1, #4
 8000e16:	480a      	ldr	r0, [pc, #40]	; (8000e40 <main+0xc8>)
 8000e18:	f004 fc42 	bl	80056a0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	4808      	ldr	r0, [pc, #32]	; (8000e40 <main+0xc8>)
 8000e20:	f004 fc3e 	bl	80056a0 <HAL_TIM_IC_Start_IT>

  // Start DMA (This function needs to be called after Starting TIM1 & TIM2)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8000e24:	2202      	movs	r2, #2
 8000e26:	4907      	ldr	r1, [pc, #28]	; (8000e44 <main+0xcc>)
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <main+0xbc>)
 8000e2a:	f000 fffd 	bl	8001e28 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <main+0xb6>
 8000e30:	2000010c 	.word	0x2000010c
 8000e34:	20000078 	.word	0x20000078
 8000e38:	48000800 	.word	0x48000800
 8000e3c:	40012c00 	.word	0x40012c00
 8000e40:	20000158 	.word	0x20000158
 8000e44:	20000028 	.word	0x20000028

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09c      	sub	sp, #112	; 0x70
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e52:	2228      	movs	r2, #40	; 0x28
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f006 f8a6 	bl	8006fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2234      	movs	r2, #52	; 0x34
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f006 f898 	bl	8006fa8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e80:	2310      	movs	r3, #16
 8000e82:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e84:	2302      	movs	r3, #2
 8000e86:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e8c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e90:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fe12 	bl	8003ac0 <HAL_RCC_OscConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000ea2:	f000 fac9 	bl	8001438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ebc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fe3a 	bl	8004b3c <HAL_RCC_ClockConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ece:	f000 fab3 	bl	8001438 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
 8000ed2:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000ed6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 f85f 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ef0:	f000 faa2 	bl	8001438 <Error_Handler>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3770      	adds	r7, #112	; 0x70
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b090      	sub	sp, #64	; 0x40
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	2228      	movs	r2, #40	; 0x28
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f006 f844 	bl	8006fa8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f20:	4b4e      	ldr	r3, [pc, #312]	; (800105c <MX_ADC1_Init+0x160>)
 8000f22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f28:	4b4c      	ldr	r3, [pc, #304]	; (800105c <MX_ADC1_Init+0x160>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2e:	4b4b      	ldr	r3, [pc, #300]	; (800105c <MX_ADC1_Init+0x160>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f34:	4b49      	ldr	r3, [pc, #292]	; (800105c <MX_ADC1_Init+0x160>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f3a:	4b48      	ldr	r3, [pc, #288]	; (800105c <MX_ADC1_Init+0x160>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f40:	4b46      	ldr	r3, [pc, #280]	; (800105c <MX_ADC1_Init+0x160>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <MX_ADC1_Init+0x160>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f4e:	4b43      	ldr	r3, [pc, #268]	; (800105c <MX_ADC1_Init+0x160>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f54:	4b41      	ldr	r3, [pc, #260]	; (800105c <MX_ADC1_Init+0x160>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <MX_ADC1_Init+0x160>)
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f60:	4b3e      	ldr	r3, [pc, #248]	; (800105c <MX_ADC1_Init+0x160>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f68:	4b3c      	ldr	r3, [pc, #240]	; (800105c <MX_ADC1_Init+0x160>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	; (800105c <MX_ADC1_Init+0x160>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f74:	4b39      	ldr	r3, [pc, #228]	; (800105c <MX_ADC1_Init+0x160>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7a:	4838      	ldr	r0, [pc, #224]	; (800105c <MX_ADC1_Init+0x160>)
 8000f7c:	f000 fdce 	bl	8001b1c <HAL_ADC_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f86:	f000 fa57 	bl	8001438 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f92:	2300      	movs	r3, #0
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.Offset = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	482c      	ldr	r0, [pc, #176]	; (800105c <MX_ADC1_Init+0x160>)
 8000faa:	f001 fa2d 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000fb4:	f000 fa40 	bl	8001438 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fb8:	230c      	movs	r3, #12
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4825      	ldr	r0, [pc, #148]	; (800105c <MX_ADC1_Init+0x160>)
 8000fc8:	f001 fa1e 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000fd2:	f000 fa31 	bl	8001438 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000fea:	2340      	movs	r3, #64	; 0x40
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4814      	ldr	r0, [pc, #80]	; (800105c <MX_ADC1_Init+0x160>)
 800100c:	f001 fcb2 	bl	8002974 <HAL_ADCEx_InjectedConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001016:	f000 fa0f 	bl	8001438 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800101a:	2306      	movs	r3, #6
 800101c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_ADC1_Init+0x160>)
 8001028:	f001 fca4 	bl	8002974 <HAL_ADCEx_InjectedConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8001032:	f000 fa01 	bl	8001438 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001036:	2307      	movs	r3, #7
 8001038:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800103a:	2303      	movs	r3, #3
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <MX_ADC1_Init+0x160>)
 8001044:	f001 fc96 	bl	8002974 <HAL_ADCEx_InjectedConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 800104e:	f000 f9f3 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3740      	adds	r7, #64	; 0x40
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000078 	.word	0x20000078

08001060 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b096      	sub	sp, #88	; 0x58
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001066:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001072:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	615a      	str	r2, [r3, #20]
 8001084:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	222c      	movs	r2, #44	; 0x2c
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f005 ff8b 	bl	8006fa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001092:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <MX_TIM1_Init+0x164>)
 8001094:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <MX_TIM1_Init+0x168>)
 8001096:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <MX_TIM1_Init+0x164>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <MX_TIM1_Init+0x164>)
 80010a0:	2220      	movs	r2, #32
 80010a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000 - 1;
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <MX_TIM1_Init+0x164>)
 80010a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80010aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <MX_TIM1_Init+0x164>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010b2:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <MX_TIM1_Init+0x164>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b8:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <MX_TIM1_Init+0x164>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010be:	4841      	ldr	r0, [pc, #260]	; (80011c4 <MX_TIM1_Init+0x164>)
 80010c0:	f004 f958 	bl	8005374 <HAL_TIM_PWM_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80010ca:	f000 f9b5 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80010ce:	2370      	movs	r3, #112	; 0x70
 80010d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010de:	4619      	mov	r1, r3
 80010e0:	4838      	ldr	r0, [pc, #224]	; (80011c4 <MX_TIM1_Init+0x164>)
 80010e2:	f005 fa9f 	bl	8006624 <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010ec:	f000 f9a4 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f8:	2300      	movs	r3, #0
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010fc:	2300      	movs	r3, #0
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800110c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001110:	2200      	movs	r2, #0
 8001112:	4619      	mov	r1, r3
 8001114:	482b      	ldr	r0, [pc, #172]	; (80011c4 <MX_TIM1_Init+0x164>)
 8001116:	f004 fc8d 	bl	8005a34 <HAL_TIM_PWM_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001120:	f000 f98a 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001128:	2204      	movs	r2, #4
 800112a:	4619      	mov	r1, r3
 800112c:	4825      	ldr	r0, [pc, #148]	; (80011c4 <MX_TIM1_Init+0x164>)
 800112e:	f004 fc81 	bl	8005a34 <HAL_TIM_PWM_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001138:	f000 f97e 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800113c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001140:	2208      	movs	r2, #8
 8001142:	4619      	mov	r1, r3
 8001144:	481f      	ldr	r0, [pc, #124]	; (80011c4 <MX_TIM1_Init+0x164>)
 8001146:	f004 fc75 	bl	8005a34 <HAL_TIM_PWM_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001150:	f000 f972 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001154:	2370      	movs	r3, #112	; 0x70
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001158:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800115c:	220c      	movs	r2, #12
 800115e:	4619      	mov	r1, r3
 8001160:	4818      	ldr	r0, [pc, #96]	; (80011c4 <MX_TIM1_Init+0x164>)
 8001162:	f004 fc67 	bl	8005a34 <HAL_TIM_PWM_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800116c:	f000 f964 	bl	8001438 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001188:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <MX_TIM1_Init+0x164>)
 80011a6:	f005 faa3 	bl	80066f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 80011b0:	f000 f942 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <MX_TIM1_Init+0x164>)
 80011b6:	f000 fa8f 	bl	80016d8 <HAL_TIM_MspPostInit>

}
 80011ba:	bf00      	nop
 80011bc:	3758      	adds	r7, #88	; 0x58
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000010c 	.word	0x2000010c
 80011c8:	40012c00 	.word	0x40012c00

080011cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <MX_TIM2_Init+0xd0>)
 80011ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <MX_TIM2_Init+0xd0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b28      	ldr	r3, [pc, #160]	; (800129c <MX_TIM2_Init+0xd0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <MX_TIM2_Init+0xd0>)
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <MX_TIM2_Init+0xd0>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <MX_TIM2_Init+0xd0>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001212:	4822      	ldr	r0, [pc, #136]	; (800129c <MX_TIM2_Init+0xd0>)
 8001214:	f004 f9ec 	bl	80055f0 <HAL_TIM_IC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800121e:	f000 f90b 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	481a      	ldr	r0, [pc, #104]	; (800129c <MX_TIM2_Init+0xd0>)
 8001232:	f005 f9f7 	bl	8006624 <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800123c:	f000 f8fc 	bl	8001438 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001244:	2301      	movs	r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	4619      	mov	r1, r3
 8001256:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_TIM2_Init+0xd0>)
 8001258:	f004 fb50 	bl	80058fc <HAL_TIM_IC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001262:	f000 f8e9 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2204      	movs	r2, #4
 800126a:	4619      	mov	r1, r3
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <MX_TIM2_Init+0xd0>)
 800126e:	f004 fb45 	bl	80058fc <HAL_TIM_IC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001278:	f000 f8de 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2208      	movs	r2, #8
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_TIM2_Init+0xd0>)
 8001284:	f004 fb3a 	bl	80058fc <HAL_TIM_IC_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800128e:	f000 f8d3 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000158 	.word	0x20000158

080012a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_USART2_UART_Init+0x58>)
 80012a6:	4a15      	ldr	r2, [pc, #84]	; (80012fc <MX_USART2_UART_Init+0x5c>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_USART2_UART_Init+0x58>)
 80012ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80012b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_USART2_UART_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_USART2_UART_Init+0x58>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_USART2_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_USART2_UART_Init+0x58>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_USART2_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_USART2_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_USART2_UART_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_USART2_UART_Init+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_USART2_UART_Init+0x58>)
 80012e4:	f005 faa1 	bl	800682a <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012ee:	f000 f8a3 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001a4 	.word	0x200001a4
 80012fc:	40004400 	.word	0x40004400

08001300 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_DMA_Init+0x38>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <MX_DMA_Init+0x38>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6153      	str	r3, [r2, #20]
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_DMA_Init+0x38>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	200b      	movs	r0, #11
 8001324:	f002 f843 	bl	80033ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001328:	200b      	movs	r0, #11
 800132a:	f002 f85c 	bl	80033e6 <HAL_NVIC_EnableIRQ>

}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000

0800133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <MX_GPIO_Init+0xf0>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a35      	ldr	r2, [pc, #212]	; (800142c <MX_GPIO_Init+0xf0>)
 8001358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b33      	ldr	r3, [pc, #204]	; (800142c <MX_GPIO_Init+0xf0>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <MX_GPIO_Init+0xf0>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a2f      	ldr	r2, [pc, #188]	; (800142c <MX_GPIO_Init+0xf0>)
 8001370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <MX_GPIO_Init+0xf0>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <MX_GPIO_Init+0xf0>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <MX_GPIO_Init+0xf0>)
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	6153      	str	r3, [r2, #20]
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_GPIO_Init+0xf0>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <MX_GPIO_Init+0xf0>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <MX_GPIO_Init+0xf0>)
 80013a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a4:	6153      	str	r3, [r2, #20]
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_GPIO_Init+0xf0>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b8:	481d      	ldr	r0, [pc, #116]	; (8001430 <MX_GPIO_Init+0xf4>)
 80013ba:	f002 fb4f 	bl	8003a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80013c4:	481b      	ldr	r0, [pc, #108]	; (8001434 <MX_GPIO_Init+0xf8>)
 80013c6:	f002 fb49 	bl	8003a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4814      	ldr	r0, [pc, #80]	; (8001434 <MX_GPIO_Init+0xf8>)
 80013e2:	f002 f9b1 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_GPIO_Init+0xf4>)
 8001400:	f002 f9a2 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8001404:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_GPIO_Init+0xf8>)
 800141e:	f002 f993 	bl	8003748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	; 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	48000400 	.word	0x48000400
 8001434:	48000800 	.word	0x48000800

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	e7fe      	b.n	8001440 <Error_Handler+0x8>
	...

08001444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_MspInit+0x44>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_MspInit+0x44>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6193      	str	r3, [r2, #24]
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_MspInit+0x44>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_MspInit+0x44>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_MspInit+0x44>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_MspInit+0x44>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800147a:	2007      	movs	r0, #7
 800147c:	f001 ff8c 	bl	8003398 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	; 0x30
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ac:	f040 8085 	bne.w	80015ba <HAL_ADC_MspInit+0x12e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014b0:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	4a43      	ldr	r2, [pc, #268]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 80014b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ba:	6153      	str	r3, [r2, #20]
 80014bc:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c8:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4a3d      	ldr	r2, [pc, #244]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 80014ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014d2:	6153      	str	r3, [r2, #20]
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	4a37      	ldr	r2, [pc, #220]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 80014e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ea:	6153      	str	r3, [r2, #20]
 80014ec:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	4a31      	ldr	r2, [pc, #196]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 80014fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001502:	6153      	str	r3, [r2, #20]
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <HAL_ADC_MspInit+0x138>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001510:	230f      	movs	r3, #15
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4829      	ldr	r0, [pc, #164]	; (80015c8 <HAL_ADC_MspInit+0x13c>)
 8001524:	f002 f910 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001528:	2303      	movs	r3, #3
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153e:	f002 f903 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001542:	2302      	movs	r3, #2
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001546:	2303      	movs	r3, #3
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	481d      	ldr	r0, [pc, #116]	; (80015cc <HAL_ADC_MspInit+0x140>)
 8001556:	f002 f8f7 	bl	8003748 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_ADC_MspInit+0x144>)
 800155c:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_ADC_MspInit+0x148>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_ADC_MspInit+0x144>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <HAL_ADC_MspInit+0x144>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_ADC_MspInit+0x144>)
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_ADC_MspInit+0x144>)
 8001574:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001578:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_ADC_MspInit+0x144>)
 800157c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001580:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HAL_ADC_MspInit+0x144>)
 8001584:	2220      	movs	r2, #32
 8001586:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_ADC_MspInit+0x144>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800158e:	4810      	ldr	r0, [pc, #64]	; (80015d0 <HAL_ADC_MspInit+0x144>)
 8001590:	f001 ff43 	bl	800341a <HAL_DMA_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 800159a:	f7ff ff4d 	bl	8001438 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <HAL_ADC_MspInit+0x144>)
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_ADC_MspInit+0x144>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2012      	movs	r0, #18
 80015b0:	f001 fefd 	bl	80033ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80015b4:	2012      	movs	r0, #18
 80015b6:	f001 ff16 	bl	80033e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3730      	adds	r7, #48	; 0x30
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48000800 	.word	0x48000800
 80015cc:	48000400 	.word	0x48000400
 80015d0:	200000c8 	.word	0x200000c8
 80015d4:	40020008 	.word	0x40020008

080015d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_TIM_PWM_MspInit+0x38>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d10b      	bne.n	8001602 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_TIM_PWM_MspInit+0x3c>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <HAL_TIM_PWM_MspInit+0x3c>)
 80015f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015f4:	6193      	str	r3, [r2, #24]
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_TIM_PWM_MspInit+0x3c>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40012c00 	.word	0x40012c00
 8001614:	40021000 	.word	0x40021000

08001618 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001638:	d146      	bne.n	80016c8 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_TIM_IC_MspInit+0xb8>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a24      	ldr	r2, [pc, #144]	; (80016d0 <HAL_TIM_IC_MspInit+0xb8>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_TIM_IC_MspInit+0xb8>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_TIM_IC_MspInit+0xb8>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_TIM_IC_MspInit+0xb8>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6153      	str	r3, [r2, #20]
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_TIM_IC_MspInit+0xb8>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_TIM_IC_MspInit+0xb8>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <HAL_TIM_IC_MspInit+0xb8>)
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	6153      	str	r3, [r2, #20]
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_TIM_IC_MspInit+0xb8>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 8001682:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001694:	2301      	movs	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	480d      	ldr	r0, [pc, #52]	; (80016d4 <HAL_TIM_IC_MspInit+0xbc>)
 80016a0:	f002 f852 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 80016a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016b6:	2301      	movs	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f002 f840 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	48000400 	.word	0x48000400

080016d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a29      	ldr	r2, [pc, #164]	; (800179c <HAL_TIM_MspPostInit+0xc4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d14b      	bne.n	8001792 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <HAL_TIM_MspPostInit+0xc8>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <HAL_TIM_MspPostInit+0xc8>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	6153      	str	r3, [r2, #20]
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <HAL_TIM_MspPostInit+0xc8>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_TIM_MspPostInit+0xc8>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_TIM_MspPostInit+0xc8>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	6153      	str	r3, [r2, #20]
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_TIM_MspPostInit+0xc8>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800172a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800173c:	2306      	movs	r3, #6
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f001 fffd 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800174e:	2301      	movs	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800175e:	2306      	movs	r3, #6
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480e      	ldr	r0, [pc, #56]	; (80017a4 <HAL_TIM_MspPostInit+0xcc>)
 800176a:	f001 ffed 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800176e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001780:	230b      	movs	r3, #11
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f001 ffdb 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40012c00 	.word	0x40012c00
 80017a0:	40021000 	.word	0x40021000
 80017a4:	48000400 	.word	0x48000400

080017a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a17      	ldr	r2, [pc, #92]	; (8001824 <HAL_UART_MspInit+0x7c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d128      	bne.n	800181c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_UART_MspInit+0x80>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a16      	ldr	r2, [pc, #88]	; (8001828 <HAL_UART_MspInit+0x80>)
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_UART_MspInit+0x80>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_UART_MspInit+0x80>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <HAL_UART_MspInit+0x80>)
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	6153      	str	r3, [r2, #20]
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_UART_MspInit+0x80>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017fa:	230c      	movs	r3, #12
 80017fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800180a:	2307      	movs	r3, #7
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f001 ff96 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40004400 	.word	0x40004400
 8001828:	40021000 	.word	0x40021000

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 f908 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <DMA1_Channel1_IRQHandler+0x10>)
 8001886:	f001 fe6e 	bl	8003566 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000c8 	.word	0x200000c8

08001894 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
	int8_t rotDir;
	float ErectFreqRef = 100.0f;
 800189a:	4b31      	ldr	r3, [pc, #196]	; (8001960 <ADC1_IRQHandler+0xcc>)
 800189c:	603b      	str	r3, [r7, #0]
	float ErectFreqErr;
  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800189e:	4831      	ldr	r0, [pc, #196]	; (8001964 <ADC1_IRQHandler+0xd0>)
 80018a0:	f000 fb5e 	bl	8001f60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80018a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a8:	482f      	ldr	r0, [pc, #188]	; (8001968 <ADC1_IRQHandler+0xd4>)
 80018aa:	f002 f8ef 	bl	8003a8c <HAL_GPIO_TogglePin>

	//read IO signals
	gButton1 = readButton1();
 80018ae:	f7fe fd39 	bl	8000324 <readButton1>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b2d      	ldr	r3, [pc, #180]	; (800196c <ADC1_IRQHandler+0xd8>)
 80018b8:	701a      	strb	r2, [r3, #0]
	gVolume = readVolume();
 80018ba:	f7fe fd9b 	bl	80003f4 <readVolume>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <ADC1_IRQHandler+0xdc>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]
	gVdc = readVdc();
 80018c8:	f7fe fdb4 	bl	8000434 <readVdc>
 80018cc:	eef0 7a40 	vmov.f32	s15, s0
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <ADC1_IRQHandler+0xe0>)
 80018d2:	edc3 7a00 	vstr	s15, [r3]

	//DutyRef Calculation
	if ( gButton1 == 1 )
 80018d6:	4b25      	ldr	r3, [pc, #148]	; (800196c <ADC1_IRQHandler+0xd8>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d102      	bne.n	80018e4 <ADC1_IRQHandler+0x50>
	  rotDir = 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	e001      	b.n	80018e8 <ADC1_IRQHandler+0x54>
	else
	  rotDir = -1;
 80018e4:	23ff      	movs	r3, #255	; 0xff
 80018e6:	71fb      	strb	r3, [r7, #7]
	ErectFreqErr = ErectFreqRef - gElectFreq;
	gDutyRef += ErectFreqErr * 0.0000001f;
	*/


	gDutyRef = (float)rotDir * gVolume;
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <ADC1_IRQHandler+0xdc>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <ADC1_IRQHandler+0xe4>)
 8001900:	edc3 7a00 	vstr	s15, [r3]
	if (gDutyRef > 1.0f) gDutyRef = 1.0f;
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <ADC1_IRQHandler+0xe4>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800190e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001916:	dd03      	ble.n	8001920 <ADC1_IRQHandler+0x8c>
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <ADC1_IRQHandler+0xe4>)
 800191a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800191e:	601a      	str	r2, [r3, #0]
	if (gDutyRef < -1.0f) gDutyRef = -1.0f;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <ADC1_IRQHandler+0xe4>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800192a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	d502      	bpl.n	800193a <ADC1_IRQHandler+0xa6>
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <ADC1_IRQHandler+0xe4>)
 8001936:	4a11      	ldr	r2, [pc, #68]	; (800197c <ADC1_IRQHandler+0xe8>)
 8001938:	601a      	str	r2, [r3, #0]

	//gDutyRef = 0.5f;

	//Input DutyRef, Lead Angle Output Duty
	sixStepTasks(gDutyRef, 0.0f, gDuty);
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <ADC1_IRQHandler+0xe4>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	480f      	ldr	r0, [pc, #60]	; (8001980 <ADC1_IRQHandler+0xec>)
 8001942:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001984 <ADC1_IRQHandler+0xf0>
 8001946:	eeb0 0a67 	vmov.f32	s0, s15
 800194a:	f7fe fe3d 	bl	80005c8 <sixStepTasks>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800194e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <ADC1_IRQHandler+0xd4>)
 8001954:	f002 f89a 	bl	8003a8c <HAL_GPIO_TogglePin>
  /* USER CODE END ADC1_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	42c80000 	.word	0x42c80000
 8001964:	20000078 	.word	0x20000078
 8001968:	48000400 	.word	0x48000400
 800196c:	2000002f 	.word	0x2000002f
 8001970:	20000040 	.word	0x20000040
 8001974:	2000003c 	.word	0x2000003c
 8001978:	20000044 	.word	0x20000044
 800197c:	bf800000 	.word	0xbf800000
 8001980:	20000048 	.word	0x20000048
 8001984:	00000000 	.word	0x00000000

08001988 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff ffea 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b6:	490d      	ldr	r1, [pc, #52]	; (80019ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <LoopForever+0xe>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019cc:	4c0a      	ldr	r4, [pc, #40]	; (80019f8 <LoopForever+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f005 fac1 	bl	8006f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019de:	f7ff f9cb 	bl	8000d78 <main>

080019e2 <LoopForever>:

LoopForever:
    b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019e4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019f0:	08007010 	.word	0x08007010
  ldr r2, =_sbss
 80019f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019f8:	20000230 	.word	0x20000230

080019fc <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <CAN_RX1_IRQHandler>
	...

08001a00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_Init+0x28>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_Init+0x28>)
 8001a0a:	f043 0310 	orr.w	r3, r3, #16
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f001 fcc1 	bl	8003398 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f808 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fd12 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40022000 	.word	0x40022000

08001a2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x54>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x58>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f001 fcd9 	bl	8003402 <HAL_SYSTICK_Config>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00e      	b.n	8001a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d80a      	bhi.n	8001a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a60:	2200      	movs	r2, #0
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f001 fca1 	bl	80033ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <HAL_InitTick+0x5c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x20>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a9e:	6013      	str	r3, [r2, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	2000022c 	.word	0x2000022c

08001ab4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_GetTick+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	2000022c 	.word	0x2000022c

08001acc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b09a      	sub	sp, #104	; 0x68
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e169      	b.n	8001e10 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d176      	bne.n	8001c3c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d152      	bne.n	8001bfc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fc8b 	bl	800148c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d13b      	bne.n	8001bfc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f001 fad1 	bl	800312c <ADC_Disable>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d12f      	bne.n	8001bfc <HAL_ADC_Init+0xe0>
 8001b9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d12b      	bne.n	8001bfc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bac:	f023 0302 	bic.w	r3, r3, #2
 8001bb0:	f043 0202 	orr.w	r2, r3, #2
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bc6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bd6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd8:	4b8f      	ldr	r3, [pc, #572]	; (8001e18 <HAL_ADC_Init+0x2fc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a8f      	ldr	r2, [pc, #572]	; (8001e1c <HAL_ADC_Init+0x300>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0c9a      	lsrs	r2, r3, #18
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bee:	e002      	b.n	8001bf6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f9      	bne.n	8001bf0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c18:	d110      	bne.n	8001c3c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f023 0312 	bic.w	r3, r3, #18
 8001c22:	f043 0210 	orr.w	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f040 80d6 	bne.w	8001df6 <HAL_ADC_Init+0x2da>
 8001c4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 80d1 	bne.w	8001df6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 80c9 	bne.w	8001df6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c6c:	f043 0202 	orr.w	r2, r3, #2
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c74:	4b6a      	ldr	r3, [pc, #424]	; (8001e20 <HAL_ADC_Init+0x304>)
 8001c76:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d108      	bne.n	8001c9c <HAL_ADC_Init+0x180>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_Init+0x180>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_ADC_Init+0x182>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d11c      	bne.n	8001cdc <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d010      	beq.n	8001cca <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_ADC_Init+0x1a8>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_Init+0x1a8>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_ADC_Init+0x1aa>
 8001cc4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d108      	bne.n	8001cdc <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cda:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7e5b      	ldrb	r3, [r3, #25]
 8001ce0:	035b      	lsls	r3, r3, #13
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ce6:	2a01      	cmp	r2, #1
 8001ce8:	d002      	beq.n	8001cf0 <HAL_ADC_Init+0x1d4>
 8001cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cee:	e000      	b.n	8001cf2 <HAL_ADC_Init+0x1d6>
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d02:	4313      	orrs	r3, r2
 8001d04:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d11b      	bne.n	8001d48 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7e5b      	ldrb	r3, [r3, #25]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	045a      	lsls	r2, r3, #17
 8001d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	663b      	str	r3, [r7, #96]	; 0x60
 8001d2a:	e00d      	b.n	8001d48 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d34:	f043 0220 	orr.w	r2, r3, #32
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d007      	beq.n	8001d60 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d114      	bne.n	8001d98 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d7c:	f023 0302 	bic.w	r3, r3, #2
 8001d80:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7e1b      	ldrb	r3, [r3, #24]
 8001d86:	039a      	lsls	r2, r3, #14
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4313      	orrs	r3, r2
 8001d92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d94:	4313      	orrs	r3, r2
 8001d96:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_ADC_Init+0x308>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001da8:	430b      	orrs	r3, r1
 8001daa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d10c      	bne.n	8001dce <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f023 010f 	bic.w	r1, r3, #15
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	1e5a      	subs	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
 8001dcc:	e007      	b.n	8001dde <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 020f 	bic.w	r2, r2, #15
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f023 0303 	bic.w	r3, r3, #3
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40
 8001df4:	e00a      	b.n	8001e0c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f023 0312 	bic.w	r3, r3, #18
 8001dfe:	f043 0210 	orr.w	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e06:	2301      	movs	r3, #1
 8001e08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3768      	adds	r7, #104	; 0x68
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	431bde83 	.word	0x431bde83
 8001e20:	50000300 	.word	0x50000300
 8001e24:	fff0c007 	.word	0xfff0c007

08001e28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d17e      	bne.n	8001f44 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_Start_DMA+0x2c>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e07a      	b.n	8001f4a <HAL_ADC_Start_DMA+0x122>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f001 f901 	bl	8003064 <ADC_Enable>
 8001e62:	4603      	mov	r3, r0
 8001e64:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d166      	bne.n	8001f3a <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ea2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb6:	d106      	bne.n	8001ec6 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	f023 0206 	bic.w	r2, r3, #6
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ec4:	e002      	b.n	8001ecc <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <HAL_ADC_Start_DMA+0x12c>)
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_ADC_Start_DMA+0x130>)
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_ADC_Start_DMA+0x134>)
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	221c      	movs	r2, #28
 8001ef2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0210 	orr.w	r2, r2, #16
 8001f02:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3340      	adds	r3, #64	; 0x40
 8001f1e:	4619      	mov	r1, r3
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f001 fac0 	bl	80034a8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0204 	orr.w	r2, r2, #4
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e006      	b.n	8001f48 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f42:	e001      	b.n	8001f48 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
 8001f46:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	08002f99 	.word	0x08002f99
 8001f58:	08003013 	.word	0x08003013
 8001f5c:	0800302f 	.word	0x0800302f

08001f60 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x38>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d109      	bne.n	8001fac <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d05a      	beq.n	8002058 <HAL_ADC_IRQHandler+0xf8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d055      	beq.n	8002058 <HAL_ADC_IRQHandler+0xf8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d137      	bne.n	800204a <HAL_ADC_IRQHandler+0xea>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d132      	bne.n	800204a <HAL_ADC_IRQHandler+0xea>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d02d      	beq.n	800204a <HAL_ADC_IRQHandler+0xea>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d11a      	bne.n	8002032 <HAL_ADC_IRQHandler+0xd2>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 020c 	bic.w	r2, r2, #12
 800200a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d112      	bne.n	800204a <HAL_ADC_IRQHandler+0xea>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
 8002030:	e00b      	b.n	800204a <HAL_ADC_IRQHandler+0xea>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fd3e 	bl	8001acc <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	220c      	movs	r2, #12
 8002056:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <HAL_ADC_IRQHandler+0x10c>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <HAL_ADC_IRQHandler+0x120>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002072:	2b00      	cmp	r3, #0
 8002074:	d069      	beq.n	800214a <HAL_ADC_IRQHandler+0x1ea>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d064      	beq.n	800214a <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d14c      	bne.n	800213c <HAL_ADC_IRQHandler+0x1dc>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00b      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x164>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d140      	bne.n	800213c <HAL_ADC_IRQHandler+0x1dc>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d13b      	bne.n	800213c <HAL_ADC_IRQHandler+0x1dc>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d036      	beq.n	800213c <HAL_ADC_IRQHandler+0x1dc>
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d12d      	bne.n	800213c <HAL_ADC_IRQHandler+0x1dc>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11a      	bne.n	8002124 <HAL_ADC_IRQHandler+0x1c4>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020fc:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d112      	bne.n	800213c <HAL_ADC_IRQHandler+0x1dc>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
 8002122:	e00b      	b.n	800213c <HAL_ADC_IRQHandler+0x1dc>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f043 0210 	orr.w	r2, r3, #16
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f043 0201 	orr.w	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f93b 	bl	80023b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2260      	movs	r2, #96	; 0x60
 8002148:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d011      	beq.n	8002178 <HAL_ADC_IRQHandler+0x218>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00c      	beq.n	8002178 <HAL_ADC_IRQHandler+0x218>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff fcc2 	bl	8001af4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d012      	beq.n	80021a8 <HAL_ADC_IRQHandler+0x248>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <HAL_ADC_IRQHandler+0x248>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f921 	bl	80023e0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a6:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d012      	beq.n	80021d8 <HAL_ADC_IRQHandler+0x278>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00d      	beq.n	80021d8 <HAL_ADC_IRQHandler+0x278>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f913 	bl	80023f4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d03b      	beq.n	800225a <HAL_ADC_IRQHandler+0x2fa>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d036      	beq.n	800225a <HAL_ADC_IRQHandler+0x2fa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <HAL_ADC_IRQHandler+0x29a>
    {
      overrun_error = 1U;
 80021f4:	2301      	movs	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	e019      	b.n	800222e <HAL_ADC_IRQHandler+0x2ce>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_ADC_IRQHandler+0x340>)
 80021fc:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_ADC_IRQHandler+0x2be>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d10a      	bne.n	800222e <HAL_ADC_IRQHandler+0x2ce>
        {
          overrun_error = 1U;  
 8002218:	2301      	movs	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	e007      	b.n	800222e <HAL_ADC_IRQHandler+0x2ce>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_ADC_IRQHandler+0x2ce>
        {
          overrun_error = 1U;  
 800222a:	2301      	movs	r3, #1
 800222c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10e      	bne.n	8002252 <HAL_ADC_IRQHandler+0x2f2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f043 0202 	orr.w	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff fc5b 	bl	8001b08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2210      	movs	r2, #16
 8002258:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d018      	beq.n	8002296 <HAL_ADC_IRQHandler+0x336>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226a:	2b00      	cmp	r3, #0
 800226c:	d013      	beq.n	8002296 <HAL_ADC_IRQHandler+0x336>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f043 0208 	orr.w	r2, r3, #8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800228e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f89b 	bl	80023cc <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002296:	bf00      	nop
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	50000300 	.word	0x50000300

080022a4 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d175      	bne.n	80023aa <HAL_ADCEx_InjectedStart_IT+0x106>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_ADCEx_InjectedStart_IT+0x28>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e071      	b.n	80023b0 <HAL_ADCEx_InjectedStart_IT+0x10c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fec5 	bl	8003064 <ADC_Enable>
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
      /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d15d      	bne.n	80023a0 <HAL_ADCEx_InjectedStart_IT+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Case of independent mode or multimode(for devices with several ADCs):*/
      /* Set multimode state.                                                 */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Check if a regular conversion is ongoing */
      /* Note: On this device, there is no ADC error code fields related to   */
      /*       conversions on group injected only. In case of conversion on   */
      /*       going on group regular, no error code is reset.                */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_ADCEx_InjectedStart_IT+0x72>
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2260      	movs	r2, #96	; 0x60
 8002324:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC Injected context queue overflow interrupt if this feature */
      /* is enabled.                                                          */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <HAL_ADCEx_InjectedStart_IT+0xa0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002342:	605a      	str	r2, [r3, #4]
      }
      
      /* Enable ADC end of conversion interrupt */
      switch(hadc->Init.EOCSelection)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d110      	bne.n	800236e <HAL_ADCEx_InjectedStart_IT+0xca>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0220 	bic.w	r2, r2, #32
 800235a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800236a:	605a      	str	r2, [r3, #4]
          break;
 800236c:	e008      	b.n	8002380 <HAL_ADCEx_InjectedStart_IT+0xdc>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800237c:	605a      	str	r2, [r3, #4]
          break;
 800237e:	bf00      	nop
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <HAL_ADCEx_InjectedStart_IT+0x10a>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0208 	orr.w	r2, r2, #8
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	e006      	b.n	80023ae <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023a8:	e001      	b.n	80023ae <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
 80023ac:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002408:	b480      	push	{r7}
 800240a:	b09b      	sub	sp, #108	; 0x6c
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_ADC_ConfigChannel+0x22>
 8002426:	2302      	movs	r3, #2
 8002428:	e299      	b.n	800295e <HAL_ADC_ConfigChannel+0x556>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 827d 	bne.w	800293c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b04      	cmp	r3, #4
 8002448:	d81c      	bhi.n	8002484 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	461a      	mov	r2, r3
 800245e:	231f      	movs	r3, #31
 8002460:	4093      	lsls	r3, r2
 8002462:	43db      	mvns	r3, r3
 8002464:	4019      	ands	r1, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa00 f203 	lsl.w	r2, r0, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
 8002482:	e063      	b.n	800254c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b09      	cmp	r3, #9
 800248a:	d81e      	bhi.n	80024ca <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	3b1e      	subs	r3, #30
 80024a0:	221f      	movs	r2, #31
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	4019      	ands	r1, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	3b1e      	subs	r3, #30
 80024bc:	fa00 f203 	lsl.w	r2, r0, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	635a      	str	r2, [r3, #52]	; 0x34
 80024c8:	e040      	b.n	800254c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b0e      	cmp	r3, #14
 80024d0:	d81e      	bhi.n	8002510 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	3b3c      	subs	r3, #60	; 0x3c
 80024e6:	221f      	movs	r2, #31
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4019      	ands	r1, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	3b3c      	subs	r3, #60	; 0x3c
 8002502:	fa00 f203 	lsl.w	r2, r0, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	639a      	str	r2, [r3, #56]	; 0x38
 800250e:	e01d      	b.n	800254c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	3b5a      	subs	r3, #90	; 0x5a
 8002524:	221f      	movs	r2, #31
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	4019      	ands	r1, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	3b5a      	subs	r3, #90	; 0x5a
 8002540:	fa00 f203 	lsl.w	r2, r0, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 80e5 	bne.w	8002726 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b09      	cmp	r3, #9
 8002562:	d91c      	bls.n	800259e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6999      	ldr	r1, [r3, #24]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	3b1e      	subs	r3, #30
 8002576:	2207      	movs	r2, #7
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	4019      	ands	r1, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6898      	ldr	r0, [r3, #8]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	3b1e      	subs	r3, #30
 8002590:	fa00 f203 	lsl.w	r2, r0, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	619a      	str	r2, [r3, #24]
 800259c:	e019      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6959      	ldr	r1, [r3, #20]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	2207      	movs	r2, #7
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	4019      	ands	r1, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6898      	ldr	r0, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d84f      	bhi.n	8002694 <HAL_ADC_ConfigChannel+0x28c>
 80025f4:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <HAL_ADC_ConfigChannel+0x1f4>)
 80025f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fa:	bf00      	nop
 80025fc:	0800260d 	.word	0x0800260d
 8002600:	0800262f 	.word	0x0800262f
 8002604:	08002651 	.word	0x08002651
 8002608:	08002673 	.word	0x08002673
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002612:	4b99      	ldr	r3, [pc, #612]	; (8002878 <HAL_ADC_ConfigChannel+0x470>)
 8002614:	4013      	ands	r3, r2
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	0691      	lsls	r1, r2, #26
 800261c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800261e:	430a      	orrs	r2, r1
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800262a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800262c:	e07e      	b.n	800272c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002634:	4b90      	ldr	r3, [pc, #576]	; (8002878 <HAL_ADC_ConfigChannel+0x470>)
 8002636:	4013      	ands	r3, r2
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	0691      	lsls	r1, r2, #26
 800263e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002640:	430a      	orrs	r2, r1
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800264c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800264e:	e06d      	b.n	800272c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002656:	4b88      	ldr	r3, [pc, #544]	; (8002878 <HAL_ADC_ConfigChannel+0x470>)
 8002658:	4013      	ands	r3, r2
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	0691      	lsls	r1, r2, #26
 8002660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002662:	430a      	orrs	r2, r1
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800266e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002670:	e05c      	b.n	800272c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002678:	4b7f      	ldr	r3, [pc, #508]	; (8002878 <HAL_ADC_ConfigChannel+0x470>)
 800267a:	4013      	ands	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	0691      	lsls	r1, r2, #26
 8002682:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002684:	430a      	orrs	r2, r1
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002690:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002692:	e04b      	b.n	800272c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	069b      	lsls	r3, r3, #26
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d107      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026b6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	069b      	lsls	r3, r3, #26
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d107      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026da:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	069b      	lsls	r3, r3, #26
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d107      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026fe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002706:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	069b      	lsls	r3, r3, #26
 8002710:	429a      	cmp	r2, r3
 8002712:	d10a      	bne.n	800272a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002722:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002724:	e001      	b.n	800272a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002726:	bf00      	nop
 8002728:	e000      	b.n	800272c <HAL_ADC_ConfigChannel+0x324>
      break;
 800272a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d108      	bne.n	800274c <HAL_ADC_ConfigChannel+0x344>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x344>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <HAL_ADC_ConfigChannel+0x346>
 800274c:	2300      	movs	r3, #0
 800274e:	2b00      	cmp	r3, #0
 8002750:	f040 80ff 	bne.w	8002952 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d00f      	beq.n	800277c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2201      	movs	r2, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	400a      	ands	r2, r1
 8002776:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800277a:	e049      	b.n	8002810 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2201      	movs	r2, #1
 800278a:	409a      	lsls	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b09      	cmp	r3, #9
 800279c:	d91c      	bls.n	80027d8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6999      	ldr	r1, [r3, #24]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	3b1b      	subs	r3, #27
 80027b0:	2207      	movs	r2, #7
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	4019      	ands	r1, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6898      	ldr	r0, [r3, #8]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	3b1b      	subs	r3, #27
 80027ca:	fa00 f203 	lsl.w	r2, r0, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	619a      	str	r2, [r3, #24]
 80027d6:	e01b      	b.n	8002810 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6959      	ldr	r1, [r3, #20]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	2207      	movs	r2, #7
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	4019      	ands	r1, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6898      	ldr	r0, [r3, #8]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	fa00 f203 	lsl.w	r2, r0, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_ADC_ConfigChannel+0x474>)
 8002812:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b10      	cmp	r3, #16
 800281a:	d105      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800281c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002824:	2b00      	cmp	r3, #0
 8002826:	d014      	beq.n	8002852 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800282c:	2b11      	cmp	r3, #17
 800282e:	d105      	bne.n	800283c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002840:	2b12      	cmp	r3, #18
 8002842:	f040 8086 	bne.w	8002952 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800284e:	2b00      	cmp	r3, #0
 8002850:	d17f      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d10d      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x478>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d106      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x478>
 8002872:	2301      	movs	r3, #1
 8002874:	e005      	b.n	8002882 <HAL_ADC_ConfigChannel+0x47a>
 8002876:	bf00      	nop
 8002878:	83fff000 	.word	0x83fff000
 800287c:	50000300 	.word	0x50000300
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d150      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002886:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002888:	2b00      	cmp	r3, #0
 800288a:	d010      	beq.n	80028ae <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d107      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x4a0>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x4a0>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_ADC_ConfigChannel+0x4a2>
 80028a8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d13c      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d11d      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x4ea>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028be:	d118      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80028c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_ADC_ConfigChannel+0x564>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <HAL_ADC_ConfigChannel+0x568>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0c9a      	lsrs	r2, r3, #18
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028e2:	e002      	b.n	80028ea <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f9      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028f0:	e02e      	b.n	8002950 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b11      	cmp	r3, #17
 80028f8:	d10b      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x50a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002902:	d106      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800290c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002910:	e01e      	b.n	8002950 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b12      	cmp	r3, #18
 8002918:	d11a      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800291a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002924:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002926:	e013      	b.n	8002950 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800293a:	e00a      	b.n	8002952 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800294e:	e000      	b.n	8002952 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002950:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800295a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800295e:	4618      	mov	r0, r3
 8002960:	376c      	adds	r7, #108	; 0x6c
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000000 	.word	0x20000000
 8002970:	431bde83 	.word	0x431bde83

08002974 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002974:	b480      	push	{r7}
 8002976:	b09d      	sub	sp, #116	; 0x74
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_ADCEx_InjectedConfigChannel+0x26>
 8002996:	2302      	movs	r3, #2
 8002998:	e2f3      	b.n	8002f82 <HAL_ADCEx_InjectedConfigChannel+0x60e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d132      	bne.n	8002a18 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d124      	bne.n	8002a04 <HAL_ADCEx_InjectedConfigChannel+0x90>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d00c      	beq.n	80029dc <HAL_ADCEx_InjectedConfigChannel+0x68>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	021a      	lsls	r2, r3, #8
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	4313      	orrs	r3, r2
 80029d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029d6:	4313      	orrs	r3, r2
 80029d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80029da:	e005      	b.n	80029e8 <HAL_ADCEx_InjectedConfigChannel+0x74>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029e4:	4313      	orrs	r3, r2
 80029e6:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ee:	4b9c      	ldr	r3, [pc, #624]	; (8002c60 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029f8:	430b      	orrs	r3, r1
 80029fa:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a00:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002a02:	e060      	b.n	8002ac6 <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002a16:	e056      	b.n	8002ac6 <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d121      	bne.n	8002a64 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	699a      	ldr	r2, [r3, #24]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d00e      	beq.n	8002a54 <HAL_ADCEx_InjectedConfigChannel+0xe0>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	1e59      	subs	r1, r3, #1
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4319      	orrs	r1, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	649a      	str	r2, [r3, #72]	; 0x48
 8002a52:	e007      	b.n	8002a64 <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	3302      	adds	r3, #2
 8002a76:	221f      	movs	r2, #31
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	4019      	ands	r1, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	3302      	adds	r3, #2
 8002a92:	fa00 f303 	lsl.w	r3, r0, r3
 8002a96:	ea41 0203 	orr.w	r2, r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	1e5a      	subs	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <HAL_ADCEx_InjectedConfigChannel+0x152>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ab6:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d12d      	bne.n	8002b30 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	7f5b      	ldrb	r3, [r3, #29]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d110      	bne.n	8002afe <HAL_ADCEx_InjectedConfigChannel+0x18a>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7f9b      	ldrb	r3, [r3, #30]
 8002aea:	055a      	lsls	r2, r3, #21
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	7f1b      	ldrb	r3, [r3, #28]
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]
 8002afc:	e018      	b.n	8002b30 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	7f9b      	ldrb	r3, [r3, #30]
 8002b0c:	055a      	lsls	r2, r3, #21
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	7f1b      	ldrb	r3, [r3, #28]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d108      	bne.n	8002b30 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f043 0220 	orr.w	r2, r3, #32
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 8110 	bne.w	8002d60 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10c      	bne.n	8002b62 <HAL_ADCEx_InjectedConfigChannel+0x1ee>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	7f5b      	ldrb	r3, [r3, #29]
 8002b56:	065a      	lsls	r2, r3, #25
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	60da      	str	r2, [r3, #12]
 8002b60:	e014      	b.n	8002b8c <HAL_ADCEx_InjectedConfigChannel+0x218>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002b70:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	7f5b      	ldrb	r3, [r3, #29]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d108      	bne.n	8002b8c <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b09      	cmp	r3, #9
 8002b92:	d91c      	bls.n	8002bce <HAL_ADCEx_InjectedConfigChannel+0x25a>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6999      	ldr	r1, [r3, #24]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b1e      	subs	r3, #30
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	4019      	ands	r1, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6898      	ldr	r0, [r3, #8]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b1e      	subs	r3, #30
 8002bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	619a      	str	r2, [r3, #24]
 8002bcc:	e019      	b.n	8002c02 <HAL_ADCEx_InjectedConfigChannel+0x28e>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6959      	ldr	r1, [r3, #20]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	2207      	movs	r2, #7
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	4019      	ands	r1, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6898      	ldr	r0, [r3, #8]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d854      	bhi.n	8002cce <HAL_ADCEx_InjectedConfigChannel+0x35a>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <HAL_ADCEx_InjectedConfigChannel+0x2b8>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c69 	.word	0x08002c69
 8002c34:	08002c8b 	.word	0x08002c8b
 8002c38:	08002cad 	.word	0x08002cad
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	0691      	lsls	r1, r2, #26
 8002c4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c5a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002c5c:	e083      	b.n	8002d66 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
 8002c5e:	bf00      	nop
 8002c60:	82082000 	.word	0x82082000
 8002c64:	83fff000 	.word	0x83fff000
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c6e:	4b9a      	ldr	r3, [pc, #616]	; (8002ed8 <HAL_ADCEx_InjectedConfigChannel+0x564>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	0691      	lsls	r1, r2, #26
 8002c78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c86:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002c88:	e06d      	b.n	8002d66 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c90:	4b91      	ldr	r3, [pc, #580]	; (8002ed8 <HAL_ADCEx_InjectedConfigChannel+0x564>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	0691      	lsls	r1, r2, #26
 8002c9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ca8:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002caa:	e05c      	b.n	8002d66 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cb2:	4b89      	ldr	r3, [pc, #548]	; (8002ed8 <HAL_ADCEx_InjectedConfigChannel+0x564>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	0691      	lsls	r1, r2, #26
 8002cbc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cca:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002ccc:	e04b      	b.n	8002d66 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	069b      	lsls	r3, r3, #26
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cf0:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	069b      	lsls	r3, r3, #26
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d107      	bne.n	8002d16 <HAL_ADCEx_InjectedConfigChannel+0x3a2>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d14:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	069b      	lsls	r3, r3, #26
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d107      	bne.n	8002d3a <HAL_ADCEx_InjectedConfigChannel+0x3c6>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d38:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	069b      	lsls	r3, r3, #26
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d10a      	bne.n	8002d64 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d5c:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002d5e:	e001      	b.n	8002d64 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
    }
    
  }
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
      break;
 8002d64:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d108      	bne.n	8002d86 <HAL_ADCEx_InjectedConfigChannel+0x412>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_ADCEx_InjectedConfigChannel+0x412>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_ADCEx_InjectedConfigChannel+0x414>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f040 80f4 	bne.w	8002f76 <HAL_ADCEx_InjectedConfigChannel+0x602>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d00f      	beq.n	8002db6 <HAL_ADCEx_InjectedConfigChannel+0x442>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2201      	movs	r2, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43da      	mvns	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	400a      	ands	r2, r1
 8002db0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002db4:	e049      	b.n	8002e4a <HAL_ADCEx_InjectedConfigChannel+0x4d6>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b09      	cmp	r3, #9
 8002dd6:	d91c      	bls.n	8002e12 <HAL_ADCEx_InjectedConfigChannel+0x49e>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6999      	ldr	r1, [r3, #24]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	3b1b      	subs	r3, #27
 8002dea:	2207      	movs	r2, #7
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	4019      	ands	r1, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6898      	ldr	r0, [r3, #8]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	3b1b      	subs	r3, #27
 8002e04:	fa00 f203 	lsl.w	r2, r0, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	619a      	str	r2, [r3, #24]
 8002e10:	e01b      	b.n	8002e4a <HAL_ADCEx_InjectedConfigChannel+0x4d6>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6959      	ldr	r1, [r3, #20]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	2207      	movs	r2, #7
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	4019      	ands	r1, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6898      	ldr	r0, [r3, #8]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_ADCEx_InjectedConfigChannel+0x568>)
 8002e4c:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d105      	bne.n	8002e62 <HAL_ADCEx_InjectedConfigChannel+0x4ee>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d013      	beq.n	8002e8a <HAL_ADCEx_InjectedConfigChannel+0x516>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e66:	2b11      	cmp	r3, #17
 8002e68:	d105      	bne.n	8002e76 <HAL_ADCEx_InjectedConfigChannel+0x502>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_ADCEx_InjectedConfigChannel+0x516>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e7a:	2b12      	cmp	r3, #18
 8002e7c:	d17b      	bne.n	8002f76 <HAL_ADCEx_InjectedConfigChannel+0x602>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d175      	bne.n	8002f76 <HAL_ADCEx_InjectedConfigChannel+0x602>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d108      	bne.n	8002eae <HAL_ADCEx_InjectedConfigChannel+0x53a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_ADCEx_InjectedConfigChannel+0x53a>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_ADCEx_InjectedConfigChannel+0x53c>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d155      	bne.n	8002f60 <HAL_ADCEx_InjectedConfigChannel+0x5ec>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002eb4:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d015      	beq.n	8002ee6 <HAL_ADCEx_InjectedConfigChannel+0x572>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d106      	bne.n	8002ee0 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e005      	b.n	8002ee2 <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8002ed6:	bf00      	nop
 8002ed8:	83fff000 	.word	0x83fff000
 8002edc:	50000300 	.word	0x50000300
 8002ee0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d13c      	bne.n	8002f60 <HAL_ADCEx_InjectedConfigChannel+0x5ec>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b10      	cmp	r3, #16
 8002eec:	d11d      	bne.n	8002f2a <HAL_ADCEx_InjectedConfigChannel+0x5b6>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ef6:	d118      	bne.n	8002f2a <HAL_ADCEx_InjectedConfigChannel+0x5b6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f02:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f04:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_ADCEx_InjectedConfigChannel+0x61c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <HAL_ADCEx_InjectedConfigChannel+0x620>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9a      	lsrs	r2, r3, #18
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002f1a:	e002      	b.n	8002f22 <HAL_ADCEx_InjectedConfigChannel+0x5ae>
          {
            wait_loop_index--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f9      	bne.n	8002f1c <HAL_ADCEx_InjectedConfigChannel+0x5a8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f28:	e024      	b.n	8002f74 <HAL_ADCEx_InjectedConfigChannel+0x600>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b11      	cmp	r3, #17
 8002f30:	d10b      	bne.n	8002f4a <HAL_ADCEx_InjectedConfigChannel+0x5d6>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f3a:	d106      	bne.n	8002f4a <HAL_ADCEx_InjectedConfigChannel+0x5d6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f46:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f48:	e014      	b.n	8002f74 <HAL_ADCEx_InjectedConfigChannel+0x600>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b12      	cmp	r3, #18
 8002f50:	d110      	bne.n	8002f74 <HAL_ADCEx_InjectedConfigChannel+0x600>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f5c:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f5e:	e009      	b.n	8002f74 <HAL_ADCEx_InjectedConfigChannel+0x600>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002f72:	e000      	b.n	8002f76 <HAL_ADCEx_InjectedConfigChannel+0x602>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f74:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3774      	adds	r7, #116	; 0x74
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000
 8002f94:	431bde83 	.word	0x431bde83

08002f98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d126      	bne.n	8003000 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d115      	bne.n	8002ff8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d111      	bne.n	8002ff8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7fe fd67 	bl	8001acc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002ffe:	e004      	b.n	800300a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7fe fd5d 	bl	8001ae0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f7fe fd57 	bl	8001b08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d108      	bne.n	8003090 <ADC_Enable+0x2c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <ADC_Enable+0x2c>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <ADC_Enable+0x2e>
 8003090:	2300      	movs	r3, #0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d143      	bne.n	800311e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	4b22      	ldr	r3, [pc, #136]	; (8003128 <ADC_Enable+0xc4>)
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00d      	beq.n	80030c0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f043 0210 	orr.w	r2, r3, #16
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e02f      	b.n	8003120 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80030d0:	f7fe fcf0 	bl	8001ab4 <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030d6:	e01b      	b.n	8003110 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030d8:	f7fe fcec 	bl	8001ab4 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d914      	bls.n	8003110 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d00d      	beq.n	8003110 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f043 0210 	orr.w	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	f043 0201 	orr.w	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e007      	b.n	8003120 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d1dc      	bne.n	80030d8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	8000003f 	.word	0x8000003f

0800312c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d108      	bne.n	8003158 <ADC_Disable+0x2c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <ADC_Disable+0x2c>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <ADC_Disable+0x2e>
 8003158:	2300      	movs	r3, #0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d047      	beq.n	80031ee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030d 	and.w	r3, r3, #13
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10f      	bne.n	800318c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0202 	orr.w	r2, r2, #2
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2203      	movs	r2, #3
 8003182:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003184:	f7fe fc96 	bl	8001ab4 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800318a:	e029      	b.n	80031e0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f043 0210 	orr.w	r2, r3, #16
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e023      	b.n	80031f0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031a8:	f7fe fc84 	bl	8001ab4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d914      	bls.n	80031e0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10d      	bne.n	80031e0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f043 0210 	orr.w	r2, r3, #16
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e007      	b.n	80031f0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d0dc      	beq.n	80031a8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <__NVIC_SetPriorityGrouping+0x44>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003214:	4013      	ands	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322a:	4a04      	ldr	r2, [pc, #16]	; (800323c <__NVIC_SetPriorityGrouping+0x44>)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	60d3      	str	r3, [r2, #12]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <__NVIC_GetPriorityGrouping+0x18>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	f003 0307 	and.w	r3, r3, #7
}
 800324e:	4618      	mov	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	2b00      	cmp	r3, #0
 800326c:	db0b      	blt.n	8003286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	f003 021f 	and.w	r2, r3, #31
 8003274:	4907      	ldr	r1, [pc, #28]	; (8003294 <__NVIC_EnableIRQ+0x38>)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	2001      	movs	r0, #1
 800327e:	fa00 f202 	lsl.w	r2, r0, r2
 8003282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	e000e100 	.word	0xe000e100

08003298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	6039      	str	r1, [r7, #0]
 80032a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	db0a      	blt.n	80032c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	490c      	ldr	r1, [pc, #48]	; (80032e4 <__NVIC_SetPriority+0x4c>)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	0112      	lsls	r2, r2, #4
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	440b      	add	r3, r1
 80032bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c0:	e00a      	b.n	80032d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4908      	ldr	r1, [pc, #32]	; (80032e8 <__NVIC_SetPriority+0x50>)
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	3b04      	subs	r3, #4
 80032d0:	0112      	lsls	r2, r2, #4
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	440b      	add	r3, r1
 80032d6:	761a      	strb	r2, [r3, #24]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000e100 	.word	0xe000e100
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f1c3 0307 	rsb	r3, r3, #7
 8003306:	2b04      	cmp	r3, #4
 8003308:	bf28      	it	cs
 800330a:	2304      	movcs	r3, #4
 800330c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3304      	adds	r3, #4
 8003312:	2b06      	cmp	r3, #6
 8003314:	d902      	bls.n	800331c <NVIC_EncodePriority+0x30>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3b03      	subs	r3, #3
 800331a:	e000      	b.n	800331e <NVIC_EncodePriority+0x32>
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003320:	f04f 32ff 	mov.w	r2, #4294967295
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	401a      	ands	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003334:	f04f 31ff 	mov.w	r1, #4294967295
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	43d9      	mvns	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	4313      	orrs	r3, r2
         );
}
 8003346:	4618      	mov	r0, r3
 8003348:	3724      	adds	r7, #36	; 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3b01      	subs	r3, #1
 8003360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003364:	d301      	bcc.n	800336a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003366:	2301      	movs	r3, #1
 8003368:	e00f      	b.n	800338a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800336a:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <SysTick_Config+0x40>)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3b01      	subs	r3, #1
 8003370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003372:	210f      	movs	r1, #15
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	f7ff ff8e 	bl	8003298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <SysTick_Config+0x40>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003382:	4b04      	ldr	r3, [pc, #16]	; (8003394 <SysTick_Config+0x40>)
 8003384:	2207      	movs	r2, #7
 8003386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	e000e010 	.word	0xe000e010

08003398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ff29 	bl	80031f8 <__NVIC_SetPriorityGrouping>
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b086      	sub	sp, #24
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	4603      	mov	r3, r0
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033c0:	f7ff ff3e 	bl	8003240 <__NVIC_GetPriorityGrouping>
 80033c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	6978      	ldr	r0, [r7, #20]
 80033cc:	f7ff ff8e 	bl	80032ec <NVIC_EncodePriority>
 80033d0:	4602      	mov	r2, r0
 80033d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff5d 	bl	8003298 <__NVIC_SetPriority>
}
 80033de:	bf00      	nop
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	4603      	mov	r3, r0
 80033ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff31 	bl	800325c <__NVIC_EnableIRQ>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff ffa2 	bl	8003354 <SysTick_Config>
 8003410:	4603      	mov	r3, r0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e037      	b.n	80034a0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003446:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800344a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f940 	bl	8003708 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}  
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_DMA_Start_IT+0x20>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e04a      	b.n	800355e <HAL_DMA_Start_IT+0xb6>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d13a      	bne.n	8003550 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2202      	movs	r2, #2
 80034de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f8d4 	bl	80036ac <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 020e 	orr.w	r2, r2, #14
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e00f      	b.n	800353e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 020a 	orr.w	r2, r2, #10
 800352c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0204 	bic.w	r2, r2, #4
 800353c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e005      	b.n	800355c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003558:	2302      	movs	r3, #2
 800355a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800355c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2204      	movs	r2, #4
 8003584:	409a      	lsls	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d024      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x72>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01f      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d107      	bne.n	80035b6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0204 	bic.w	r2, r2, #4
 80035b4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	2104      	movs	r1, #4
 80035c0:	fa01 f202 	lsl.w	r2, r1, r2
 80035c4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d06a      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80035d6:	e065      	b.n	80036a4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	2202      	movs	r2, #2
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02c      	beq.n	8003642 <HAL_DMA_IRQHandler+0xdc>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d027      	beq.n	8003642 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 020a 	bic.w	r2, r2, #10
 800360e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	2102      	movs	r1, #2
 8003622:	fa01 f202 	lsl.w	r2, r1, r2
 8003626:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d035      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003640:	e030      	b.n	80036a4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2208      	movs	r2, #8
 8003648:	409a      	lsls	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d028      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x13e>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d023      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 020e 	bic.w	r2, r2, #14
 800366a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	2101      	movs	r1, #1
 8003676:	fa01 f202 	lsl.w	r2, r1, r2
 800367a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
    }
  }
}  
 80036a2:	e7ff      	b.n	80036a4 <HAL_DMA_IRQHandler+0x13e>
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f202 	lsl.w	r2, r1, r2
 80036c8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d108      	bne.n	80036ec <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036ea:	e007      	b.n	80036fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	60da      	str	r2, [r3, #12]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <DMA_CalcBaseAndBitshift+0x34>)
 8003718:	4413      	add	r3, r2
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <DMA_CalcBaseAndBitshift+0x38>)
 800371c:	fba2 2303 	umull	r2, r3, r2, r3
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	009a      	lsls	r2, r3, #2
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a06      	ldr	r2, [pc, #24]	; (8003744 <DMA_CalcBaseAndBitshift+0x3c>)
 800372c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	bffdfff8 	.word	0xbffdfff8
 8003740:	cccccccd 	.word	0xcccccccd
 8003744:	40020000 	.word	0x40020000

08003748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003756:	e14e      	b.n	80039f6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	4013      	ands	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8140 	beq.w	80039f0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d005      	beq.n	8003788 <HAL_GPIO_Init+0x40>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d130      	bne.n	80037ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037be:	2201      	movs	r2, #1
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	f003 0201 	and.w	r2, r3, #1
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d017      	beq.n	8003826 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	2203      	movs	r2, #3
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4013      	ands	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d123      	bne.n	800387a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	08da      	lsrs	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3208      	adds	r2, #8
 800383a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	220f      	movs	r2, #15
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	08da      	lsrs	r2, r3, #3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3208      	adds	r2, #8
 8003874:	6939      	ldr	r1, [r7, #16]
 8003876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	2203      	movs	r2, #3
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0203 	and.w	r2, r3, #3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 809a 	beq.w	80039f0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038bc:	4b55      	ldr	r3, [pc, #340]	; (8003a14 <HAL_GPIO_Init+0x2cc>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	4a54      	ldr	r2, [pc, #336]	; (8003a14 <HAL_GPIO_Init+0x2cc>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6193      	str	r3, [r2, #24]
 80038c8:	4b52      	ldr	r3, [pc, #328]	; (8003a14 <HAL_GPIO_Init+0x2cc>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038d4:	4a50      	ldr	r2, [pc, #320]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	3302      	adds	r3, #2
 80038dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	220f      	movs	r2, #15
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038fe:	d013      	beq.n	8003928 <HAL_GPIO_Init+0x1e0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a46      	ldr	r2, [pc, #280]	; (8003a1c <HAL_GPIO_Init+0x2d4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00d      	beq.n	8003924 <HAL_GPIO_Init+0x1dc>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a45      	ldr	r2, [pc, #276]	; (8003a20 <HAL_GPIO_Init+0x2d8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <HAL_GPIO_Init+0x1d8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a44      	ldr	r2, [pc, #272]	; (8003a24 <HAL_GPIO_Init+0x2dc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_GPIO_Init+0x1d4>
 8003918:	2303      	movs	r3, #3
 800391a:	e006      	b.n	800392a <HAL_GPIO_Init+0x1e2>
 800391c:	2305      	movs	r3, #5
 800391e:	e004      	b.n	800392a <HAL_GPIO_Init+0x1e2>
 8003920:	2302      	movs	r3, #2
 8003922:	e002      	b.n	800392a <HAL_GPIO_Init+0x1e2>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_GPIO_Init+0x1e2>
 8003928:	2300      	movs	r3, #0
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	f002 0203 	and.w	r2, r2, #3
 8003930:	0092      	lsls	r2, r2, #2
 8003932:	4093      	lsls	r3, r2
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800393a:	4937      	ldr	r1, [pc, #220]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003948:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <HAL_GPIO_Init+0x2e0>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800396c:	4a2e      	ldr	r2, [pc, #184]	; (8003a28 <HAL_GPIO_Init+0x2e0>)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003972:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <HAL_GPIO_Init+0x2e0>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003996:	4a24      	ldr	r2, [pc, #144]	; (8003a28 <HAL_GPIO_Init+0x2e0>)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800399c:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_GPIO_Init+0x2e0>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039c0:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <HAL_GPIO_Init+0x2e0>)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c6:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <HAL_GPIO_Init+0x2e0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039ea:	4a0f      	ldr	r2, [pc, #60]	; (8003a28 <HAL_GPIO_Init+0x2e0>)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	3301      	adds	r3, #1
 80039f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f47f aea9 	bne.w	8003758 <HAL_GPIO_Init+0x10>
  }
}
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	48000400 	.word	0x48000400
 8003a20:	48000800 	.word	0x48000800
 8003a24:	48000c00 	.word	0x48000c00
 8003a28:	40010400 	.word	0x40010400

08003a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	887b      	ldrh	r3, [r7, #2]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
 8003a48:	e001      	b.n	8003a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a6c:	787b      	ldrb	r3, [r7, #1]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a78:	e002      	b.n	8003a80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	041a      	lsls	r2, r3, #16
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	43d9      	mvns	r1, r3
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	400b      	ands	r3, r1
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	619a      	str	r2, [r3, #24]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003acc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ad0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f001 b823 	b.w	8004b2c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 817d 	beq.w	8003df6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003afc:	4bbc      	ldr	r3, [pc, #752]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d00c      	beq.n	8003b22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b08:	4bb9      	ldr	r3, [pc, #740]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d15c      	bne.n	8003bce <HAL_RCC_OscConfig+0x10e>
 8003b14:	4bb6      	ldr	r3, [pc, #728]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b20:	d155      	bne.n	8003bce <HAL_RCC_OscConfig+0x10e>
 8003b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCC_OscConfig+0x94>
 8003b4e:	4ba8      	ldr	r3, [pc, #672]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	e015      	b.n	8003b80 <HAL_RCC_OscConfig+0xc0>
 8003b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b58:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b6c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b70:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003b7c:	4b9c      	ldr	r3, [pc, #624]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b84:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003b88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b8c:	fa92 f2a2 	rbit	r2, r2
 8003b90:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003b94:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003b98:	fab2 f282 	clz	r2, r2
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f042 0220 	orr.w	r2, r2, #32
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	f002 021f 	and.w	r2, r2, #31
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 811f 	beq.w	8003df4 <HAL_RCC_OscConfig+0x334>
 8003bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 8116 	bne.w	8003df4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f000 bfaf 	b.w	8004b2c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d106      	bne.n	8003bee <HAL_RCC_OscConfig+0x12e>
 8003be0:	4b83      	ldr	r3, [pc, #524]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a82      	ldr	r2, [pc, #520]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e036      	b.n	8003c5c <HAL_RCC_OscConfig+0x19c>
 8003bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x158>
 8003bfe:	4b7c      	ldr	r3, [pc, #496]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a7b      	ldr	r2, [pc, #492]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4b79      	ldr	r3, [pc, #484]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a78      	ldr	r2, [pc, #480]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e021      	b.n	8003c5c <HAL_RCC_OscConfig+0x19c>
 8003c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x184>
 8003c2a:	4b71      	ldr	r3, [pc, #452]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a70      	ldr	r2, [pc, #448]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b6e      	ldr	r3, [pc, #440]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6d      	ldr	r2, [pc, #436]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e00b      	b.n	8003c5c <HAL_RCC_OscConfig+0x19c>
 8003c44:	4b6a      	ldr	r3, [pc, #424]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a69      	ldr	r2, [pc, #420]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4b67      	ldr	r3, [pc, #412]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a66      	ldr	r2, [pc, #408]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c5c:	4b64      	ldr	r3, [pc, #400]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	f023 020f 	bic.w	r2, r3, #15
 8003c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	495f      	ldr	r1, [pc, #380]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d059      	beq.n	8003d3a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c86:	f7fd ff15 	bl	8001ab4 <HAL_GetTick>
 8003c8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fd ff10 	bl	8001ab4 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b64      	cmp	r3, #100	; 0x64
 8003c9e:	d902      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	f000 bf43 	b.w	8004b2c <HAL_RCC_OscConfig+0x106c>
 8003ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003caa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003cba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d102      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x218>
 8003cd2:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	e015      	b.n	8003d04 <HAL_RCC_OscConfig+0x244>
 8003cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cdc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cf0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003cf4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003cf8:	fa93 f3a3 	rbit	r3, r3
 8003cfc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003d00:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d08:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003d0c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003d10:	fa92 f2a2 	rbit	r2, r2
 8003d14:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003d18:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003d1c:	fab2 f282 	clz	r2, r2
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	f042 0220 	orr.w	r2, r2, #32
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	f002 021f 	and.w	r2, r2, #31
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ab      	beq.n	8003c90 <HAL_RCC_OscConfig+0x1d0>
 8003d38:	e05d      	b.n	8003df6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fd febb 	bl	8001ab4 <HAL_GetTick>
 8003d3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fd feb6 	bl	8001ab4 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b64      	cmp	r3, #100	; 0x64
 8003d52:	d902      	bls.n	8003d5a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	f000 bee9 	b.w	8004b2c <HAL_RCC_OscConfig+0x106c>
 8003d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d5e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003d6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_RCC_OscConfig+0x2cc>
 8003d86:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	e015      	b.n	8003db8 <HAL_RCC_OscConfig+0x2f8>
 8003d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d90:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d98:	fa93 f3a3 	rbit	r3, r3
 8003d9c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003da4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003da8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003dac:	fa93 f3a3 	rbit	r3, r3
 8003db0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003db4:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <HAL_RCC_OscConfig+0x330>)
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dbc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003dc0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003dc4:	fa92 f2a2 	rbit	r2, r2
 8003dc8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003dcc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003dd0:	fab2 f282 	clz	r2, r2
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	f042 0220 	orr.w	r2, r2, #32
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	f002 021f 	and.w	r2, r2, #31
 8003de0:	2101      	movs	r1, #1
 8003de2:	fa01 f202 	lsl.w	r2, r1, r2
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ab      	bne.n	8003d44 <HAL_RCC_OscConfig+0x284>
 8003dec:	e003      	b.n	8003df6 <HAL_RCC_OscConfig+0x336>
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 817d 	beq.w	8004106 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e0c:	4ba6      	ldr	r3, [pc, #664]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00b      	beq.n	8003e30 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e18:	4ba3      	ldr	r3, [pc, #652]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d172      	bne.n	8003f0a <HAL_RCC_OscConfig+0x44a>
 8003e24:	4ba0      	ldr	r3, [pc, #640]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d16c      	bne.n	8003f0a <HAL_RCC_OscConfig+0x44a>
 8003e30:	2302      	movs	r3, #2
 8003e32:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003e42:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d102      	bne.n	8003e60 <HAL_RCC_OscConfig+0x3a0>
 8003e5a:	4b93      	ldr	r3, [pc, #588]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	e013      	b.n	8003e88 <HAL_RCC_OscConfig+0x3c8>
 8003e60:	2302      	movs	r3, #2
 8003e62:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e66:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003e72:	2302      	movs	r3, #2
 8003e74:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003e78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e7c:	fa93 f3a3 	rbit	r3, r3
 8003e80:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003e84:	4b88      	ldr	r3, [pc, #544]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	2202      	movs	r2, #2
 8003e8a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003e8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e92:	fa92 f2a2 	rbit	r2, r2
 8003e96:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003e9a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003e9e:	fab2 f282 	clz	r2, r2
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	f042 0220 	orr.w	r2, r2, #32
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	f002 021f 	and.w	r2, r2, #31
 8003eae:	2101      	movs	r1, #1
 8003eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x410>
 8003eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d002      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f000 be2e 	b.w	8004b2c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed0:	4b75      	ldr	r3, [pc, #468]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	21f8      	movs	r1, #248	; 0xf8
 8003ee6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003eee:	fa91 f1a1 	rbit	r1, r1
 8003ef2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003ef6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003efa:	fab1 f181 	clz	r1, r1
 8003efe:	b2c9      	uxtb	r1, r1
 8003f00:	408b      	lsls	r3, r1
 8003f02:	4969      	ldr	r1, [pc, #420]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f08:	e0fd      	b.n	8004106 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8088 	beq.w	800402c <HAL_RCC_OscConfig+0x56c>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003f2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f32:	fab3 f383 	clz	r3, r3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	461a      	mov	r2, r3
 8003f44:	2301      	movs	r3, #1
 8003f46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fd fdb4 	bl	8001ab4 <HAL_GetTick>
 8003f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f52:	f7fd fdaf 	bl	8001ab4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d902      	bls.n	8003f68 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	f000 bde2 	b.w	8004b2c <HAL_RCC_OscConfig+0x106c>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003f72:	fa93 f3a3 	rbit	r3, r3
 8003f76:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003f7a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7e:	fab3 f383 	clz	r3, r3
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d102      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4d8>
 8003f92:	4b45      	ldr	r3, [pc, #276]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	e013      	b.n	8003fc0 <HAL_RCC_OscConfig+0x500>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003faa:	2302      	movs	r3, #2
 8003fac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003fb0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003fb4:	fa93 f3a3 	rbit	r3, r3
 8003fb8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003fbc:	4b3a      	ldr	r3, [pc, #232]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003fc6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003fca:	fa92 f2a2 	rbit	r2, r2
 8003fce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003fd2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003fd6:	fab2 f282 	clz	r2, r2
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	f042 0220 	orr.w	r2, r2, #32
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	f002 021f 	and.w	r2, r2, #31
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0af      	beq.n	8003f52 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	21f8      	movs	r1, #248	; 0xf8
 8004008:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004010:	fa91 f1a1 	rbit	r1, r1
 8004014:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004018:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800401c:	fab1 f181 	clz	r1, r1
 8004020:	b2c9      	uxtb	r1, r1
 8004022:	408b      	lsls	r3, r1
 8004024:	4920      	ldr	r1, [pc, #128]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]
 800402a:	e06c      	b.n	8004106 <HAL_RCC_OscConfig+0x646>
 800402c:	2301      	movs	r3, #1
 800402e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004036:	fa93 f3a3 	rbit	r3, r3
 800403a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800403e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800404c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	461a      	mov	r2, r3
 8004054:	2300      	movs	r3, #0
 8004056:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fd fd2c 	bl	8001ab4 <HAL_GetTick>
 800405c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004062:	f7fd fd27 	bl	8001ab4 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d902      	bls.n	8004078 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	f000 bd5a 	b.w	8004b2c <HAL_RCC_OscConfig+0x106c>
 8004078:	2302      	movs	r3, #2
 800407a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800408a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	fab3 f383 	clz	r3, r3
 8004092:	b2db      	uxtb	r3, r3
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d104      	bne.n	80040ac <HAL_RCC_OscConfig+0x5ec>
 80040a2:	4b01      	ldr	r3, [pc, #4]	; (80040a8 <HAL_RCC_OscConfig+0x5e8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	e015      	b.n	80040d4 <HAL_RCC_OscConfig+0x614>
 80040a8:	40021000 	.word	0x40021000
 80040ac:	2302      	movs	r3, #2
 80040ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80040be:	2302      	movs	r3, #2
 80040c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80040c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80040d0:	4bc8      	ldr	r3, [pc, #800]	; (80043f4 <HAL_RCC_OscConfig+0x934>)
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	2202      	movs	r2, #2
 80040d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80040da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80040de:	fa92 f2a2 	rbit	r2, r2
 80040e2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80040e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80040ea:	fab2 f282 	clz	r2, r2
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	f042 0220 	orr.w	r2, r2, #32
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	f002 021f 	and.w	r2, r2, #31
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1ad      	bne.n	8004062 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8110 	beq.w	800433c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800411c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004120:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d079      	beq.n	8004220 <HAL_RCC_OscConfig+0x760>
 800412c:	2301      	movs	r3, #1
 800412e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004136:	fa93 f3a3 	rbit	r3, r3
 800413a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800413e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	4bab      	ldr	r3, [pc, #684]	; (80043f8 <HAL_RCC_OscConfig+0x938>)
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	461a      	mov	r2, r3
 8004152:	2301      	movs	r3, #1
 8004154:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004156:	f7fd fcad 	bl	8001ab4 <HAL_GetTick>
 800415a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004160:	f7fd fca8 	bl	8001ab4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d902      	bls.n	8004176 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	f000 bcdb 	b.w	8004b2c <HAL_RCC_OscConfig+0x106c>
 8004176:	2302      	movs	r3, #2
 8004178:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004190:	2202      	movs	r2, #2
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004198:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	fa93 f2a3 	rbit	r2, r3
 80041a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041b4:	2202      	movs	r2, #2
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	fa93 f2a3 	rbit	r2, r3
 80041c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80041ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d0:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <HAL_RCC_OscConfig+0x934>)
 80041d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80041dc:	2102      	movs	r1, #2
 80041de:	6019      	str	r1, [r3, #0]
 80041e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	fa93 f1a3 	rbit	r1, r3
 80041ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80041f6:	6019      	str	r1, [r3, #0]
  return result;
 80041f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2101      	movs	r1, #1
 8004214:	fa01 f303 	lsl.w	r3, r1, r3
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0a0      	beq.n	8004160 <HAL_RCC_OscConfig+0x6a0>
 800421e:	e08d      	b.n	800433c <HAL_RCC_OscConfig+0x87c>
 8004220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004224:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004230:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	fa93 f2a3 	rbit	r2, r3
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004242:	601a      	str	r2, [r3, #0]
  return result;
 8004244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004248:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800424c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	4b68      	ldr	r3, [pc, #416]	; (80043f8 <HAL_RCC_OscConfig+0x938>)
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	461a      	mov	r2, r3
 800425e:	2300      	movs	r3, #0
 8004260:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004262:	f7fd fc27 	bl	8001ab4 <HAL_GetTick>
 8004266:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800426a:	e00a      	b.n	8004282 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800426c:	f7fd fc22 	bl	8001ab4 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d902      	bls.n	8004282 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	f000 bc55 	b.w	8004b2c <HAL_RCC_OscConfig+0x106c>
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800428a:	2202      	movs	r2, #2
 800428c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004292:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	fa93 f2a3 	rbit	r2, r3
 800429c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042ae:	2202      	movs	r2, #2
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	fa93 f2a3 	rbit	r2, r3
 80042c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042d2:	2202      	movs	r2, #2
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	fa93 f2a3 	rbit	r2, r3
 80042e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80042ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ee:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <HAL_RCC_OscConfig+0x934>)
 80042f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80042fa:	2102      	movs	r1, #2
 80042fc:	6019      	str	r1, [r3, #0]
 80042fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004302:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	fa93 f1a3 	rbit	r1, r3
 800430c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004310:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004314:	6019      	str	r1, [r3, #0]
  return result;
 8004316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	fab3 f383 	clz	r3, r3
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	2101      	movs	r1, #1
 8004332:	fa01 f303 	lsl.w	r3, r1, r3
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d197      	bne.n	800426c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 81a1 	beq.w	8004694 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004352:	2300      	movs	r3, #0
 8004354:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004358:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_RCC_OscConfig+0x934>)
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d116      	bne.n	8004392 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004364:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <HAL_RCC_OscConfig+0x934>)
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	4a22      	ldr	r2, [pc, #136]	; (80043f4 <HAL_RCC_OscConfig+0x934>)
 800436a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436e:	61d3      	str	r3, [r2, #28]
 8004370:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <HAL_RCC_OscConfig+0x934>)
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004386:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800438a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004392:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <HAL_RCC_OscConfig+0x93c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d11a      	bne.n	80043d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800439e:	4b17      	ldr	r3, [pc, #92]	; (80043fc <HAL_RCC_OscConfig+0x93c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a16      	ldr	r2, [pc, #88]	; (80043fc <HAL_RCC_OscConfig+0x93c>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043aa:	f7fd fb83 	bl	8001ab4 <HAL_GetTick>
 80043ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b2:	e009      	b.n	80043c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b4:	f7fd fb7e 	bl	8001ab4 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b64      	cmp	r3, #100	; 0x64
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e3b1      	b.n	8004b2c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <HAL_RCC_OscConfig+0x93c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ef      	beq.n	80043b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d10d      	bne.n	8004400 <HAL_RCC_OscConfig+0x940>
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCC_OscConfig+0x934>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	4a02      	ldr	r2, [pc, #8]	; (80043f4 <HAL_RCC_OscConfig+0x934>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6213      	str	r3, [r2, #32]
 80043f0:	e03c      	b.n	800446c <HAL_RCC_OscConfig+0x9ac>
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	10908120 	.word	0x10908120
 80043fc:	40007000 	.word	0x40007000
 8004400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004404:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10c      	bne.n	800442a <HAL_RCC_OscConfig+0x96a>
 8004410:	4bc1      	ldr	r3, [pc, #772]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	4ac0      	ldr	r2, [pc, #768]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	6213      	str	r3, [r2, #32]
 800441c:	4bbe      	ldr	r3, [pc, #760]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	4abd      	ldr	r2, [pc, #756]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 8004422:	f023 0304 	bic.w	r3, r3, #4
 8004426:	6213      	str	r3, [r2, #32]
 8004428:	e020      	b.n	800446c <HAL_RCC_OscConfig+0x9ac>
 800442a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2b05      	cmp	r3, #5
 8004438:	d10c      	bne.n	8004454 <HAL_RCC_OscConfig+0x994>
 800443a:	4bb7      	ldr	r3, [pc, #732]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	4ab6      	ldr	r2, [pc, #728]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 8004440:	f043 0304 	orr.w	r3, r3, #4
 8004444:	6213      	str	r3, [r2, #32]
 8004446:	4bb4      	ldr	r3, [pc, #720]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	4ab3      	ldr	r2, [pc, #716]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	6213      	str	r3, [r2, #32]
 8004452:	e00b      	b.n	800446c <HAL_RCC_OscConfig+0x9ac>
 8004454:	4bb0      	ldr	r3, [pc, #704]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	4aaf      	ldr	r2, [pc, #700]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	6213      	str	r3, [r2, #32]
 8004460:	4bad      	ldr	r3, [pc, #692]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	4aac      	ldr	r2, [pc, #688]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 8004466:	f023 0304 	bic.w	r3, r3, #4
 800446a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800446c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004470:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8081 	beq.w	8004580 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447e:	f7fd fb19 	bl	8001ab4 <HAL_GetTick>
 8004482:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	e00b      	b.n	80044a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004488:	f7fd fb14 	bl	8001ab4 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f241 3288 	movw	r2, #5000	; 0x1388
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e345      	b.n	8004b2c <HAL_RCC_OscConfig+0x106c>
 80044a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80044a8:	2202      	movs	r2, #2
 80044aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	fa93 f2a3 	rbit	r2, r3
 80044ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80044cc:	2202      	movs	r2, #2
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	fa93 f2a3 	rbit	r2, r3
 80044de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80044e6:	601a      	str	r2, [r3, #0]
  return result;
 80044e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80044f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	fab3 f383 	clz	r3, r3
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f043 0302 	orr.w	r3, r3, #2
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d102      	bne.n	800450c <HAL_RCC_OscConfig+0xa4c>
 8004506:	4b84      	ldr	r3, [pc, #528]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	e013      	b.n	8004534 <HAL_RCC_OscConfig+0xa74>
 800450c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004510:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004514:	2202      	movs	r2, #2
 8004516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800451c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	fa93 f2a3 	rbit	r2, r3
 8004526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	4b79      	ldr	r3, [pc, #484]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004538:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800453c:	2102      	movs	r1, #2
 800453e:	6011      	str	r1, [r2, #0]
 8004540:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004544:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	fa92 f1a2 	rbit	r1, r2
 800454e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004552:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004556:	6011      	str	r1, [r2, #0]
  return result;
 8004558:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800455c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	fab2 f282 	clz	r2, r2
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	f002 021f 	and.w	r2, r2, #31
 8004572:	2101      	movs	r1, #1
 8004574:	fa01 f202 	lsl.w	r2, r1, r2
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d084      	beq.n	8004488 <HAL_RCC_OscConfig+0x9c8>
 800457e:	e07f      	b.n	8004680 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004580:	f7fd fa98 	bl	8001ab4 <HAL_GetTick>
 8004584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004588:	e00b      	b.n	80045a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fd fa93 	bl	8001ab4 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	; 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e2c4      	b.n	8004b2c <HAL_RCC_OscConfig+0x106c>
 80045a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80045aa:	2202      	movs	r2, #2
 80045ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	fa93 f2a3 	rbit	r2, r3
 80045bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80045ce:	2202      	movs	r2, #2
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	fa93 f2a3 	rbit	r2, r3
 80045e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80045e8:	601a      	str	r2, [r3, #0]
  return result;
 80045ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80045f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f4:	fab3 f383 	clz	r3, r3
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f043 0302 	orr.w	r3, r3, #2
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d102      	bne.n	800460e <HAL_RCC_OscConfig+0xb4e>
 8004608:	4b43      	ldr	r3, [pc, #268]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	e013      	b.n	8004636 <HAL_RCC_OscConfig+0xb76>
 800460e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004612:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004616:	2202      	movs	r2, #2
 8004618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	fa93 f2a3 	rbit	r2, r3
 8004628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	4b39      	ldr	r3, [pc, #228]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800463a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800463e:	2102      	movs	r1, #2
 8004640:	6011      	str	r1, [r2, #0]
 8004642:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004646:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	fa92 f1a2 	rbit	r1, r2
 8004650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004654:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004658:	6011      	str	r1, [r2, #0]
  return result;
 800465a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800465e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	fab2 f282 	clz	r2, r2
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	f002 021f 	and.w	r2, r2, #31
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f202 	lsl.w	r2, r1, r2
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d184      	bne.n	800458a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004680:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004688:	4b23      	ldr	r3, [pc, #140]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	4a22      	ldr	r2, [pc, #136]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004692:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004698:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8242 	beq.w	8004b2a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_RCC_OscConfig+0xc58>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	f000 8213 	beq.w	8004ada <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	f040 8162 	bne.w	800498a <HAL_RCC_OscConfig+0xeca>
 80046c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80046ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	fa93 f2a3 	rbit	r2, r3
 80046e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80046ea:	601a      	str	r2, [r3, #0]
  return result;
 80046ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80046f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004700:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	461a      	mov	r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fd f9d2 	bl	8001ab4 <HAL_GetTick>
 8004710:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004714:	e00c      	b.n	8004730 <HAL_RCC_OscConfig+0xc70>
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800471c:	f7fd f9ca 	bl	8001ab4 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e1fd      	b.n	8004b2c <HAL_RCC_OscConfig+0x106c>
 8004730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004734:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800473c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004742:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	fa93 f2a3 	rbit	r2, r3
 800474c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004750:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004754:	601a      	str	r2, [r3, #0]
  return result;
 8004756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800475e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004760:	fab3 f383 	clz	r3, r3
 8004764:	b2db      	uxtb	r3, r3
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d102      	bne.n	800477a <HAL_RCC_OscConfig+0xcba>
 8004774:	4bb0      	ldr	r3, [pc, #704]	; (8004a38 <HAL_RCC_OscConfig+0xf78>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	e027      	b.n	80047ca <HAL_RCC_OscConfig+0xd0a>
 800477a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	fa93 f2a3 	rbit	r2, r3
 8004796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80047a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	fa93 f2a3 	rbit	r2, r3
 80047bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	4b9c      	ldr	r3, [pc, #624]	; (8004a38 <HAL_RCC_OscConfig+0xf78>)
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047ce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80047d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047d6:	6011      	str	r1, [r2, #0]
 80047d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047dc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	fa92 f1a2 	rbit	r1, r2
 80047e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80047ee:	6011      	str	r1, [r2, #0]
  return result;
 80047f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	fab2 f282 	clz	r2, r2
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	f042 0220 	orr.w	r2, r2, #32
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	f002 021f 	and.w	r2, r2, #31
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f202 	lsl.w	r2, r1, r2
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d182      	bne.n	800471c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004816:	4b88      	ldr	r3, [pc, #544]	; (8004a38 <HAL_RCC_OscConfig+0xf78>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800481e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800482a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	430b      	orrs	r3, r1
 8004838:	497f      	ldr	r1, [pc, #508]	; (8004a38 <HAL_RCC_OscConfig+0xf78>)
 800483a:	4313      	orrs	r3, r2
 800483c:	604b      	str	r3, [r1, #4]
 800483e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004842:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004846:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800484a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004850:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	fa93 f2a3 	rbit	r2, r3
 800485a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004862:	601a      	str	r2, [r3, #0]
  return result;
 8004864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004868:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800486c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486e:	fab3 f383 	clz	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004878:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	461a      	mov	r2, r3
 8004880:	2301      	movs	r3, #1
 8004882:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004884:	f7fd f916 	bl	8001ab4 <HAL_GetTick>
 8004888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800488c:	e009      	b.n	80048a2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488e:	f7fd f911 	bl	8001ab4 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e144      	b.n	8004b2c <HAL_RCC_OscConfig+0x106c>
 80048a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80048aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	fa93 f2a3 	rbit	r2, r3
 80048be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80048c6:	601a      	str	r2, [r3, #0]
  return result;
 80048c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048cc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80048d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d2:	fab3 f383 	clz	r3, r3
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d102      	bne.n	80048ec <HAL_RCC_OscConfig+0xe2c>
 80048e6:	4b54      	ldr	r3, [pc, #336]	; (8004a38 <HAL_RCC_OscConfig+0xf78>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	e027      	b.n	800493c <HAL_RCC_OscConfig+0xe7c>
 80048ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80048f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	fa93 f2a3 	rbit	r2, r3
 8004908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004916:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800491a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004924:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	fa93 f2a3 	rbit	r2, r3
 800492e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004932:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <HAL_RCC_OscConfig+0xf78>)
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004940:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004944:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004948:	6011      	str	r1, [r2, #0]
 800494a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800494e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	fa92 f1a2 	rbit	r1, r2
 8004958:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800495c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004960:	6011      	str	r1, [r2, #0]
  return result;
 8004962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004966:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	fab2 f282 	clz	r2, r2
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	f042 0220 	orr.w	r2, r2, #32
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	f002 021f 	and.w	r2, r2, #31
 800497c:	2101      	movs	r1, #1
 800497e:	fa01 f202 	lsl.w	r2, r1, r2
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d082      	beq.n	800488e <HAL_RCC_OscConfig+0xdce>
 8004988:	e0cf      	b.n	8004b2a <HAL_RCC_OscConfig+0x106a>
 800498a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004992:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	fa93 f2a3 	rbit	r2, r3
 80049a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80049ae:	601a      	str	r2, [r3, #0]
  return result;
 80049b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80049b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	fab3 f383 	clz	r3, r3
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	461a      	mov	r2, r3
 80049cc:	2300      	movs	r3, #0
 80049ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fd f870 	bl	8001ab4 <HAL_GetTick>
 80049d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049d8:	e009      	b.n	80049ee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049da:	f7fd f86b 	bl	8001ab4 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e09e      	b.n	8004b2c <HAL_RCC_OscConfig+0x106c>
 80049ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80049f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a00:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	fa93 f2a3 	rbit	r2, r3
 8004a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004a12:	601a      	str	r2, [r3, #0]
  return result;
 8004a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004a1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a1e:	fab3 f383 	clz	r3, r3
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d104      	bne.n	8004a3c <HAL_RCC_OscConfig+0xf7c>
 8004a32:	4b01      	ldr	r3, [pc, #4]	; (8004a38 <HAL_RCC_OscConfig+0xf78>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	e029      	b.n	8004a8c <HAL_RCC_OscConfig+0xfcc>
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a40:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	fa93 f2a3 	rbit	r2, r3
 8004a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a66:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a74:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	fa93 f2a3 	rbit	r2, r3
 8004a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <HAL_RCC_OscConfig+0x1078>)
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a90:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004a94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a98:	6011      	str	r1, [r2, #0]
 8004a9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a9e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	fa92 f1a2 	rbit	r1, r2
 8004aa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004aac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004ab0:	6011      	str	r1, [r2, #0]
  return result;
 8004ab2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ab6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	fab2 f282 	clz	r2, r2
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	f042 0220 	orr.w	r2, r2, #32
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	f002 021f 	and.w	r2, r2, #31
 8004acc:	2101      	movs	r1, #1
 8004ace:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d180      	bne.n	80049da <HAL_RCC_OscConfig+0xf1a>
 8004ad8:	e027      	b.n	8004b2a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e01e      	b.n	8004b2c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <HAL_RCC_OscConfig+0x1078>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004af6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004afa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d10b      	bne.n	8004b26 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004b0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004b12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d001      	beq.n	8004b2a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40021000 	.word	0x40021000

08004b3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b09e      	sub	sp, #120	; 0x78
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e162      	b.n	8004e1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b54:	4b90      	ldr	r3, [pc, #576]	; (8004d98 <HAL_RCC_ClockConfig+0x25c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d910      	bls.n	8004b84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b8d      	ldr	r3, [pc, #564]	; (8004d98 <HAL_RCC_ClockConfig+0x25c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 0207 	bic.w	r2, r3, #7
 8004b6a:	498b      	ldr	r1, [pc, #556]	; (8004d98 <HAL_RCC_ClockConfig+0x25c>)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b89      	ldr	r3, [pc, #548]	; (8004d98 <HAL_RCC_ClockConfig+0x25c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e14a      	b.n	8004e1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b90:	4b82      	ldr	r3, [pc, #520]	; (8004d9c <HAL_RCC_ClockConfig+0x260>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	497f      	ldr	r1, [pc, #508]	; (8004d9c <HAL_RCC_ClockConfig+0x260>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80dc 	beq.w	8004d68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d13c      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xf6>
 8004bb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bbc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bc0:	fa93 f3a3 	rbit	r3, r3
 8004bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc8:	fab3 f383 	clz	r3, r3
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d102      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xa6>
 8004bdc:	4b6f      	ldr	r3, [pc, #444]	; (8004d9c <HAL_RCC_ClockConfig+0x260>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	e00f      	b.n	8004c02 <HAL_RCC_ClockConfig+0xc6>
 8004be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bea:	fa93 f3a3 	rbit	r3, r3
 8004bee:	667b      	str	r3, [r7, #100]	; 0x64
 8004bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf8:	fa93 f3a3 	rbit	r3, r3
 8004bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bfe:	4b67      	ldr	r3, [pc, #412]	; (8004d9c <HAL_RCC_ClockConfig+0x260>)
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c06:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c0a:	fa92 f2a2 	rbit	r2, r2
 8004c0e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004c10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c12:	fab2 f282 	clz	r2, r2
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	f042 0220 	orr.w	r2, r2, #32
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	f002 021f 	and.w	r2, r2, #31
 8004c22:	2101      	movs	r1, #1
 8004c24:	fa01 f202 	lsl.w	r2, r1, r2
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d17b      	bne.n	8004d26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e0f3      	b.n	8004e1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d13c      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x178>
 8004c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c42:	fa93 f3a3 	rbit	r3, r3
 8004c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	fab3 f383 	clz	r3, r3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	095b      	lsrs	r3, r3, #5
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d102      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x128>
 8004c5e:	4b4f      	ldr	r3, [pc, #316]	; (8004d9c <HAL_RCC_ClockConfig+0x260>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	e00f      	b.n	8004c84 <HAL_RCC_ClockConfig+0x148>
 8004c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	647b      	str	r3, [r7, #68]	; 0x44
 8004c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c76:	643b      	str	r3, [r7, #64]	; 0x40
 8004c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7a:	fa93 f3a3 	rbit	r3, r3
 8004c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c80:	4b46      	ldr	r3, [pc, #280]	; (8004d9c <HAL_RCC_ClockConfig+0x260>)
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c88:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c8c:	fa92 f2a2 	rbit	r2, r2
 8004c90:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c94:	fab2 f282 	clz	r2, r2
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	f042 0220 	orr.w	r2, r2, #32
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	f002 021f 	and.w	r2, r2, #31
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d13a      	bne.n	8004d26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0b2      	b.n	8004e1a <HAL_RCC_ClockConfig+0x2de>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	fa93 f3a3 	rbit	r3, r3
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc2:	fab3 f383 	clz	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d102      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x1a0>
 8004cd6:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_RCC_ClockConfig+0x260>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	e00d      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x1bc>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	fa93 f3a3 	rbit	r3, r3
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce8:	2302      	movs	r3, #2
 8004cea:	623b      	str	r3, [r7, #32]
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	fa93 f3a3 	rbit	r3, r3
 8004cf2:	61fb      	str	r3, [r7, #28]
 8004cf4:	4b29      	ldr	r3, [pc, #164]	; (8004d9c <HAL_RCC_ClockConfig+0x260>)
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	61ba      	str	r2, [r7, #24]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	fa92 f2a2 	rbit	r2, r2
 8004d02:	617a      	str	r2, [r7, #20]
  return result;
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	fab2 f282 	clz	r2, r2
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	f042 0220 	orr.w	r2, r2, #32
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	f002 021f 	and.w	r2, r2, #31
 8004d16:	2101      	movs	r1, #1
 8004d18:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e079      	b.n	8004e1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d26:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <HAL_RCC_ClockConfig+0x260>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f023 0203 	bic.w	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	491a      	ldr	r1, [pc, #104]	; (8004d9c <HAL_RCC_ClockConfig+0x260>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d38:	f7fc febc 	bl	8001ab4 <HAL_GetTick>
 8004d3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d40:	f7fc feb8 	bl	8001ab4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e061      	b.n	8004e1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <HAL_RCC_ClockConfig+0x260>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 020c 	and.w	r2, r3, #12
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d1eb      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_ClockConfig+0x25c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d214      	bcs.n	8004da0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <HAL_RCC_ClockConfig+0x25c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f023 0207 	bic.w	r2, r3, #7
 8004d7e:	4906      	ldr	r1, [pc, #24]	; (8004d98 <HAL_RCC_ClockConfig+0x25c>)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <HAL_RCC_ClockConfig+0x25c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e040      	b.n	8004e1a <HAL_RCC_ClockConfig+0x2de>
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dac:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <HAL_RCC_ClockConfig+0x2e8>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	491a      	ldr	r1, [pc, #104]	; (8004e24 <HAL_RCC_ClockConfig+0x2e8>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <HAL_RCC_ClockConfig+0x2e8>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4912      	ldr	r1, [pc, #72]	; (8004e24 <HAL_RCC_ClockConfig+0x2e8>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004dde:	f000 f829 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 8004de2:	4601      	mov	r1, r0
 8004de4:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <HAL_RCC_ClockConfig+0x2e8>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dec:	22f0      	movs	r2, #240	; 0xf0
 8004dee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	fa92 f2a2 	rbit	r2, r2
 8004df6:	60fa      	str	r2, [r7, #12]
  return result;
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	fab2 f282 	clz	r2, r2
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	40d3      	lsrs	r3, r2
 8004e02:	4a09      	ldr	r2, [pc, #36]	; (8004e28 <HAL_RCC_ClockConfig+0x2ec>)
 8004e04:	5cd3      	ldrb	r3, [r2, r3]
 8004e06:	fa21 f303 	lsr.w	r3, r1, r3
 8004e0a:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <HAL_RCC_ClockConfig+0x2f0>)
 8004e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_RCC_ClockConfig+0x2f4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fc fe0a 	bl	8001a2c <HAL_InitTick>
  
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3778      	adds	r7, #120	; 0x78
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
 8004e28:	08006fd0 	.word	0x08006fd0
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	20000004 	.word	0x20000004

08004e34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b08b      	sub	sp, #44	; 0x2c
 8004e38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	2300      	movs	r3, #0
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004e4e:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d002      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0x30>
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d003      	beq.n	8004e6a <HAL_RCC_GetSysClockFreq+0x36>
 8004e62:	e03c      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e66:	623b      	str	r3, [r7, #32]
      break;
 8004e68:	e03c      	b.n	8004ee4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004e70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004e74:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	fa92 f2a2 	rbit	r2, r2
 8004e7c:	607a      	str	r2, [r7, #4]
  return result;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	fab2 f282 	clz	r2, r2
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	40d3      	lsrs	r3, r2
 8004e88:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e8a:	5cd3      	ldrb	r3, [r2, r3]
 8004e8c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004e8e:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	220f      	movs	r2, #15
 8004e98:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	fa92 f2a2 	rbit	r2, r2
 8004ea0:	60fa      	str	r2, [r7, #12]
  return result;
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	fab2 f282 	clz	r2, r2
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	40d3      	lsrs	r3, r2
 8004eac:	4a14      	ldr	r2, [pc, #80]	; (8004f00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004eae:	5cd3      	ldrb	r3, [r2, r3]
 8004eb0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ebc:	4a0e      	ldr	r2, [pc, #56]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	fb02 f303 	mul.w	r3, r2, r3
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ecc:	e004      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	4a0c      	ldr	r2, [pc, #48]	; (8004f04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ed2:	fb02 f303 	mul.w	r3, r2, r3
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	623b      	str	r3, [r7, #32]
      break;
 8004edc:	e002      	b.n	8004ee4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ede:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ee0:	623b      	str	r3, [r7, #32]
      break;
 8004ee2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	372c      	adds	r7, #44	; 0x2c
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	08006fe8 	.word	0x08006fe8
 8004f00:	08006ff8 	.word	0x08006ff8
 8004f04:	003d0900 	.word	0x003d0900

08004f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000000 	.word	0x20000000

08004f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f26:	f7ff ffef 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f34:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	fa92 f2a2 	rbit	r2, r2
 8004f40:	603a      	str	r2, [r7, #0]
  return result;
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	fab2 f282 	clz	r2, r2
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	40d3      	lsrs	r3, r2
 8004f4c:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f4e:	5cd3      	ldrb	r3, [r2, r3]
 8004f50:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	08006fe0 	.word	0x08006fe0

08004f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f6a:	f7ff ffcd 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f6e:	4601      	mov	r1, r0
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004f78:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004f7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	fa92 f2a2 	rbit	r2, r2
 8004f84:	603a      	str	r2, [r7, #0]
  return result;
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	fab2 f282 	clz	r2, r2
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	40d3      	lsrs	r3, r2
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004f92:	5cd3      	ldrb	r3, [r2, r3]
 8004f94:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	08006fe0 	.word	0x08006fe0

08004fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b092      	sub	sp, #72	; 0x48
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 80d4 	beq.w	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fcc:	4b4e      	ldr	r3, [pc, #312]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10e      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd8:	4b4b      	ldr	r3, [pc, #300]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	4a4a      	ldr	r2, [pc, #296]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	61d3      	str	r3, [r2, #28]
 8004fe4:	4b48      	ldr	r3, [pc, #288]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff6:	4b45      	ldr	r3, [pc, #276]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d118      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005002:	4b42      	ldr	r3, [pc, #264]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a41      	ldr	r2, [pc, #260]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500e:	f7fc fd51 	bl	8001ab4 <HAL_GetTick>
 8005012:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005016:	f7fc fd4d 	bl	8001ab4 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b64      	cmp	r3, #100	; 0x64
 8005022:	d901      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e14b      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	4b38      	ldr	r3, [pc, #224]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005034:	4b34      	ldr	r3, [pc, #208]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800503e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 8084 	beq.w	800514e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005050:	429a      	cmp	r2, r3
 8005052:	d07c      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005054:	4b2c      	ldr	r3, [pc, #176]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800505e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005062:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800506e:	fab3 f383 	clz	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	4b26      	ldr	r3, [pc, #152]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	461a      	mov	r2, r3
 800507e:	2301      	movs	r3, #1
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005086:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	fa93 f3a3 	rbit	r3, r3
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005092:	fab3 f383 	clz	r3, r3
 8005096:	b2db      	uxtb	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	461a      	mov	r2, r3
 80050a2:	2300      	movs	r3, #0
 80050a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d04b      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b6:	f7fc fcfd 	bl	8001ab4 <HAL_GetTick>
 80050ba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fc fcf9 	bl	8001ab4 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e0f5      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80050d4:	2302      	movs	r3, #2
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	fa93 f3a3 	rbit	r3, r3
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
 80050e0:	2302      	movs	r3, #2
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	fa93 f3a3 	rbit	r3, r3
 80050ea:	61fb      	str	r3, [r7, #28]
  return result;
 80050ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f043 0302 	orr.w	r3, r3, #2
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d108      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005102:	4b01      	ldr	r3, [pc, #4]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	e00d      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005108:	40021000 	.word	0x40021000
 800510c:	40007000 	.word	0x40007000
 8005110:	10908100 	.word	0x10908100
 8005114:	2302      	movs	r3, #2
 8005116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	fa93 f3a3 	rbit	r3, r3
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	4b69      	ldr	r3, [pc, #420]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2202      	movs	r2, #2
 8005126:	613a      	str	r2, [r7, #16]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	fa92 f2a2 	rbit	r2, r2
 800512e:	60fa      	str	r2, [r7, #12]
  return result;
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	fab2 f282 	clz	r2, r2
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	f002 021f 	and.w	r2, r2, #31
 8005142:	2101      	movs	r1, #1
 8005144:	fa01 f202 	lsl.w	r2, r1, r2
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0b7      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800514e:	4b5e      	ldr	r3, [pc, #376]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	495b      	ldr	r1, [pc, #364]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800515c:	4313      	orrs	r3, r2
 800515e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005160:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005164:	2b01      	cmp	r3, #1
 8005166:	d105      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005168:	4b57      	ldr	r3, [pc, #348]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	4a56      	ldr	r2, [pc, #344]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800516e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005172:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005180:	4b51      	ldr	r3, [pc, #324]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	f023 0203 	bic.w	r2, r3, #3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	494e      	ldr	r1, [pc, #312]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800518e:	4313      	orrs	r3, r2
 8005190:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800519e:	4b4a      	ldr	r3, [pc, #296]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	f023 0210 	bic.w	r2, r3, #16
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	4947      	ldr	r1, [pc, #284]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80051bc:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	493f      	ldr	r1, [pc, #252]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d008      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051da:	4b3b      	ldr	r3, [pc, #236]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	f023 0220 	bic.w	r2, r3, #32
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	4938      	ldr	r1, [pc, #224]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051f8:	4b33      	ldr	r3, [pc, #204]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	4930      	ldr	r1, [pc, #192]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005206:	4313      	orrs	r3, r2
 8005208:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005216:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	4929      	ldr	r1, [pc, #164]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005224:	4313      	orrs	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005234:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	4921      	ldr	r1, [pc, #132]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005242:	4313      	orrs	r3, r2
 8005244:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005252:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	491a      	ldr	r1, [pc, #104]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005260:	4313      	orrs	r3, r2
 8005262:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005270:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005274:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	4912      	ldr	r1, [pc, #72]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800527e:	4313      	orrs	r3, r2
 8005280:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800528e:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	490b      	ldr	r1, [pc, #44]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800529c:	4313      	orrs	r3, r2
 800529e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80052ac:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	4903      	ldr	r1, [pc, #12]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3748      	adds	r7, #72	; 0x48
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40021000 	.word	0x40021000

080052cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d001      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e03b      	b.n	800535c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a19      	ldr	r2, [pc, #100]	; (8005368 <HAL_TIM_Base_Start_IT+0x9c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_TIM_Base_Start_IT+0x4e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530e:	d004      	beq.n	800531a <HAL_TIM_Base_Start_IT+0x4e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a15      	ldr	r2, [pc, #84]	; (800536c <HAL_TIM_Base_Start_IT+0xa0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d115      	bne.n	8005346 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	4b13      	ldr	r3, [pc, #76]	; (8005370 <HAL_TIM_Base_Start_IT+0xa4>)
 8005322:	4013      	ands	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b06      	cmp	r3, #6
 800532a:	d015      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x8c>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005332:	d011      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005344:	e008      	b.n	8005358 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e000      	b.n	800535a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005358:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40014000 	.word	0x40014000
 8005370:	00010007 	.word	0x00010007

08005374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e049      	b.n	800541a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fc f91c 	bl	80015d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f000 fc52 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d109      	bne.n	8005448 <HAL_TIM_PWM_Start+0x24>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	bf14      	ite	ne
 8005440:	2301      	movne	r3, #1
 8005442:	2300      	moveq	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	e03c      	b.n	80054c2 <HAL_TIM_PWM_Start+0x9e>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d109      	bne.n	8005462 <HAL_TIM_PWM_Start+0x3e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	bf14      	ite	ne
 800545a:	2301      	movne	r3, #1
 800545c:	2300      	moveq	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	e02f      	b.n	80054c2 <HAL_TIM_PWM_Start+0x9e>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d109      	bne.n	800547c <HAL_TIM_PWM_Start+0x58>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	bf14      	ite	ne
 8005474:	2301      	movne	r3, #1
 8005476:	2300      	moveq	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e022      	b.n	80054c2 <HAL_TIM_PWM_Start+0x9e>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b0c      	cmp	r3, #12
 8005480:	d109      	bne.n	8005496 <HAL_TIM_PWM_Start+0x72>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b01      	cmp	r3, #1
 800548c:	bf14      	ite	ne
 800548e:	2301      	movne	r3, #1
 8005490:	2300      	moveq	r3, #0
 8005492:	b2db      	uxtb	r3, r3
 8005494:	e015      	b.n	80054c2 <HAL_TIM_PWM_Start+0x9e>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b10      	cmp	r3, #16
 800549a:	d109      	bne.n	80054b0 <HAL_TIM_PWM_Start+0x8c>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	bf14      	ite	ne
 80054a8:	2301      	movne	r3, #1
 80054aa:	2300      	moveq	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	e008      	b.n	80054c2 <HAL_TIM_PWM_Start+0x9e>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	bf14      	ite	ne
 80054bc:	2301      	movne	r3, #1
 80054be:	2300      	moveq	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e083      	b.n	80055d2 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <HAL_TIM_PWM_Start+0xb6>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d8:	e023      	b.n	8005522 <HAL_TIM_PWM_Start+0xfe>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d104      	bne.n	80054ea <HAL_TIM_PWM_Start+0xc6>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e8:	e01b      	b.n	8005522 <HAL_TIM_PWM_Start+0xfe>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Start+0xd6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054f8:	e013      	b.n	8005522 <HAL_TIM_PWM_Start+0xfe>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b0c      	cmp	r3, #12
 80054fe:	d104      	bne.n	800550a <HAL_TIM_PWM_Start+0xe6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005508:	e00b      	b.n	8005522 <HAL_TIM_PWM_Start+0xfe>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b10      	cmp	r3, #16
 800550e:	d104      	bne.n	800551a <HAL_TIM_PWM_Start+0xf6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005518:	e003      	b.n	8005522 <HAL_TIM_PWM_Start+0xfe>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2201      	movs	r2, #1
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 ffb6 	bl	800649c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a29      	ldr	r2, [pc, #164]	; (80055dc <HAL_TIM_PWM_Start+0x1b8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00e      	beq.n	8005558 <HAL_TIM_PWM_Start+0x134>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <HAL_TIM_PWM_Start+0x1bc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d009      	beq.n	8005558 <HAL_TIM_PWM_Start+0x134>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <HAL_TIM_PWM_Start+0x1c0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIM_PWM_Start+0x134>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <HAL_TIM_PWM_Start+0x1c4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d101      	bne.n	800555c <HAL_TIM_PWM_Start+0x138>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <HAL_TIM_PWM_Start+0x13a>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005570:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_TIM_PWM_Start+0x1b8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d009      	beq.n	8005590 <HAL_TIM_PWM_Start+0x16c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005584:	d004      	beq.n	8005590 <HAL_TIM_PWM_Start+0x16c>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a15      	ldr	r2, [pc, #84]	; (80055e0 <HAL_TIM_PWM_Start+0x1bc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d115      	bne.n	80055bc <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	4b15      	ldr	r3, [pc, #84]	; (80055ec <HAL_TIM_PWM_Start+0x1c8>)
 8005598:	4013      	ands	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b06      	cmp	r3, #6
 80055a0:	d015      	beq.n	80055ce <HAL_TIM_PWM_Start+0x1aa>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a8:	d011      	beq.n	80055ce <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0201 	orr.w	r2, r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ba:	e008      	b.n	80055ce <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e000      	b.n	80055d0 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40014400 	.word	0x40014400
 80055e8:	40014800 	.word	0x40014800
 80055ec:	00010007 	.word	0x00010007

080055f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e049      	b.n	8005696 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fb fffe 	bl	8001618 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3304      	adds	r3, #4
 800562c:	4619      	mov	r1, r3
 800562e:	4610      	mov	r0, r2
 8005630:	f000 fb14 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <HAL_TIM_IC_Start_IT+0x1e>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	e023      	b.n	8005706 <HAL_TIM_IC_Start_IT+0x66>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d104      	bne.n	80056ce <HAL_TIM_IC_Start_IT+0x2e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	e01b      	b.n	8005706 <HAL_TIM_IC_Start_IT+0x66>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d104      	bne.n	80056de <HAL_TIM_IC_Start_IT+0x3e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	e013      	b.n	8005706 <HAL_TIM_IC_Start_IT+0x66>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b0c      	cmp	r3, #12
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_IC_Start_IT+0x4e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	e00b      	b.n	8005706 <HAL_TIM_IC_Start_IT+0x66>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d104      	bne.n	80056fe <HAL_TIM_IC_Start_IT+0x5e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	e003      	b.n	8005706 <HAL_TIM_IC_Start_IT+0x66>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005704:	b2db      	uxtb	r3, r3
 8005706:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d104      	bne.n	8005718 <HAL_TIM_IC_Start_IT+0x78>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005714:	b2db      	uxtb	r3, r3
 8005716:	e013      	b.n	8005740 <HAL_TIM_IC_Start_IT+0xa0>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b04      	cmp	r3, #4
 800571c:	d104      	bne.n	8005728 <HAL_TIM_IC_Start_IT+0x88>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e00b      	b.n	8005740 <HAL_TIM_IC_Start_IT+0xa0>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b08      	cmp	r3, #8
 800572c:	d104      	bne.n	8005738 <HAL_TIM_IC_Start_IT+0x98>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005734:	b2db      	uxtb	r3, r3
 8005736:	e003      	b.n	8005740 <HAL_TIM_IC_Start_IT+0xa0>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800573e:	b2db      	uxtb	r3, r3
 8005740:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005742:	7bbb      	ldrb	r3, [r7, #14]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d102      	bne.n	800574e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005748:	7b7b      	ldrb	r3, [r7, #13]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d001      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0c9      	b.n	80058e6 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d104      	bne.n	8005762 <HAL_TIM_IC_Start_IT+0xc2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005760:	e023      	b.n	80057aa <HAL_TIM_IC_Start_IT+0x10a>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b04      	cmp	r3, #4
 8005766:	d104      	bne.n	8005772 <HAL_TIM_IC_Start_IT+0xd2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005770:	e01b      	b.n	80057aa <HAL_TIM_IC_Start_IT+0x10a>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d104      	bne.n	8005782 <HAL_TIM_IC_Start_IT+0xe2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005780:	e013      	b.n	80057aa <HAL_TIM_IC_Start_IT+0x10a>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b0c      	cmp	r3, #12
 8005786:	d104      	bne.n	8005792 <HAL_TIM_IC_Start_IT+0xf2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005790:	e00b      	b.n	80057aa <HAL_TIM_IC_Start_IT+0x10a>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b10      	cmp	r3, #16
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_IC_Start_IT+0x102>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057a0:	e003      	b.n	80057aa <HAL_TIM_IC_Start_IT+0x10a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <HAL_TIM_IC_Start_IT+0x11a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057b8:	e013      	b.n	80057e2 <HAL_TIM_IC_Start_IT+0x142>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d104      	bne.n	80057ca <HAL_TIM_IC_Start_IT+0x12a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057c8:	e00b      	b.n	80057e2 <HAL_TIM_IC_Start_IT+0x142>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d104      	bne.n	80057da <HAL_TIM_IC_Start_IT+0x13a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057d8:	e003      	b.n	80057e2 <HAL_TIM_IC_Start_IT+0x142>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b0c      	cmp	r3, #12
 80057e6:	d841      	bhi.n	800586c <HAL_TIM_IC_Start_IT+0x1cc>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <HAL_TIM_IC_Start_IT+0x150>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005825 	.word	0x08005825
 80057f4:	0800586d 	.word	0x0800586d
 80057f8:	0800586d 	.word	0x0800586d
 80057fc:	0800586d 	.word	0x0800586d
 8005800:	08005837 	.word	0x08005837
 8005804:	0800586d 	.word	0x0800586d
 8005808:	0800586d 	.word	0x0800586d
 800580c:	0800586d 	.word	0x0800586d
 8005810:	08005849 	.word	0x08005849
 8005814:	0800586d 	.word	0x0800586d
 8005818:	0800586d 	.word	0x0800586d
 800581c:	0800586d 	.word	0x0800586d
 8005820:	0800585b 	.word	0x0800585b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0202 	orr.w	r2, r2, #2
 8005832:	60da      	str	r2, [r3, #12]
      break;
 8005834:	e01d      	b.n	8005872 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0204 	orr.w	r2, r2, #4
 8005844:	60da      	str	r2, [r3, #12]
      break;
 8005846:	e014      	b.n	8005872 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0208 	orr.w	r2, r2, #8
 8005856:	60da      	str	r2, [r3, #12]
      break;
 8005858:	e00b      	b.n	8005872 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0210 	orr.w	r2, r2, #16
 8005868:	60da      	str	r2, [r3, #12]
      break;
 800586a:	e002      	b.n	8005872 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	73fb      	strb	r3, [r7, #15]
      break;
 8005870:	bf00      	nop
  }

  if (status == HAL_OK)
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d135      	bne.n	80058e4 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2201      	movs	r2, #1
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fe0b 	bl	800649c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <HAL_TIM_IC_Start_IT+0x250>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_TIM_IC_Start_IT+0x204>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005898:	d004      	beq.n	80058a4 <HAL_TIM_IC_Start_IT+0x204>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a15      	ldr	r2, [pc, #84]	; (80058f4 <HAL_TIM_IC_Start_IT+0x254>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d115      	bne.n	80058d0 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <HAL_TIM_IC_Start_IT+0x258>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b06      	cmp	r3, #6
 80058b4:	d015      	beq.n	80058e2 <HAL_TIM_IC_Start_IT+0x242>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058bc:	d011      	beq.n	80058e2 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ce:	e008      	b.n	80058e2 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e000      	b.n	80058e4 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40014000 	.word	0x40014000
 80058f8:	00010007 	.word	0x00010007

080058fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005916:	2302      	movs	r3, #2
 8005918:	e088      	b.n	8005a2c <HAL_TIM_IC_ConfigChannel+0x130>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d11b      	bne.n	8005960 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	6819      	ldr	r1, [r3, #0]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f000 fca4 	bl	8006284 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 020c 	bic.w	r2, r2, #12
 800594a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	619a      	str	r2, [r3, #24]
 800595e:	e060      	b.n	8005a22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b04      	cmp	r3, #4
 8005964:	d11c      	bne.n	80059a0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6819      	ldr	r1, [r3, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f000 fcdb 	bl	8006330 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005988:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6999      	ldr	r1, [r3, #24]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	021a      	lsls	r2, r3, #8
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	619a      	str	r2, [r3, #24]
 800599e:	e040      	b.n	8005a22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d11b      	bne.n	80059de <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6819      	ldr	r1, [r3, #0]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f000 fcf8 	bl	80063aa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 020c 	bic.w	r2, r2, #12
 80059c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69d9      	ldr	r1, [r3, #28]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	61da      	str	r2, [r3, #28]
 80059dc:	e021      	b.n	8005a22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b0c      	cmp	r3, #12
 80059e2:	d11c      	bne.n	8005a1e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6819      	ldr	r1, [r3, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f000 fd15 	bl	8006422 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69da      	ldr	r2, [r3, #28]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a06:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69d9      	ldr	r1, [r3, #28]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	021a      	lsls	r2, r3, #8
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	61da      	str	r2, [r3, #28]
 8005a1c:	e001      	b.n	8005a22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e0ff      	b.n	8005c52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b14      	cmp	r3, #20
 8005a5e:	f200 80f0 	bhi.w	8005c42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a62:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a68:	08005abd 	.word	0x08005abd
 8005a6c:	08005c43 	.word	0x08005c43
 8005a70:	08005c43 	.word	0x08005c43
 8005a74:	08005c43 	.word	0x08005c43
 8005a78:	08005afd 	.word	0x08005afd
 8005a7c:	08005c43 	.word	0x08005c43
 8005a80:	08005c43 	.word	0x08005c43
 8005a84:	08005c43 	.word	0x08005c43
 8005a88:	08005b3f 	.word	0x08005b3f
 8005a8c:	08005c43 	.word	0x08005c43
 8005a90:	08005c43 	.word	0x08005c43
 8005a94:	08005c43 	.word	0x08005c43
 8005a98:	08005b7f 	.word	0x08005b7f
 8005a9c:	08005c43 	.word	0x08005c43
 8005aa0:	08005c43 	.word	0x08005c43
 8005aa4:	08005c43 	.word	0x08005c43
 8005aa8:	08005bc1 	.word	0x08005bc1
 8005aac:	08005c43 	.word	0x08005c43
 8005ab0:	08005c43 	.word	0x08005c43
 8005ab4:	08005c43 	.word	0x08005c43
 8005ab8:	08005c01 	.word	0x08005c01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f938 	bl	8005d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0208 	orr.w	r2, r2, #8
 8005ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0204 	bic.w	r2, r2, #4
 8005ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6999      	ldr	r1, [r3, #24]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	619a      	str	r2, [r3, #24]
      break;
 8005afa:	e0a5      	b.n	8005c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f99e 	bl	8005e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6999      	ldr	r1, [r3, #24]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	021a      	lsls	r2, r3, #8
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	619a      	str	r2, [r3, #24]
      break;
 8005b3c:	e084      	b.n	8005c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f9fd 	bl	8005f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0208 	orr.w	r2, r2, #8
 8005b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0204 	bic.w	r2, r2, #4
 8005b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69d9      	ldr	r1, [r3, #28]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	61da      	str	r2, [r3, #28]
      break;
 8005b7c:	e064      	b.n	8005c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fa5b 	bl	8006040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69da      	ldr	r2, [r3, #28]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69d9      	ldr	r1, [r3, #28]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	021a      	lsls	r2, r3, #8
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	61da      	str	r2, [r3, #28]
      break;
 8005bbe:	e043      	b.n	8005c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fa9e 	bl	8006108 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0208 	orr.w	r2, r2, #8
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0204 	bic.w	r2, r2, #4
 8005bea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bfe:	e023      	b.n	8005c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fadc 	bl	80061c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	021a      	lsls	r2, r3, #8
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c40:	e002      	b.n	8005c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	75fb      	strb	r3, [r7, #23]
      break;
 8005c46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop

08005c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a2e      	ldr	r2, [pc, #184]	; (8005d28 <TIM_Base_SetConfig+0xcc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_Base_SetConfig+0x20>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7a:	d108      	bne.n	8005c8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a25      	ldr	r2, [pc, #148]	; (8005d28 <TIM_Base_SetConfig+0xcc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00f      	beq.n	8005cb6 <TIM_Base_SetConfig+0x5a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9c:	d00b      	beq.n	8005cb6 <TIM_Base_SetConfig+0x5a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a22      	ldr	r2, [pc, #136]	; (8005d2c <TIM_Base_SetConfig+0xd0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d007      	beq.n	8005cb6 <TIM_Base_SetConfig+0x5a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a21      	ldr	r2, [pc, #132]	; (8005d30 <TIM_Base_SetConfig+0xd4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_Base_SetConfig+0x5a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a20      	ldr	r2, [pc, #128]	; (8005d34 <TIM_Base_SetConfig+0xd8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d108      	bne.n	8005cc8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a0e      	ldr	r2, [pc, #56]	; (8005d28 <TIM_Base_SetConfig+0xcc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <TIM_Base_SetConfig+0xb0>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a0d      	ldr	r2, [pc, #52]	; (8005d2c <TIM_Base_SetConfig+0xd0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_Base_SetConfig+0xb0>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a0c      	ldr	r2, [pc, #48]	; (8005d30 <TIM_Base_SetConfig+0xd4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0xb0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a0b      	ldr	r2, [pc, #44]	; (8005d34 <TIM_Base_SetConfig+0xd8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d103      	bne.n	8005d14 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	615a      	str	r2, [r3, #20]
}
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800

08005d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f023 0302 	bic.w	r3, r3, #2
 8005d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a28      	ldr	r2, [pc, #160]	; (8005e34 <TIM_OC1_SetConfig+0xfc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00b      	beq.n	8005db0 <TIM_OC1_SetConfig+0x78>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a27      	ldr	r2, [pc, #156]	; (8005e38 <TIM_OC1_SetConfig+0x100>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d007      	beq.n	8005db0 <TIM_OC1_SetConfig+0x78>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <TIM_OC1_SetConfig+0x104>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_OC1_SetConfig+0x78>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a25      	ldr	r2, [pc, #148]	; (8005e40 <TIM_OC1_SetConfig+0x108>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10c      	bne.n	8005dca <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0308 	bic.w	r3, r3, #8
 8005db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f023 0304 	bic.w	r3, r3, #4
 8005dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a19      	ldr	r2, [pc, #100]	; (8005e34 <TIM_OC1_SetConfig+0xfc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00b      	beq.n	8005dea <TIM_OC1_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <TIM_OC1_SetConfig+0x100>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d007      	beq.n	8005dea <TIM_OC1_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a17      	ldr	r2, [pc, #92]	; (8005e3c <TIM_OC1_SetConfig+0x104>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_OC1_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <TIM_OC1_SetConfig+0x108>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d111      	bne.n	8005e0e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f023 0210 	bic.w	r2, r3, #16
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f023 0320 	bic.w	r3, r3, #32
 8005e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a24      	ldr	r2, [pc, #144]	; (8005f34 <TIM_OC2_SetConfig+0xf0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d10d      	bne.n	8005ec4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <TIM_OC2_SetConfig+0xf0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <TIM_OC2_SetConfig+0xa0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a1a      	ldr	r2, [pc, #104]	; (8005f38 <TIM_OC2_SetConfig+0xf4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <TIM_OC2_SetConfig+0xa0>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a19      	ldr	r2, [pc, #100]	; (8005f3c <TIM_OC2_SetConfig+0xf8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_OC2_SetConfig+0xa0>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <TIM_OC2_SetConfig+0xfc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d113      	bne.n	8005f0c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ef2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40012c00 	.word	0x40012c00
 8005f38:	40014000 	.word	0x40014000
 8005f3c:	40014400 	.word	0x40014400
 8005f40:	40014800 	.word	0x40014800

08005f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0303 	bic.w	r3, r3, #3
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a23      	ldr	r2, [pc, #140]	; (8006030 <TIM_OC3_SetConfig+0xec>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d10d      	bne.n	8005fc2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fc0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a1a      	ldr	r2, [pc, #104]	; (8006030 <TIM_OC3_SetConfig+0xec>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00b      	beq.n	8005fe2 <TIM_OC3_SetConfig+0x9e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a19      	ldr	r2, [pc, #100]	; (8006034 <TIM_OC3_SetConfig+0xf0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d007      	beq.n	8005fe2 <TIM_OC3_SetConfig+0x9e>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a18      	ldr	r2, [pc, #96]	; (8006038 <TIM_OC3_SetConfig+0xf4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_OC3_SetConfig+0x9e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a17      	ldr	r2, [pc, #92]	; (800603c <TIM_OC3_SetConfig+0xf8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d113      	bne.n	800600a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	621a      	str	r2, [r3, #32]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	40012c00 	.word	0x40012c00
 8006034:	40014000 	.word	0x40014000
 8006038:	40014400 	.word	0x40014400
 800603c:	40014800 	.word	0x40014800

08006040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800606e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800608e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	031b      	lsls	r3, r3, #12
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a16      	ldr	r2, [pc, #88]	; (80060f8 <TIM_OC4_SetConfig+0xb8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00b      	beq.n	80060bc <TIM_OC4_SetConfig+0x7c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a15      	ldr	r2, [pc, #84]	; (80060fc <TIM_OC4_SetConfig+0xbc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_OC4_SetConfig+0x7c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a14      	ldr	r2, [pc, #80]	; (8006100 <TIM_OC4_SetConfig+0xc0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC4_SetConfig+0x7c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a13      	ldr	r2, [pc, #76]	; (8006104 <TIM_OC4_SetConfig+0xc4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d109      	bne.n	80060d0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	019b      	lsls	r3, r3, #6
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40014000 	.word	0x40014000
 8006100:	40014400 	.word	0x40014400
 8006104:	40014800 	.word	0x40014800

08006108 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800614c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <TIM_OC5_SetConfig+0xac>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <TIM_OC5_SetConfig+0x72>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <TIM_OC5_SetConfig+0xb0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <TIM_OC5_SetConfig+0x72>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a13      	ldr	r2, [pc, #76]	; (80061bc <TIM_OC5_SetConfig+0xb4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_OC5_SetConfig+0x72>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a12      	ldr	r2, [pc, #72]	; (80061c0 <TIM_OC5_SetConfig+0xb8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d109      	bne.n	800618e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006180:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	621a      	str	r2, [r3, #32]
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800620a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	051b      	lsls	r3, r3, #20
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a16      	ldr	r2, [pc, #88]	; (8006274 <TIM_OC6_SetConfig+0xb0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00b      	beq.n	8006238 <TIM_OC6_SetConfig+0x74>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a15      	ldr	r2, [pc, #84]	; (8006278 <TIM_OC6_SetConfig+0xb4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d007      	beq.n	8006238 <TIM_OC6_SetConfig+0x74>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a14      	ldr	r2, [pc, #80]	; (800627c <TIM_OC6_SetConfig+0xb8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_OC6_SetConfig+0x74>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a13      	ldr	r2, [pc, #76]	; (8006280 <TIM_OC6_SetConfig+0xbc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d109      	bne.n	800624c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800623e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	029b      	lsls	r3, r3, #10
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	621a      	str	r2, [r3, #32]
}
 8006266:	bf00      	nop
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40014000 	.word	0x40014000
 800627c:	40014400 	.word	0x40014400
 8006280:	40014800 	.word	0x40014800

08006284 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f023 0201 	bic.w	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <TIM_TI1_SetConfig+0xa4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d007      	beq.n	80062c2 <TIM_TI1_SetConfig+0x3e>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b8:	d003      	beq.n	80062c2 <TIM_TI1_SetConfig+0x3e>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4a1b      	ldr	r2, [pc, #108]	; (800632c <TIM_TI1_SetConfig+0xa8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d101      	bne.n	80062c6 <TIM_TI1_SetConfig+0x42>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <TIM_TI1_SetConfig+0x44>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e003      	b.n	80062e6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f023 030a 	bic.w	r3, r3, #10
 8006300:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f003 030a 	and.w	r3, r3, #10
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40012c00 	.word	0x40012c00
 800632c:	40014000 	.word	0x40014000

08006330 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0210 	bic.w	r2, r3, #16
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800635c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800636e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	031b      	lsls	r3, r3, #12
 8006374:	b29b      	uxth	r3, r3
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006382:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	621a      	str	r2, [r3, #32]
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b087      	sub	sp, #28
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f023 0303 	bic.w	r3, r3, #3
 80063d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80063fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	621a      	str	r2, [r3, #32]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006422:	b480      	push	{r7}
 8006424:	b087      	sub	sp, #28
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
 800642e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006460:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	031b      	lsls	r3, r3, #12
 8006466:	b29b      	uxth	r3, r3
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	4313      	orrs	r3, r2
 800646c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006474:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	031b      	lsls	r3, r3, #12
 800647a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	621a      	str	r2, [r3, #32]
}
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	2201      	movs	r2, #1
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a1a      	ldr	r2, [r3, #32]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	43db      	mvns	r3, r3
 80064be:	401a      	ands	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a1a      	ldr	r2, [r3, #32]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	fa01 f303 	lsl.w	r3, r1, r3
 80064d4:	431a      	orrs	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	621a      	str	r2, [r3, #32]
}
 80064da:	bf00      	nop
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
	...

080064e8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <HAL_TIMEx_PWMN_Start+0x24>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	e022      	b.n	8006552 <HAL_TIMEx_PWMN_Start+0x6a>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b04      	cmp	r3, #4
 8006510:	d109      	bne.n	8006526 <HAL_TIMEx_PWMN_Start+0x3e>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b01      	cmp	r3, #1
 800651c:	bf14      	ite	ne
 800651e:	2301      	movne	r3, #1
 8006520:	2300      	moveq	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	e015      	b.n	8006552 <HAL_TIMEx_PWMN_Start+0x6a>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d109      	bne.n	8006540 <HAL_TIMEx_PWMN_Start+0x58>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b01      	cmp	r3, #1
 8006536:	bf14      	ite	ne
 8006538:	2301      	movne	r3, #1
 800653a:	2300      	moveq	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	e008      	b.n	8006552 <HAL_TIMEx_PWMN_Start+0x6a>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	bf14      	ite	ne
 800654c:	2301      	movne	r3, #1
 800654e:	2300      	moveq	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e05a      	b.n	8006610 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d104      	bne.n	800656a <HAL_TIMEx_PWMN_Start+0x82>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006568:	e013      	b.n	8006592 <HAL_TIMEx_PWMN_Start+0xaa>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b04      	cmp	r3, #4
 800656e:	d104      	bne.n	800657a <HAL_TIMEx_PWMN_Start+0x92>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006578:	e00b      	b.n	8006592 <HAL_TIMEx_PWMN_Start+0xaa>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b08      	cmp	r3, #8
 800657e:	d104      	bne.n	800658a <HAL_TIMEx_PWMN_Start+0xa2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006588:	e003      	b.n	8006592 <HAL_TIMEx_PWMN_Start+0xaa>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2204      	movs	r2, #4
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f920 	bl	80067e0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a18      	ldr	r2, [pc, #96]	; (8006618 <HAL_TIMEx_PWMN_Start+0x130>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d009      	beq.n	80065ce <HAL_TIMEx_PWMN_Start+0xe6>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c2:	d004      	beq.n	80065ce <HAL_TIMEx_PWMN_Start+0xe6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a14      	ldr	r2, [pc, #80]	; (800661c <HAL_TIMEx_PWMN_Start+0x134>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d115      	bne.n	80065fa <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	4b12      	ldr	r3, [pc, #72]	; (8006620 <HAL_TIMEx_PWMN_Start+0x138>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b06      	cmp	r3, #6
 80065de:	d015      	beq.n	800660c <HAL_TIMEx_PWMN_Start+0x124>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e6:	d011      	beq.n	800660c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f8:	e008      	b.n	800660c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e000      	b.n	800660e <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40012c00 	.word	0x40012c00
 800661c:	40014000 	.word	0x40014000
 8006620:	00010007 	.word	0x00010007

08006624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006638:	2302      	movs	r3, #2
 800663a:	e04f      	b.n	80066dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a21      	ldr	r2, [pc, #132]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d108      	bne.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800666c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a14      	ldr	r2, [pc, #80]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a4:	d004      	beq.n	80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a10      	ldr	r2, [pc, #64]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d10c      	bne.n	80066ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	40012c00 	.word	0x40012c00
 80066ec:	40014000 	.word	0x40014000

080066f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006708:	2302      	movs	r3, #2
 800670a:	e060      	b.n	80067ce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4313      	orrs	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	041b      	lsls	r3, r3, #16
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a14      	ldr	r2, [pc, #80]	; (80067dc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d115      	bne.n	80067bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	051b      	lsls	r3, r3, #20
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40012c00 	.word	0x40012c00

080067e0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	2204      	movs	r2, #4
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1a      	ldr	r2, [r3, #32]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	43db      	mvns	r3, r3
 8006802:	401a      	ands	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a1a      	ldr	r2, [r3, #32]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	fa01 f303 	lsl.w	r3, r1, r3
 8006818:	431a      	orrs	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e040      	b.n	80068be <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d106      	bne.n	8006852 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7fa ffab 	bl	80017a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2224      	movs	r2, #36	; 0x24
 8006856:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0201 	bic.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f82d 	bl	80068c8 <UART_SetConfig>
 800686e:	4603      	mov	r3, r0
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e022      	b.n	80068be <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f957 	bl	8006b34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006894:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0201 	orr.w	r2, r2, #1
 80068b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f9de 	bl	8006c78 <UART_CheckIdleState>
 80068bc:	4603      	mov	r3, r0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	4b8a      	ldr	r3, [pc, #552]	; (8006b1c <UART_SetConfig+0x254>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6812      	ldr	r2, [r2, #0]
 80068fa:	6979      	ldr	r1, [r7, #20]
 80068fc:	430b      	orrs	r3, r1
 80068fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	430a      	orrs	r2, r1
 8006938:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a78      	ldr	r2, [pc, #480]	; (8006b20 <UART_SetConfig+0x258>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d120      	bne.n	8006986 <UART_SetConfig+0xbe>
 8006944:	4b77      	ldr	r3, [pc, #476]	; (8006b24 <UART_SetConfig+0x25c>)
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	2b03      	cmp	r3, #3
 800694e:	d817      	bhi.n	8006980 <UART_SetConfig+0xb8>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <UART_SetConfig+0x90>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	08006969 	.word	0x08006969
 800695c:	08006975 	.word	0x08006975
 8006960:	0800697b 	.word	0x0800697b
 8006964:	0800696f 	.word	0x0800696f
 8006968:	2300      	movs	r3, #0
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	e01d      	b.n	80069aa <UART_SetConfig+0xe2>
 800696e:	2302      	movs	r3, #2
 8006970:	77fb      	strb	r3, [r7, #31]
 8006972:	e01a      	b.n	80069aa <UART_SetConfig+0xe2>
 8006974:	2304      	movs	r3, #4
 8006976:	77fb      	strb	r3, [r7, #31]
 8006978:	e017      	b.n	80069aa <UART_SetConfig+0xe2>
 800697a:	2308      	movs	r3, #8
 800697c:	77fb      	strb	r3, [r7, #31]
 800697e:	e014      	b.n	80069aa <UART_SetConfig+0xe2>
 8006980:	2310      	movs	r3, #16
 8006982:	77fb      	strb	r3, [r7, #31]
 8006984:	e011      	b.n	80069aa <UART_SetConfig+0xe2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a67      	ldr	r2, [pc, #412]	; (8006b28 <UART_SetConfig+0x260>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d102      	bne.n	8006996 <UART_SetConfig+0xce>
 8006990:	2300      	movs	r3, #0
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e009      	b.n	80069aa <UART_SetConfig+0xe2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a64      	ldr	r2, [pc, #400]	; (8006b2c <UART_SetConfig+0x264>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d102      	bne.n	80069a6 <UART_SetConfig+0xde>
 80069a0:	2300      	movs	r3, #0
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	e001      	b.n	80069aa <UART_SetConfig+0xe2>
 80069a6:	2310      	movs	r3, #16
 80069a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b2:	d15a      	bne.n	8006a6a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80069b4:	7ffb      	ldrb	r3, [r7, #31]
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d827      	bhi.n	8006a0a <UART_SetConfig+0x142>
 80069ba:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <UART_SetConfig+0xf8>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	080069e5 	.word	0x080069e5
 80069c4:	080069ed 	.word	0x080069ed
 80069c8:	080069f5 	.word	0x080069f5
 80069cc:	08006a0b 	.word	0x08006a0b
 80069d0:	080069fb 	.word	0x080069fb
 80069d4:	08006a0b 	.word	0x08006a0b
 80069d8:	08006a0b 	.word	0x08006a0b
 80069dc:	08006a0b 	.word	0x08006a0b
 80069e0:	08006a03 	.word	0x08006a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e4:	f7fe fa9c 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80069e8:	61b8      	str	r0, [r7, #24]
        break;
 80069ea:	e013      	b.n	8006a14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069ec:	f7fe faba 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 80069f0:	61b8      	str	r0, [r7, #24]
        break;
 80069f2:	e00f      	b.n	8006a14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069f4:	4b4e      	ldr	r3, [pc, #312]	; (8006b30 <UART_SetConfig+0x268>)
 80069f6:	61bb      	str	r3, [r7, #24]
        break;
 80069f8:	e00c      	b.n	8006a14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069fa:	f7fe fa1b 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 80069fe:	61b8      	str	r0, [r7, #24]
        break;
 8006a00:	e008      	b.n	8006a14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a06:	61bb      	str	r3, [r7, #24]
        break;
 8006a08:	e004      	b.n	8006a14 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	77bb      	strb	r3, [r7, #30]
        break;
 8006a12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d074      	beq.n	8006b04 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	005a      	lsls	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	085b      	lsrs	r3, r3, #1
 8006a24:	441a      	add	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	2b0f      	cmp	r3, #15
 8006a34:	d916      	bls.n	8006a64 <UART_SetConfig+0x19c>
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a3c:	d212      	bcs.n	8006a64 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f023 030f 	bic.w	r3, r3, #15
 8006a46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f003 0307 	and.w	r3, r3, #7
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	89fb      	ldrh	r3, [r7, #14]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	89fa      	ldrh	r2, [r7, #14]
 8006a60:	60da      	str	r2, [r3, #12]
 8006a62:	e04f      	b.n	8006b04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	77bb      	strb	r3, [r7, #30]
 8006a68:	e04c      	b.n	8006b04 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a6a:	7ffb      	ldrb	r3, [r7, #31]
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d828      	bhi.n	8006ac2 <UART_SetConfig+0x1fa>
 8006a70:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <UART_SetConfig+0x1b0>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006a9d 	.word	0x08006a9d
 8006a7c:	08006aa5 	.word	0x08006aa5
 8006a80:	08006aad 	.word	0x08006aad
 8006a84:	08006ac3 	.word	0x08006ac3
 8006a88:	08006ab3 	.word	0x08006ab3
 8006a8c:	08006ac3 	.word	0x08006ac3
 8006a90:	08006ac3 	.word	0x08006ac3
 8006a94:	08006ac3 	.word	0x08006ac3
 8006a98:	08006abb 	.word	0x08006abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a9c:	f7fe fa40 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8006aa0:	61b8      	str	r0, [r7, #24]
        break;
 8006aa2:	e013      	b.n	8006acc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa4:	f7fe fa5e 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8006aa8:	61b8      	str	r0, [r7, #24]
        break;
 8006aaa:	e00f      	b.n	8006acc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aac:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <UART_SetConfig+0x268>)
 8006aae:	61bb      	str	r3, [r7, #24]
        break;
 8006ab0:	e00c      	b.n	8006acc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ab2:	f7fe f9bf 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 8006ab6:	61b8      	str	r0, [r7, #24]
        break;
 8006ab8:	e008      	b.n	8006acc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006abe:	61bb      	str	r3, [r7, #24]
        break;
 8006ac0:	e004      	b.n	8006acc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	77bb      	strb	r3, [r7, #30]
        break;
 8006aca:	bf00      	nop
    }

    if (pclk != 0U)
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d018      	beq.n	8006b04 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	085a      	lsrs	r2, r3, #1
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	441a      	add	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	2b0f      	cmp	r3, #15
 8006aea:	d909      	bls.n	8006b00 <UART_SetConfig+0x238>
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af2:	d205      	bcs.n	8006b00 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60da      	str	r2, [r3, #12]
 8006afe:	e001      	b.n	8006b04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b10:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	efff69f3 	.word	0xefff69f3
 8006b20:	40013800 	.word	0x40013800
 8006b24:	40021000 	.word	0x40021000
 8006b28:	40004400 	.word	0x40004400
 8006b2c:	40004800 	.word	0x40004800
 8006b30:	007a1200 	.word	0x007a1200

08006b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	f003 0310 	and.w	r3, r3, #16
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01a      	beq.n	8006c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c32:	d10a      	bne.n	8006c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b098      	sub	sp, #96	; 0x60
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c88:	f7fa ff14 	bl	8001ab4 <HAL_GetTick>
 8006c8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d12e      	bne.n	8006cfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f88c 	bl	8006dc8 <UART_WaitOnFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d021      	beq.n	8006cfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cca:	653b      	str	r3, [r7, #80]	; 0x50
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e6      	bne.n	8006cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e062      	b.n	8006dc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d149      	bne.n	8006d9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d10:	2200      	movs	r2, #0
 8006d12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f856 	bl	8006dc8 <UART_WaitOnFlagUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d03c      	beq.n	8006d9c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d40:	633b      	str	r3, [r7, #48]	; 0x30
 8006d42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e6      	bne.n	8006d22 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0301 	bic.w	r3, r3, #1
 8006d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d74:	61fa      	str	r2, [r7, #28]
 8006d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	69b9      	ldr	r1, [r7, #24]
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	617b      	str	r3, [r7, #20]
   return(result);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e5      	bne.n	8006d54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e011      	b.n	8006dc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3758      	adds	r7, #88	; 0x58
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd8:	e049      	b.n	8006e6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de0:	d045      	beq.n	8006e6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de2:	f7fa fe67 	bl	8001ab4 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d302      	bcc.n	8006df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e048      	b.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d031      	beq.n	8006e6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d110      	bne.n	8006e3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f838 	bl	8006e96 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e029      	b.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e48:	d111      	bne.n	8006e6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f81e 	bl	8006e96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e00f      	b.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69da      	ldr	r2, [r3, #28]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	4013      	ands	r3, r2
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	bf0c      	ite	eq
 8006e7e:	2301      	moveq	r3, #1
 8006e80:	2300      	movne	r3, #0
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	461a      	mov	r2, r3
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d0a6      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b095      	sub	sp, #84	; 0x54
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ebe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e6      	bne.n	8006e9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f023 0301 	bic.w	r3, r3, #1
 8006ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3308      	adds	r3, #8
 8006eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e5      	bne.n	8006ed0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d118      	bne.n	8006f3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f023 0310 	bic.w	r3, r3, #16
 8006f20:	647b      	str	r3, [r7, #68]	; 0x44
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f2a:	61bb      	str	r3, [r7, #24]
 8006f2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6979      	ldr	r1, [r7, #20]
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	613b      	str	r3, [r7, #16]
   return(result);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e6      	bne.n	8006f0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f52:	bf00      	nop
 8006f54:	3754      	adds	r7, #84	; 0x54
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
	...

08006f60 <__libc_init_array>:
 8006f60:	b570      	push	{r4, r5, r6, lr}
 8006f62:	4d0d      	ldr	r5, [pc, #52]	; (8006f98 <__libc_init_array+0x38>)
 8006f64:	4c0d      	ldr	r4, [pc, #52]	; (8006f9c <__libc_init_array+0x3c>)
 8006f66:	1b64      	subs	r4, r4, r5
 8006f68:	10a4      	asrs	r4, r4, #2
 8006f6a:	2600      	movs	r6, #0
 8006f6c:	42a6      	cmp	r6, r4
 8006f6e:	d109      	bne.n	8006f84 <__libc_init_array+0x24>
 8006f70:	4d0b      	ldr	r5, [pc, #44]	; (8006fa0 <__libc_init_array+0x40>)
 8006f72:	4c0c      	ldr	r4, [pc, #48]	; (8006fa4 <__libc_init_array+0x44>)
 8006f74:	f000 f820 	bl	8006fb8 <_init>
 8006f78:	1b64      	subs	r4, r4, r5
 8006f7a:	10a4      	asrs	r4, r4, #2
 8006f7c:	2600      	movs	r6, #0
 8006f7e:	42a6      	cmp	r6, r4
 8006f80:	d105      	bne.n	8006f8e <__libc_init_array+0x2e>
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f88:	4798      	blx	r3
 8006f8a:	3601      	adds	r6, #1
 8006f8c:	e7ee      	b.n	8006f6c <__libc_init_array+0xc>
 8006f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f92:	4798      	blx	r3
 8006f94:	3601      	adds	r6, #1
 8006f96:	e7f2      	b.n	8006f7e <__libc_init_array+0x1e>
 8006f98:	08007008 	.word	0x08007008
 8006f9c:	08007008 	.word	0x08007008
 8006fa0:	08007008 	.word	0x08007008
 8006fa4:	0800700c 	.word	0x0800700c

08006fa8 <memset>:
 8006fa8:	4402      	add	r2, r0
 8006faa:	4603      	mov	r3, r0
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d100      	bne.n	8006fb2 <memset+0xa>
 8006fb0:	4770      	bx	lr
 8006fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb6:	e7f9      	b.n	8006fac <memset+0x4>

08006fb8 <_init>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr

08006fc4 <_fini>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr
